"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9917],{3905:(e,t,o)=>{o.d(t,{Zo:()=>h,kt:()=>f});var r=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function n(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,a=function(e,t){if(null==e)return{};var o,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):n(n({},t),e)),o},h=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),m=c(o),f=a,u=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return o?r.createElement(u,n(n({ref:t},h),{},{components:o})):r.createElement(u,n({ref:t},h))}));function f(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=o.length,n=new Array(i);n[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,n[1]=l;for(var c=2;c<i;c++)n[c]=o[c];return r.createElement.apply(null,n)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},8137:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>n,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=o(7462),a=(o(7294),o(3905));const i={},n=void 0,l={unversionedId:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-57-Minimize-the-scope-of-local-variables",id:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-57-Minimize-the-scope-of-local-variables",title:"Chapter-9-Item-57-Minimize-the-scope-of-local-variables",description:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-57-Minimize-the-scope-of-local-variables.md",sourceDirName:"Books/EffectiveJava3/Chapter-9",slug:"/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-57-Minimize-the-scope-of-local-variables",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-57-Minimize-the-scope-of-local-variables",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-57-Minimize-the-scope-of-local-variables.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-9-Introduction",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Introduction"},next:{title:"Chapter-9-Item-58-Prefer-for-each-loops-to-traditional-for-loops",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-58-Prefer-for-each-loops-to-traditional-for-loops"}},s={},c=[{value:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1",level:2},{value:"Item 57: Minimize the scope of local variables\uff08\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u6700\u5c0f\u5316\uff09",id:"item-57-minimize-the-scope-of-local-variables\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u6700\u5c0f\u5316",level:3}],h={toc:c};function p(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1"},"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09"),(0,a.kt)("h3",{id:"item-57-minimize-the-scope-of-local-variables\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u6700\u5c0f\u5316"},"Item 57: Minimize the scope of local variables\uff08\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u6700\u5c0f\u5316\uff09"),(0,a.kt)("p",null,"This item is similar in nature to Item 15, \u201cMinimize the accessibility of classes and members.\u201d By minimizing the scope of local variables, you increase the readability and maintainability of your code and reduce the likelihood of error."),(0,a.kt)("p",null,"\u672c\u6761\u76ee\u5728\u6027\u8d28\u4e0a\u7c7b\u4f3c\u4e8e ",(0,a.kt)("a",{parentName:"p",href:"./Chapter-4-Item-15-Minimize-the-accessibility-of-classes-and-members"},"Item-15"),"\uff0c\u5373\u300c\u6700\u5c0f\u5316\u7c7b\u548c\u6210\u5458\u7684\u53ef\u8bbf\u95ee\u6027\u300d\u3002\u901a\u8fc7\u6700\u5c0f\u5316\u5c40\u90e8\u53d8\u91cf\u7684\u8303\u56f4\uff0c\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\uff0c\u5e76\u964d\u4f4e\u51fa\u9519\u7684\u53ef\u80fd\u6027\u3002"),(0,a.kt)("p",null,"Older programming languages, such as C, mandated that local variables must be declared at the head of a block, and some programmers continue to do this out of habit. It\u2019s a habit worth breaking. As a gentle reminder, Java lets you declare variables anywhere a statement is legal (as does C, since C99)."),(0,a.kt)("p",null,"\u8f83\u8001\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982 C \u8bed\u8a00\uff0c\u5f3a\u5236\u8981\u6c42\u5fc5\u987b\u5728\u4ee3\u7801\u5757\u7684\u5934\u90e8\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\uff0c\u4e00\u4e9b\u7a0b\u5e8f\u5458\u51fa\u4e8e\u4e60\u60ef\u76ee\u524d\u7ee7\u7eed\u8fd9\u6837\u505a\u3002\u8fd9\u662f\u4e00\u4e2a\u5e94\u6539\u53d8\u7684\u4e60\u60ef\u3002\u6e29\u99a8\u63d0\u9192\uff0cJava \u5141\u8bb8\u4f60\u5728\u4efb\u4f55\u80fd\u591f\u5408\u6cd5\u4f7f\u7528\u8bed\u53e5\u7684\u5730\u65b9\u58f0\u660e\u53d8\u91cf\uff08\u8fd9\u4e0e C99 \u6807\u51c6\u540e C \u8bed\u8a00\u4e00\u6837\uff09\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The most powerful technique for minimizing the scope of a local variable is to declare it where it is first used.")," If a variable is declared before it is used, it\u2019s just clutter\u2014one more thing to distract the reader who is trying to figure out what the program does. By the time the variable is used, the reader might not remember the variable\u2019s type or initial value."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5c06\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u6700\u5c0f\u5316\uff0c\u6700\u5177\u8bf4\u670d\u529b\u7684\u65b9\u5f0f\u5c31\u662f\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u5b83\u7684\u5730\u65b9\u58f0\u660e\u3002")," \u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u5728\u4f7f\u7528\u4e4b\u524d\u58f0\u660e\u4e86\uff0c\u4ee3\u7801\u4f1a\u53d8\u5f97\u5f88\u6df7\u4e71\uff0c\u8fd9\u662f\u53e6\u4e00\u4ef6\u5206\u6563\u8bfb\u8005\u6ce8\u610f\u529b\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u8bfb\u8005\u6b63\u5728\u8bd5\u56fe\u5f04\u6e05\u695a\u7a0b\u5e8f\u7684\u529f\u80fd\u3002\u5728\u4f7f\u7528\u5230\u8be5\u53d8\u91cf\u65f6\uff0c\u8bfb\u8005\u53ef\u80fd\u4e0d\u8bb0\u5f97\u53d8\u91cf\u7684\u7c7b\u578b\u6216\u521d\u59cb\u503c\u3002"),(0,a.kt)("p",null,"Declaring a local variable prematurely can cause its scope not only to begin too early but also to end too late. The scope of a local variable extends from the point where it is declared to the end of the enclosing block. If a variable is declared outside of the block in which it is used, it remains visible after the program exits that block. If a variable is used accidentally before or after its region of intended use, the consequences can be disastrous."),(0,a.kt)("p",null,"\u8fc7\u65e9\u5730\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\u4f1a\u5bfc\u81f4\u5176\u4f5c\u7528\u57df\u5f00\u59cb\u5f97\u592a\u65e9\uff0c\u800c\u4e14\u7ed3\u675f\u5f97\u8fc7\u665a\u3002\u5c40\u90e8\u53d8\u91cf\u7684\u8303\u56f4\u5e94\u8be5\u4ece\u58f0\u660e\u5b83\u7684\u5730\u65b9\u76f4\u5230\u5c01\u95ed\u5757\u7684\u672b\u5c3e\u3002\u5982\u679c\u53d8\u91cf\u5728\u4f7f\u7528\u5b83\u7684\u4ee3\u7801\u5757\u5916\u90e8\u58f0\u660e\uff0c\u5219\u5728\u7a0b\u5e8f\u9000\u51fa\u8be5\u5757\u4e4b\u540e\u5b83\u4ecd\u7136\u53ef\u89c1\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u5728\u5176\u9884\u671f\u4f7f\u7528\u533a\u57df\u4e4b\u524d\u6216\u4e4b\u540e\u610f\u5916\u4f7f\u7528\uff0c\u5176\u540e\u679c\u53ef\u80fd\u662f\u707e\u96be\u6027\u7684\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Nearly every local variable declaration should contain an initializer.")," If you don\u2019t yet have enough information to initialize a variable sensibly, you should postpone the declaration until you do. One exception to this rule concerns try-catch statements. If a variable is initialized to an expression whose evaluation can throw a checked exception, the variable must be initialized inside a try block (unless the enclosing method can propagate the exception). If the value must be used outside of the try block, then it must be declared before the try block, where it cannot yet be \u201csensibly initialized.\u201d For an example, see page 283."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u6bcf\u4e2a\u5c40\u90e8\u53d8\u91cf\u58f0\u660e\u90fd\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u3002")," \u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u606f\u6765\u5408\u7406\u5730\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\uff0c\u4f60\u5e94\u8be5\u63a8\u8fdf\u58f0\u660e\uff0c\u76f4\u5230\u6761\u4ef6\u6ee1\u8db3\u3002\u8fd9\u4e2a\u89c4\u5219\u7684\u4e00\u4e2a\u4f8b\u5916\u662f try-catch \u8bed\u53e5\u3002\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8be5\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u53ef\u4ee5\u629b\u51fa\u4e00\u4e2a checked \u5f02\u5e38\uff0c\u90a3\u4e48\u8be5\u53d8\u91cf\u5fc5\u987b\u5728 try \u5757\u4e2d\u521d\u59cb\u5316\uff08\u9664\u975e\u6240\u5305\u542b\u7684\u65b9\u6cd5\u53ef\u4ee5\u4f20\u64ad\u5f02\u5e38\uff09\u3002\u5982\u679c\u8be5\u503c\u5fc5\u987b\u5728 try \u5757\u4e4b\u5916\u4f7f\u7528\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u5728 try \u5757\u4e4b\u524d\u58f0\u660e\uff0c\u6b64\u65f6\u5b83\u8fd8\u4e0d\u80fd\u300c\u5408\u7406\u5730\u521d\u59cb\u5316\u300d\u3002\u4f8b\u5b50\u53ef\u53c2\u89c1 283 \u9875\u3002"),(0,a.kt)("p",null,"Loops present a special opportunity to minimize the scope of variables. The for loop, in both its traditional and for-each forms, allows you to declare loop variables, limiting their scope to the exact region where they\u2019re needed. (This region consists of the body of the loop and the code in parentheses between the for keyword and the body.) Therefore, prefer for loops to while loops, assuming the contents of the loop variable aren\u2019t needed after the loop terminates."),(0,a.kt)("p",null,"\u5faa\u73af\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684\u673a\u4f1a\u6765\u6700\u5c0f\u5316\u53d8\u91cf\u7684\u8303\u56f4\u3002for \u5faa\u73af\u7684\u4f20\u7edf\u5f62\u5f0f\u548c for-each \u5f62\u5f0f\u90fd\u5141\u8bb8\u58f0\u660e\u5faa\u73af\u53d8\u91cf\uff0c\u5c06\u5b83\u4eec\u7684\u4f5c\u7528\u57df\u7cbe\u786e\u9650\u5236\u5728\u9700\u8981\u5b83\u4eec\u7684\u533a\u57df\u3002\uff08\u8fd9\u4e2a\u533a\u57df\u7531\u5faa\u73af\u7684\u4e3b\u4f53\u4ee5\u53ca for \u5173\u952e\u5b57\u548c\u4e3b\u4f53\u4e4b\u95f4\u62ec\u53f7\u4e2d\u7684\u4ee3\u7801\u7ec4\u6210\u3002\uff09\u56e0\u6b64\uff0c\u5047\u8bbe\u5faa\u73af\u7ed3\u675f\u540e\u4e0d\u518d\u9700\u8981\u5faa\u73af\u53d8\u91cf\uff0cfor \u5faa\u73af\u5c31\u4f18\u4e8e while \u5faa\u73af\u3002"),(0,a.kt)("p",null,"For example, here is the preferred idiom for iterating over a collection (Item 58):"),(0,a.kt)("p",null,"\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u904d\u5386\u96c6\u5408\u7684\u9996\u9009\u4e60\u60ef\u7528\u6cd5\uff08",(0,a.kt)("a",{parentName:"p",href:"./Chapter-9-Item-58-Prefer-for-each-loops-to-traditional-for-loops"},"Item-58"),"\uff09\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// Preferred idiom for iterating over a collection or array\nfor (Element e : c) {\n    ... // Do Something with e\n}\n")),(0,a.kt)("p",null,"If you need access to the iterator, perhaps to call its remove method, the preferred idiom uses a traditional for loop in place of the for-each loop:"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u9700\u8981\u8bbf\u95ee iterator\uff0c\u6216\u8005\u8c03\u7528\u5b83\u7684 remove \u65b9\u6cd5\uff0c\u9996\u9009\u7684\u4e60\u60ef\u7528\u6cd5\u662f\u4f7f\u7528\u4f20\u7edf\u7684 for \u5faa\u73af\u6765\u4ee3\u66ff for-each \u5faa\u73af\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// Idiom for iterating when you need the iterator\nfor (Iterator<Element> i = c.iterator(); i.hasNext(); ) {\n    Element e = i.next();\n    ... // Do something with e and i\n}\n")),(0,a.kt)("p",null,"To see why these for loops are preferable to a while loop, consider the following code fragment, which contains two while loops and one bug:"),(0,a.kt)("p",null,"\u8981\u5f04\u6e05\u695a\u4e3a\u4ec0\u4e48 for \u5faa\u73af\u6bd4 while \u5faa\u73af\u66f4\u597d\uff0c\u8bf7\u8003\u8651\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u5176\u4e2d\u5305\u542b\u4e24\u4e2a while \u5faa\u73af\u548c\u4e00\u4e2a bug\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Iterator<Element> i = c.iterator();\nwhile (i.hasNext()) {\n    doSomething(i.next());\n}\n...\nIterator<Element> i2 = c2.iterator();\nwhile (i.hasNext()) { // BUG!\n    doSomethingElse(i2.next());\n}\n")),(0,a.kt)("p",null,"The second loop contains a copy-and-paste error: it initializes a new loop variable, i2, but uses the old one, i, which is, unfortunately, still in scope. The resulting code compiles without error and runs without throwing an exception, but it does the wrong thing. Instead of iterating over c2, the second loop terminates immediately, giving the false impression that c2 is empty. Because the program errs silently, the error can remain undetected for a long time."),(0,a.kt)("p",null,"\u7b2c\u4e8c\u4e2a\u5faa\u73af\u5305\u542b\u4e00\u4e2a\u590d\u5236\u7c98\u8d34\u9519\u8bef\uff1a\u5b83\u8ba1\u5212\u521d\u59cb\u5316\u4e00\u4e2a\u65b0\u7684\u5faa\u73af\u53d8\u91cf i2\uff0c\u5374\u8bef\u7528\u4e86\u65e7\u7684\u53d8\u91cf i\uff0c\u4e0d\u5e78\u7684\u662f\uff0ci \u4ecd\u7136\u5728\u4f5c\u7528\u57df\u4e2d\u3002\u751f\u6210\u7684\u4ee3\u7801\u7f16\u8bd1\u65f6\u6ca1\u6709\u9519\u8bef\uff0c\u8fd0\u884c\u65f6\u6ca1\u6709\u629b\u51fa\u5f02\u5e38\uff0c\u4f46\u662f\u5b83\u505a\u4e86\u9519\u8bef\u7684\u4e8b\u60c5\u3002\u7b2c\u4e8c\u4e2a\u5faa\u73af\u5e76\u6ca1\u6709\u904d\u5386 c2\uff0c\u800c\u662f\u7acb\u5373\u7ec8\u6b62\uff0c\u4ece\u800c\u4ea7\u751f c2 \u4e3a\u7a7a\u7684\u5047\u8c61\u3002\u56e0\u4e3a\u7a0b\u5e8f\u4f1a\u9759\u9ed8\u5730\u51fa\u9519\uff0c\u6240\u4ee5\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u90fd\u65e0\u6cd5\u68c0\u6d4b\u5230\u9519\u8bef\u3002"),(0,a.kt)("p",null,"If a similar copy-and-paste error were made in conjunction with either of the for loops (for-each or traditional), the resulting code wouldn\u2019t even compile. The element (or iterator) variable from the first loop would not be in scope in the second loop. Here\u2019s how it looks with the traditional for loop:"),(0,a.kt)("p",null,"\u5982\u679c\u5c06\u7c7b\u4f3c\u7684\u590d\u5236\u7c98\u8d34\u9519\u8bef\u53d1\u751f\u5728 for \u5faa\u73af\uff08for-each \u5faa\u73af\u6216\u4f20\u7edf\u5faa\u73af\uff09\uff0c\u5219\u751f\u6210\u7684\u4ee3\u7801\u751a\u81f3\u65e0\u6cd5\u7f16\u8bd1\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u5faa\u73af\uff0c\u7b2c\u4e00\u4e2a\u5faa\u73af\u4e2d\u7684\uff08\u6216 iterator\uff09\u53d8\u91cf\u5df2\u7ecf\u4e0d\u5728\u4f5c\u7528\u57df\u4e2d\u3002\u4e0b\u9762\u662f\u5b83\u4e0e\u4f20\u7edf for \u5faa\u73af\u7684\u6837\u5b50\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"for (Iterator<Element> i = c.iterator(); i.hasNext(); ) {\nElement e = i.next();\n... // Do something with e and i\n}\n...\n// Compile-time error - cannot find symbol i\nfor (Iterator<Element> i2 = c2.iterator(); i.hasNext(); ) {\nElement e2 = i2.next();\n... // Do something with e2 and i2\n}\n")),(0,a.kt)("p",null,"Moreover, if you use a for loop, it\u2019s much less likely that you\u2019ll make the copy-and-paste error because there\u2019s no incentive to use different variable names in the two loops. The loops are completely independent, so there\u2019s no harm in reusing the element (or iterator) variable name. In fact, it\u2019s often stylish to do so. The for loop has one more advantage over the while loop: it is shorter, which enhances readability. Here is another loop idiom that minimizes the scope of local variables:"),(0,a.kt)("p",null,"\u6b64\u5916\uff0c\u5982\u679c\u4f60\u4f7f\u7528 for \u5faa\u73af\uff0c\u90a3\u4e48\u53d1\u751f\u590d\u5236\u7c98\u8d34\u9519\u8bef\u7684\u53ef\u80fd\u6027\u8981\u5c0f\u5f97\u591a\uff0c\u56e0\u4e3a\u8fd9\u4e24\u79cd\u5faa\u73af\u4e2d\u6ca1\u6709\u4f7f\u7528\u4e0d\u540c\u53d8\u91cf\u540d\u79f0\u7684\u52a8\u673a\u3002\u5faa\u73af\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u590d\u7528\u5faa\u73af\uff08\u6216 iterator\uff09\u53d8\u91cf\u540d\u6ca1\u6709\u5bb3\u5904\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u6837\u505a\u901a\u5e38\u5f88\u6d41\u884c\u3002for \u5faa\u73af\u76f8\u6bd4 while \u5faa\u73af\u8fd8\u6709\u4e00\u4e2a\u4f18\u70b9\uff1a\u5b83\u66f4\u77ed\uff0c\u8fd9\u589e\u5f3a\u4e86\u53ef\u8bfb\u6027\u3002\u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u5faa\u73af\u4e60\u60ef\u7528\u6cd5\uff0c\u5b83\u4e5f\u6700\u5c0f\u5316\u4e86\u5c40\u90e8\u53d8\u91cf\u7684\u8303\u56f4\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"for (int i = 0, n = expensiveComputation(); i < n; i++) {\n    ... // Do something with i;\n}\n")),(0,a.kt)("p",null,"The important thing to notice about this idiom is that it has two loop variables, i and n, both of which have exactly the right scope. The second variable, n, is used to store the limit of the first, thus avoiding the cost of a redundant computation in every iteration. As a rule, you should use this idiom if the loop test involves a method invocation that is guaranteed to return the same result on each iteration."),(0,a.kt)("p",null,"\u5173\u4e8e\u8fd9\u4e2a\u7528\u6cd5\u9700\u8981\u6ce8\u610f\u7684\u91cd\u8981\u4e00\u70b9\u662f\uff0c\u5b83\u6709\u4e24\u4e2a\u5faa\u73af\u53d8\u91cf\uff0ci \u548c n\uff0c\u5b83\u4eec\u90fd\u5177\u6709\u5b8c\u5168\u6b63\u786e\u7684\u4f5c\u7528\u57df\u3002\u7b2c\u4e8c\u4e2a\u53d8\u91cf n \u7528\u4e8e\u5b58\u50a8\u7b2c\u4e00\u4e2a\u53d8\u91cf\u7684\u6781\u9650\uff0c\u4ece\u800c\u907f\u514d\u4e86\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u5197\u4f59\u8ba1\u7b97\u7684\u6210\u672c\u3002\u4f5c\u4e3a\u4e00\u4e2a\u89c4\u5219\uff0c\u5982\u679c\u5faa\u73af\u6d4b\u8bd5\u6d89\u53ca\u4e00\u4e2a\u65b9\u6cd5\u8c03\u7528\uff0c\u5e76\u4e14\u4fdd\u8bc1\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u8fd4\u56de\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u90a3\u4e48\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e2a\u4e60\u60ef\u7528\u6cd5\u3002"),(0,a.kt)("p",null,"A final technique to minimize the scope of local variables is to keep methods small and focused. If you combine two activities in the same method, local variables relevant to one activity may be in the scope of the code performing the other activity. To prevent this from happening, simply separate the method into two: one for each activity."),(0,a.kt)("p",null,"\u6700\u5c0f\u5316\u5c40\u90e8\u53d8\u91cf\u8303\u56f4\u7684\u6700\u540e\u4e00\u79cd\u6280\u672f\u662f\u4fdd\u6301\u65b9\u6cd5\u5c0f\u800c\u96c6\u4e2d\u3002\u5982\u679c\u5728\u540c\u4e00\u65b9\u6cd5\u4e2d\u5408\u5e76\u4e24\u4e2a\u64cd\u4f5c\uff0c\u4e0e\u4e00\u4e2a\u64cd\u4f5c\u76f8\u5173\u7684\u5c40\u90e8\u53d8\u91cf\u53ef\u80fd\u4f4d\u4e8e\u6267\u884c\u53e6\u4e00\u4e2a\u64cd\u4f5c\u7684\u4ee3\u7801\u7684\u8303\u56f4\u5185\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u53ea\u9700\u5c06\u65b9\u6cd5\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a\u6bcf\u4e2a\u64cd\u4f5c\u4e00\u4e2a\u3002"),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"./Chapter-9-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,a.kt)("a",{parentName:"strong",href:"./Chapter-9-Item-58-Prefer-for-each-loops-to-traditional-for-loops"},"Item 58: Prefer for-each loops to traditional for loops\uff08for-each \u5faa\u73af\u4f18\u4e8e\u4f20\u7edf\u7684 for \u5faa\u73af\uff09")))))}p.isMDXComponent=!0}}]);