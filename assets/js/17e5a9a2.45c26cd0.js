"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7040],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),h=p(a),u=n,d=h["".concat(l,".").concat(u)]||h[u]||c[u]||o;return a?r.createElement(d,s(s({ref:t},m),{},{components:a})):r.createElement(d,s({ref:t},m))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<o;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},6069:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const o={},s=void 0,i={unversionedId:"Books/EffectiveJava3/Chapter-8/Chapter-8-Item-51-Design-method-signatures-carefully",id:"Books/EffectiveJava3/Chapter-8/Chapter-8-Item-51-Design-method-signatures-carefully",title:"Chapter-8-Item-51-Design-method-signatures-carefully",description:"Chapter 8. Methods\uff08\u65b9\u6cd5\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-51-Design-method-signatures-carefully.md",sourceDirName:"Books/EffectiveJava3/Chapter-8",slug:"/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-51-Design-method-signatures-carefully",permalink:"/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-51-Design-method-signatures-carefully",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-51-Design-method-signatures-carefully.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-8-Item-50-Make-defensive-copies-when-needed",permalink:"/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-50-Make-defensive-copies-when-needed"},next:{title:"Chapter-8-Item-52-Use-overloading-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-52-Use-overloading-judiciously"}},l={},p=[{value:"Chapter 8. Methods\uff08\u65b9\u6cd5\uff09",id:"chapter-8-methods\u65b9\u6cd5",level:2},{value:"Item 51: Design method signatures carefully\uff08\u4ed4\u7ec6\u8bbe\u8ba1\u65b9\u6cd5\u7b7e\u540d\uff09",id:"item-51-design-method-signatures-carefully\u4ed4\u7ec6\u8bbe\u8ba1\u65b9\u6cd5\u7b7e\u540d",level:3}],m={toc:p};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-8-methods\u65b9\u6cd5"},"Chapter 8. Methods\uff08\u65b9\u6cd5\uff09"),(0,n.kt)("h3",{id:"item-51-design-method-signatures-carefully\u4ed4\u7ec6\u8bbe\u8ba1\u65b9\u6cd5\u7b7e\u540d"},"Item 51: Design method signatures carefully\uff08\u4ed4\u7ec6\u8bbe\u8ba1\u65b9\u6cd5\u7b7e\u540d\uff09"),(0,n.kt)("p",null,"This item is a grab bag of API design hints that don\u2019t quite deserve items of their own. Taken together, they\u2019ll help make your API easier to learn and use and less prone to errors."),(0,n.kt)("p",null,"\u672c\u6761\u76ee\u662f\u4e00\u4e2a API \u8bbe\u8ba1\u63d0\u793a\u7684\u5927\u6742\u70e9\uff0c\u5b83\u4eec\u8fd8\u4e0d\u5b8c\u5168\u503c\u5f97\u62e5\u6709\u72ec\u7acb\u7684\u6761\u76ee\u3002\u603b\u4e4b\uff0c\u5b83\u4eec\u5c06\u5e2e\u52a9\u4f60\u4f7f API \u66f4\u5bb9\u6613\u5b66\u4e60\u548c\u4f7f\u7528\uff0c\u5e76\u4e14\u66f4\u4e0d\u5bb9\u6613\u51fa\u9519\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Choose method names carefully.")," Names should always obey the standard naming conventions (Item 68). Your primary goal should be to choose names that are understandable and consistent with other names in the same package. Your secondary goal should be to choose names consistent with the broader consensus, where it exists. Avoid long method names. When in doubt, look to the Java library APIs for guidance. While there are plenty of inconsistencies\u2014 inevitable, given the size and scope of these libraries\u2014there is also a fair amount of consensus."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u4ed4\u7ec6\u9009\u62e9\u65b9\u6cd5\u540d\u79f0\u3002")," \u540d\u79f0\u5e94\u59cb\u7ec8\u9075\u5b88\u6807\u51c6\u7684\u547d\u540d\u7ea6\u5b9a\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions"},"Item-68"),"\uff09\u3002\u4f60\u7684\u4e3b\u8981\u76ee\u6807\u5e94\u8be5\u662f\u9009\u62e9\u53ef\u7406\u89e3\u7684\u3001\u4e0e\u540c\u4e00\u5305\u4e2d\u7684\u5176\u4ed6\u540d\u79f0\u98ce\u683c\u4e00\u81f4\u7684\u540d\u79f0\u3002\u4f60\u7684\u7b2c\u4e8c\u4e2a\u76ee\u6807\u5e94\u8be5\u662f\u9009\u62e9\u88ab\u5e7f\u6cdb\u8ba4\u53ef\u7684\u540d\u5b57\u3002\u907f\u514d\u957f\u65b9\u6cd5\u540d\u3002\u5982\u679c\u6709\u7591\u95ee\uff0c\u53ef\u4ee5\u53c2\u8003 Java \u5e93 API\uff0c\u5c3d\u7ba1\u5176\u4e2d\u4e5f\u5b58\u5728\u5927\u91cf\u7684\u77db\u76fe\uff08\u8003\u8651\u5230\u8fd9\u4e9b\u5e93\u7684\u89c4\u6a21\u548c\u8303\u56f4\uff0c\u8fd9\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff09\u4f46\u4e5f\u8fbe\u6210\u4e86\u76f8\u5f53\u591a\u7684\u5171\u8bc6\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Don\u2019t go overboard in providing convenience methods.")," Every method should \u201cpull its weight.\u201d Too many methods make a class difficult to learn, use, document, test, and maintain. This is doubly true for interfaces, where too many methods complicate life for implementors as well as users. For each action supported by your class or interface, provide a fully functional method. Consider providing a \u201cshorthand\u201d only if it will be used often. ",(0,n.kt)("strong",{parentName:"p"},"When in doubt, leave it out.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u4e0d\u8981\u63d0\u4f9b\u8fc7\u4e8e\u4fbf\u5229\u7684\u65b9\u6cd5\u3002")," \u6bcf\u79cd\u65b9\u6cd5\u90fd\u5e94\u8be5\u5404\u53f8\u5176\u804c\u3002\u592a\u591a\u7684\u65b9\u6cd5\u4f7f\u5f97\u7c7b\u96be\u4ee5\u5b66\u4e60\u3001\u4f7f\u7528\u3001\u8bb0\u5f55\u3001\u6d4b\u8bd5\u548c\u7ef4\u62a4\u3002\u5bf9\u4e8e\u63a5\u53e3\u6765\u8bf4\u66f4\u662f\u5982\u6b64\uff0c\u5728\u63a5\u53e3\u4e2d\uff0c\u592a\u591a\u7684\u65b9\u6cd5\u4f7f\u5b9e\u73b0\u8005\u548c\u7528\u6237\u7684\u5de5\u4f5c\u53d8\u5f97\u590d\u6742\u3002\u5bf9\u4e8e\u7c7b\u6216\u63a5\u53e3\u652f\u6301\u7684\u6bcf\u4e2a\u64cd\u4f5c\uff0c\u8bf7\u63d0\u4f9b\u4e00\u4e2a\u529f\u80fd\u9f50\u5168\u7684\u65b9\u6cd5\u3002\u53ea\u6709\u5728\u7ecf\u5e38\u4f7f\u7528\u65f6\u624d\u8003\u8651\u63d0\u4f9b\u4fbf\u6377\u65b9\u5f0f\u3002",(0,n.kt)("strong",{parentName:"p"},"\u4f46\u5982\u679c\u6709\u7591\u95ee\uff0c\u5c31\u4e0d\u8981\u63d0\u4f9b\u3002")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Avoid long parameter lists.")," Aim for four parameters or fewer. Most programmers can\u2019t remember longer parameter lists. If many of your methods exceed this limit, your API won\u2019t be usable without constant reference to its documentation. Modern IDEs help, but you are still much better off with short parameter lists. ",(0,n.kt)("strong",{parentName:"p"},"Long sequences of identically typed parameters are especially harmful"),". Not only won\u2019t users be able to remember the order of the parameters, but when they transpose parameters accidentally, their programs will still compile and run. They just won\u2019t do what their authors intended."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u907f\u514d\u957f\u53c2\u6570\u5217\u8868\u3002")," \u8bbe\u5b9a\u56db\u4e2a\u6216\u66f4\u5c11\u7684\u53c2\u6570\u3002\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u8bb0\u4e0d\u4f4f\u66f4\u957f\u7684\u53c2\u6570\u5217\u8868\u3002\u5982\u679c\u4f60\u7684\u8bb8\u591a\u65b9\u6cd5\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u9650\u5236\uff0c\u800c\u7528\u6237\u6ca1\u6709\u5bf9\u6587\u6863\u7684\u4e0d\u65ad\u67e5\u770b\uff0c\u4f60\u7684 API \u5c06\u65e0\u6cd5\u4f7f\u7528\u3002\u73b0\u4ee3 IDE \u4f1a\u6709\u6240\u5e2e\u52a9\uff0c\u4f46\u662f\u4f7f\u7528\u7b80\u77ed\u7684\u53c2\u6570\u5217\u8868\u4ecd\u7136\u4f1a\u8ba9\u60c5\u51b5\u597d\u5f97\u591a\u3002",(0,n.kt)("strong",{parentName:"p"},"\u957f\u5e8f\u5217\u7684\u540c\u7c7b\u578b\u53c2\u6570\u5c24\u5176\u6709\u5bb3"),"\u3002\u7528\u6237\u4e0d\u4ec5\u4e0d\u80fd\u8bb0\u4f4f\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u800c\u4e14\u5f53\u4ed6\u4eec\u4e0d\u5c0f\u5fc3\u8f6c\u7f6e\u53c2\u6570\u65f6\uff0c\u4ed6\u4eec\u7684\u7a0b\u5e8f\u4ecd\u7136\u4f1a\u7f16\u8bd1\u548c\u8fd0\u884c\u3002\u5b83\u4eec\u53ea\u662f\u4e0d\u4f1a\u6309\u7167\u4f5c\u8005\u7684\u610f\u56fe\u53bb\u505a\u3002"),(0,n.kt)("p",null,"There are three techniques for shortening overly long parameter lists. One is to break the method up into multiple methods, each of which requires only a subset of the parameters. If done carelessly, this can lead to too many methods, but it can also help reduce the method count by increasing orthogonality. For example, consider the java.util.List interface. It does not provide methods to find the first or last index of an element in a sublist, both of which would require three parameters. Instead it provides the subList method, which takes two parameters and returns a view of a sublist. This method can be combined with the indexOf or lastIndexOf method, each of which has a single parameter, to yield the desired functionality. Moreover, the subList method can be combined with any method that operates on a List instance to perform arbitrary computations on sublists. The resulting API has a very high power-to-weight ratio."),(0,n.kt)("p",null,"\u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7f29\u77ed\u8fc7\u957f\u7684\u53c2\u6570\u5217\u8868\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u65b9\u6cd5\u5206\u89e3\u4e3a\u591a\u4e2a\u65b9\u6cd5\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u53ea\u9700\u8981\u53c2\u6570\u7684\u4e00\u4e2a\u5b50\u96c6\u3002\u5982\u679c\u64cd\u4f5c\u4e0d\u5f53\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u4ea7\u751f\u592a\u591a\u7684\u65b9\u6cd5\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u6b63\u4ea4\u6027\u6765\u5e2e\u52a9\u51cf\u5c11\u65b9\u6cd5\u6570\u91cf\u3002\u4f8b\u5982\uff0c\u8003\u8651 ",(0,n.kt)("inlineCode",{parentName:"p"},"java.util.List")," \u63a5\u53e3\u3002\u5b83\u4e0d\u63d0\u4f9b\u67e5\u627e\u5b50\u5217\u8868\u4e2d\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u6216\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u9700\u8981\u4e09\u4e2a\u53c2\u6570\u3002\u76f8\u53cd\uff0c\u5b83\u63d0\u4f9b\u4e86 subList \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u5b50\u5217\u8868\u7684\u89c6\u56fe\u3002\u6b64\u65b9\u6cd5\u53ef\u4ee5\u4e0e indexOf \u6216 lastIndexOf \u65b9\u6cd5\u7ec4\u5408\u4f7f\u7528\u4ee5\u8fbe\u5230\u6240\u9700\u7684\u529f\u80fd\uff0c\u5176\u4e2d\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u6709\u4e00\u4e2a\u53c2\u6570\u3002\u6b64\u5916\uff0csubList \u65b9\u6cd5\u53ef\u4ee5\u4e0e\u64cd\u4f5c List \u5b9e\u4f8b\u7684\u4efb\u4f55\u65b9\u6cd5\u7ec4\u5408\u4f7f\u7528\uff0c\u4ee5\u6267\u884c\u5b50\u5217\u8868\u4e0a\u7684\u4efb\u610f\u64cd\u4f5c\u3002\u8fd9\u6837\u7684 API \u5c31\u5177\u6709\u975e\u5e38\u9ad8\u7684 power-to-weight \u6bd4\u3002"),(0,n.kt)("p",null,"A second technique for shortening long parameter lists is to create helper classes to hold groups of parameters. Typically these helper classes are static member classes (Item 24). This technique is recommended if a frequently occurring sequence of parameters is seen to represent some distinct entity. For example, suppose you are writing a class representing a card game, and you find yourself constantly passing a sequence of two parameters representing a card\u2019s rank and its suit. Your API, as well as the internals of your class, would probably benefit if you added a helper class to represent a card and replaced every occurrence of the parameter sequence with a single parameter of the helper class."),(0,n.kt)("p",null,"\u7f29\u77ed\u957f\u53c2\u6570\u5217\u8868\u7684\u7b2c\u4e8c\u79cd\u6280\u672f\u662f\u521b\u5efa helper \u7c7b\u6765\u4fdd\u5b58\u53c2\u6570\u7ec4\u3002\u901a\u5e38\uff0c\u8fd9\u4e9b helper \u7c7b\u662f\u9759\u6001\u6210\u5458\u7c7b\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-7-Item-42-Prefer-lambdas-to-anonymous-classes"},"Item-42"),"\uff09\u3002\u5982\u679c\u7ecf\u5e38\u51fa\u73b0\u7684\u53c2\u6570\u5e8f\u5217\u8868\u793a\u4e00\u4e9b\u4e0d\u540c\u7684\u5b9e\u4f53\uff0c\u5219\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u8868\u793a\u7eb8\u724c\u6e38\u620f\u7684\u7c7b\uff0c\u4f60\u53d1\u73b0\u4f1a\u4e0d\u65ad\u5730\u4f20\u9012\u4e00\u4e2a\u5e8f\u5217\uff0c\u5176\u4e2d\u5305\u542b\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u8868\u793a\u7eb8\u724c\u7684\u7b49\u7ea7\u548c\u82b1\u8272\u3002\u5982\u679c\u4f60\u6dfb\u52a0\u4e00\u4e2a helper \u7c7b\u6765\u8868\u793a\u4e00\u5f20\u5361\u7247\uff0c\u5e76\u7528 helper \u7c7b\u7684\u4e00\u4e2a\u53c2\u6570\u66ff\u6362\u53c2\u6570\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u51fa\u73b0\u7684\u53c2\u6570\uff0c\u90a3\u4e48\u4f60\u7684 API \u4ee5\u53ca\u7c7b\u7684\u5185\u90e8\u7ed3\u6784\u90fd\u53ef\u80fd\u53d7\u76ca\u3002"),(0,n.kt)("p",null,"A third technique that combines aspects of the first two is to adapt the Builder pattern (Item 2) from object construction to method invocation. If you have a method with many parameters, especially if some of them are optional, it can be beneficial to define an object that represents all of the parameters and to allow the client to make multiple \u201csetter\u201d calls on this object, each of which sets a single parameter or a small, related group. Once the desired parameters have been set, the client invokes the object\u2019s \u201cexecute\u201d method, which does any final validity checks on the parameters and performs the actual computation."),(0,n.kt)("p",null,"\u7ed3\u5408\u524d\u4e24\u4e2a\u65b9\u9762\u8ba8\u8bba\u7684\u7b2c\u4e09\u79cd\u6280\u672f\u662f\uff0c\u4ece\u5bf9\u8c61\u6784\u5efa\u5230\u65b9\u6cd5\u8c03\u7528\u90fd\u91c7\u7528\u5efa\u9020\u8005\u6a21\u5f0f\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters"},"Item-2"),"\uff09\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u65b9\u6cd5\u5e26\u6709\u8bb8\u591a\u53c2\u6570\uff0c\u7279\u522b\u662f\u5176\u4e2d\u4e00\u4e9b\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u6700\u597d\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u6765\u8868\u793a\u6240\u6709\u53c2\u6570\uff0c\u5e76\u5141\u8bb8\u5ba2\u6237\u7aef\u591a\u6b21\u8c03\u7528\u300csetter\u300d\u6765\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u6bcf\u4e00\u6b21\u90fd\u8bbe\u7f6e\u4e00\u4e2a\u53c2\u6570\u6216\u8f83\u5c0f\u76f8\u5173\u7684\u7ec4\u3002\u4e00\u65e6\u8bbe\u7f6e\u4e86\u6240\u9700\u7684\u53c2\u6570\uff0c\u5ba2\u6237\u673a\u5c31\u8c03\u7528\u5bf9\u8c61\u7684\u300cexecute\u300d\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5bf9\u53c2\u6570\u8fdb\u884c\u6700\u7ec8\u6709\u6548\u6027\u68c0\u67e5\u5e76\u6267\u884c\u5b9e\u9645\u64cd\u4f5c\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"For parameter types, favor interfaces over classes")," (Item 64). If there is an appropriate interface to define a parameter, use it in favor of a class that implements the interface. For example, there is no reason to ever write a method that takes HashMap on input\u2014use Map instead. This lets you pass in a HashMap, a TreeMap, a ConcurrentHashMap, a submap of a TreeMap, or any Map implementation yet to be written. By using a class instead of an interface, you restrict your client to a particular implementation and force an unnecessary and potentially expensive copy operation if the input data happens to exist in some other form."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5bf9\u4e8e\u53c2\u6570\u7c7b\u578b\uff0c\u4f18\u5148\u9009\u62e9\u63a5\u53e3\u800c\u4e0d\u662f\u7c7b"),"\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-9-Item-64-Refer-to-objects-by-their-interfaces"},"Item-64"),"\uff09\u3002\u5982\u679c\u6709\u5408\u9002\u7684\u63a5\u53e3\u6765\u5b9a\u4e49\u53c2\u6570\uff0c\u90a3\u4e48\u4f7f\u7528\u5b83\u6765\u652f\u6301\u5b9e\u73b0\u8be5\u63a5\u53e3\u7684\u7c7b\u3002\u4f8b\u5982\uff0c\u6ca1\u6709\u7406\u7531\u7f16\u5199\u4e00\u4e2a\u8f93\u5165\u4f7f\u7528 HashMap \u7684\u65b9\u6cd5\uff0c\u800c\u5e94\u8be5\u4f7f\u7528 Map\u3002\u8fd9\u5141\u8bb8\u4f60\u4f20\u5165 HashMap\u3001TreeMap\u3001ConcurrentHashMap\u3001TreeMap \u7684\u5b50\u6620\u5c04\u6216\u4efb\u4f55\u5c1a\u672a\u7f16\u5199\u7684 Map \u5b9e\u73b0\u3002\u901a\u8fc7\u4f7f\u7528\u7c7b\u800c\u4e0d\u662f\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u5c06\u5ba2\u6237\u7aef\u9650\u5236\u5728\u7279\u5b9a\u7684\u5b9e\u73b0\u4e2d\uff0c\u5982\u679c\u8f93\u5165\u6570\u636e\u78b0\u5de7\u4ee5\u67d0\u79cd\u5176\u4ed6\u5f62\u5f0f\u5b58\u5728\uff0c\u5219\u4f1a\u5f3a\u5236\u6267\u884c\u4e0d\u5fc5\u8981\u7684\u3001\u53ef\u80fd\u4ee3\u4ef7\u5f88\u9ad8\u7684\u590d\u5236\u64cd\u4f5c\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Prefer two-element enum types to boolean parameters,")," unless the meaning of the boolean is clear from the method name. Enums make your code easier to read and to write. Also, they make it easy to add more options later. For example, you might have a Thermometer type with a static factory that takes this enum:"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u53cc\u5143\u7d20\u679a\u4e3e\u7c7b\u578b\u4f18\u4e8e boolean \u53c2\u6570\uff0c")," \u9664\u975e\u5e03\u5c14\u503c\u7684\u542b\u4e49\u5728\u65b9\u6cd5\u540d\u4e2d\u660e\u786e\u3002\u679a\u4e3e\u4f7f\u4ee3\u7801\u66f4\u5bb9\u6613\u8bfb\u548c\u5199\u3002\u6b64\u5916\uff0c\u5b83\u4eec\u4f7f\u4ee5\u540e\u6dfb\u52a0\u66f4\u591a\u9009\u9879\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u6709\u4e00\u4e2a Thermometer \u7c7b\u578b\u4e0e\u9759\u6001\u5de5\u5382\uff0c\u91c7\u7528\u679a\u4e3e\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"public enum TemperatureScale { FAHRENHEIT, CELSIUS }\n")),(0,n.kt)("p",null,"Not only does Thermometer.newInstance(TemperatureScale.CELSIUS) make a lot more sense than Thermometer.newInstance(true), but you can add KELVIN to TemperatureScale in a future release without having to add a new static factory to Thermometer. Also, you can refactor temperaturescale dependencies into methods on the enum constants (Item 34). For example, each scale constant could have a method that took a double value and converted it to Celsius."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Thermometer.newInstance(TemperatureScale.CELSIUS)")," \u4e0d\u4ec5\u6bd4 ",(0,n.kt)("inlineCode",{parentName:"p"},"Thermometer.newInstance(true)")," \u66f4\u6709\u610f\u4e49\uff0c\u800c\u4e14\u4f60\u53ef\u4ee5\u5728\u5c06\u6765\u7684\u7248\u672c\u4e2d\u5411 TemperatureScale \u6dfb\u52a0 KELVIN\uff0c\u800c\u4e0d\u5fc5\u5411 Thermometer \u6dfb\u52a0\u65b0\u7684\u9759\u6001\u5de5\u5382\u3002\u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5c06 TemperatureScale \u4f9d\u8d56\u9879\u91cd\u6784\u4e3a enum \u5e38\u91cf\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-6-Item-34-Use-enums-instead-of-int-constants"},"Item-34"),"\uff09\u4e0a\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u6bcf\u4e2a\u523b\u5ea6\u5355\u4f4d\u90fd\u6709\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5e26\u6709 double \u503c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u6444\u6c0f\u5ea6\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-8-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-8-Item-50-Make-defensive-copies-when-needed"},"Item 50: Make defensive copies when needed\uff08\u5728\u9700\u8981\u65f6\u5236\u4f5c\u9632\u5fa1\u6027\u526f\u672c\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-8-Item-52-Use-overloading-judiciously"},"Item 52: Use overloading judiciously\uff08\u660e\u667a\u5730\u4f7f\u7528\u91cd\u8f7d\uff09")))))}c.isMDXComponent=!0}}]);