"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4442],{3905:(e,t,o)=>{o.d(t,{Zo:()=>h,kt:()=>m});var a=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)o=i[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},h=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=c(o),m=n,p=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return o?a.createElement(p,r(r({ref:t},h),{},{components:o})):a.createElement(p,r({ref:t},h))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var c=2;c<i;c++)r[c]=o[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},4107:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=o(7462),n=(o(7294),o(3905));const i={},r=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-4/Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it",id:"Books/EffectiveJava3/Chapter-4/Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it",title:"Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it",description:"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it.md",sourceDirName:"Books/EffectiveJava3/Chapter-4",slug:"/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-4-Item-18-Favor-composition-over-inheritance",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-18-Favor-composition-over-inheritance"},next:{title:"Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes"}},l={},c=[{value:"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09",id:"chapter-4-classes-and-interfaces\u7c7b\u548c\u63a5\u53e3",level:2},{value:"Item 19: Design and document for inheritance or else prohibit it\uff08\u7ee7\u627f\u8981\u8bbe\u8ba1\u826f\u597d\u5e76\u4e14\u5177\u6709\u6587\u6863\uff0c\u5426\u5219\u7981\u6b62\u4f7f\u7528\uff09",id:"item-19-design-and-document-for-inheritance-or-else-prohibit-it\u7ee7\u627f\u8981\u8bbe\u8ba1\u826f\u597d\u5e76\u4e14\u5177\u6709\u6587\u6863\u5426\u5219\u7981\u6b62\u4f7f\u7528",level:3}],h={toc:c};function d(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-4-classes-and-interfaces\u7c7b\u548c\u63a5\u53e3"},"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09"),(0,n.kt)("h3",{id:"item-19-design-and-document-for-inheritance-or-else-prohibit-it\u7ee7\u627f\u8981\u8bbe\u8ba1\u826f\u597d\u5e76\u4e14\u5177\u6709\u6587\u6863\u5426\u5219\u7981\u6b62\u4f7f\u7528"},"Item 19: Design and document for inheritance or else prohibit it\uff08\u7ee7\u627f\u8981\u8bbe\u8ba1\u826f\u597d\u5e76\u4e14\u5177\u6709\u6587\u6863\uff0c\u5426\u5219\u7981\u6b62\u4f7f\u7528\uff09"),(0,n.kt)("p",null,"Item 18 alerted you to the dangers of subclassing a \u201cforeign\u201d class that was not designed and documented for inheritance. So what does it mean for a class to be designed and documented for inheritance?"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"./Chapter-4-Item-18-Favor-composition-over-inheritance"},"Item-18")," \u63d0\u9192\u4f60\u6ce8\u610f\uff1a\u5c06\u4e0d\u662f\u4e3a\u7ee7\u627f\u8bbe\u8ba1\u5e76\u4e14\u7f3a\u5c11\u6587\u6863\u7684\u300c\u5916\u90e8\u300d\u7c7b\u8fdb\u884c\u5b50\u7c7b\u5316\u7684\u5371\u9669\u3002\u90a3\u4e48\uff0c\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u5e76\u4e14\u5177\u5907\u6587\u6863\u7684\u7c7b\u610f\u5473\u7740\u4ec0\u4e48\u5462\uff1f"),(0,n.kt)("p",null,"First, the class must document precisely the effects of overriding any method.In other words, ",(0,n.kt)("strong",{parentName:"p"},"the class must document its self-use of overridable methods.")," For each public or protected method, the documentation must indicate which overridable methods the method invokes, in what sequence, and how the results of each invocation affect subsequent processing. (By overridable, we mean nonfinal and either public or protected.) More generally, a class must document any circumstances under which it might invoke an overridable method. For example, invocations might come from background threads or static initializers."),(0,n.kt)("p",null,"\u9996\u5148\uff0c\u7c7b\u5fc5\u987b\u7cbe\u786e\u5730\u5728\u6587\u6863\u4e2d\u8bb0\u5f55\u8986\u76d6\u4efb\u4f55\u65b9\u6cd5\u7684\u6548\u679c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7c7b\u5fc5\u987b\u5728\u6587\u6863\u4e2d\u8bb0\u5f55\u5b83\u5bf9\u53ef\u8986\u76d6\u65b9\u6cd5\u7684\u81ea\u7528\u6027\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u516c\u5171\u6216\u53d7\u4fdd\u62a4\u7684\u65b9\u6cd5\uff0c\u6587\u6863\u5fc5\u987b\u6307\u51fa\u65b9\u6cd5\u8c03\u7528\u7684\u53ef\u8986\u76d6\u65b9\u6cd5\u3001\u8c03\u7528\u987a\u5e8f\u4ee5\u53ca\u6bcf\u6b21\u8c03\u7528\u7684\u7ed3\u679c\u5982\u4f55\u5f71\u54cd\u540e\u7eed\u5904\u7406\u8fc7\u7a0b\u3002\uff08\u53ef\u8986\u76d6\u7684\u610f\u601d\u662f\u975e final \u7684\uff0c\u516c\u5171\u7684\u6216\u53d7\u4fdd\u62a4\u7684\u3002\uff09\u66f4\u4e00\u822c\u5730\u8bf4\uff0c\u7c7b\u5fc5\u987b\u8bb0\u5f55\u5b83\u53ef\u80fd\u8c03\u7528\u53ef\u8986\u76d6\u65b9\u6cd5\u7684\u6240\u6709\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u53ef\u80fd\u8c03\u7528\u6765\u81ea\u540e\u53f0\u7ebf\u7a0b\u6216\u9759\u6001\u521d\u59cb\u5316\u5668\u7684\u65b9\u6cd5\u3002"),(0,n.kt)("p",null,"A method that invokes overridable methods contains a description of these invocations at the end of its documentation comment. The description is in a special section of the specification, labeled \u201cImplementation Requirements,\u201d which is generated by the Javadoc tag @implSpec. This section describes the inner workings of the method. Here\u2019s an example, copied from the specification for java.util.AbstractCollection:"),(0,n.kt)("p",null,"\u8c03\u7528\u53ef\u8986\u76d6\u65b9\u6cd5\u7684\u65b9\u6cd5\u5728\u5176\u6587\u6863\u6ce8\u91ca\u672b\u5c3e\u5e94\u5305\u542b\u8fd9\u4e9b\u8c03\u7528\u7684\u63cf\u8ff0\u3002\u63cf\u8ff0\u5728\u89c4\u8303\u7684\u4e00\u4e2a\u7279\u6b8a\u90e8\u5206\u4e2d\uff0c\u6807\u8bb0\u4e3a\u300cImplementation Requirements\uff08\u5b9e\u73b0\u9700\u6c42\uff09\u300d\uff0c\u5b83\u7531 Javadoc \u6807\u7b7e ",(0,n.kt)("inlineCode",{parentName:"p"},"@implSpec")," \u751f\u6210\u3002\u672c\u8282\u63cf\u8ff0\u8be5\u65b9\u6cd5\u7684\u5185\u90e8\u5de5\u4f5c\u65b9\u5f0f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u590d\u5236\u81ea ",(0,n.kt)("inlineCode",{parentName:"p"},"java.util.AbstractCollection")," \u89c4\u8303\uff1a"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"public boolean remove(Object o)")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Removes a single instance of the specified element from this collection, if it is present (optional operation). More formally, removes an element e such that Objects.equals(o, e), if this collection contains one or more such elements. Returns true if this collection contained the specified element (or equivalently, if this collection changed as a result of the call).")),(0,n.kt)("p",null,"\u4ece\u6b64\u96c6\u5408\u4e2d\u79fb\u9664\u6307\u5b9a\u5143\u7d20\u7684\u5355\u4e2a\u5b9e\u4f8b\uff0c\u5982\u679c\u5b58\u5728\uff08\u53ef\u9009\u64cd\u4f5c\uff09\u3002\u66f4\u6b63\u5f0f\u5730\u8bf4\uff0c\u5982\u679c\u6b64\u96c6\u5408\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u5219\u5220\u9664\u5143\u7d20 e\uff0c\u4f7f\u5f97 ",(0,n.kt)("inlineCode",{parentName:"p"},"Objects.equals(o, e)"),"\uff0c\u5982\u679c\u6b64 collection \u5305\u542b\u6307\u5b9a\u7684\u5143\u7d20\uff0c\u5219\u8fd4\u56de true\uff08\u6216\u7b49\u6548\u5730\uff0c\u5982\u679c\u6b64\u96c6\u5408\u56e0\u8c03\u7528\u800c\u66f4\u6539\uff09\u3002"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Implementation Requirements: This implementation iterates over the collection looking for the specified element. If it finds the element, it removes the element from the collection using the iterator\u2019s remove method. Note that this implementation throws an UnsupportedOperationException if the iterator returned by this collection\u2019s iterator method does not implement the remove method and this collection contains the specified object.")),(0,n.kt)("p",null,"\u5b9e\u73b0\u9700\u6c42\uff1a\u8fd9\u4e2a\u5b9e\u73b0\u904d\u5386\u96c6\u5408\uff0c\u5bfb\u627e\u6307\u5b9a\u7684\u5143\u7d20\u3002\u5982\u679c\u627e\u5230\u5143\u7d20\uff0c\u5219\u4f7f\u7528\u8fed\u4ee3\u5668\u7684 remove \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\u3002\u6ce8\u610f\uff0c\u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u7684\u8fed\u4ee3\u5668\u65b9\u6cd5\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u6ca1\u6709\u5b9e\u73b0 remove \u65b9\u6cd5\uff0c\u5e76\u4e14\u8fd9\u4e2a\u96c6\u5408\u5305\u542b\u6307\u5b9a\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b9e\u73b0\u5c06\u629b\u51fa UnsupportedOperationException\u3002"),(0,n.kt)("p",null,"This documentation leaves no doubt that overriding the iterator method will affect the behavior of the remove method. It also describes exactly how the behavior of the Iterator returned by the iterator method will affect the behavior of the remove method. Contrast this to the situation in Item 18, where the programmer subclassing HashSet simply could not say whether overriding the add method would affect the behavior of the addAll method."),(0,n.kt)("p",null,"\u8fd9\u7bc7\u6587\u6863\u65e0\u7591\u8bf4\u660e\u4e86\u91cd\u5199\u8fed\u4ee3\u5668\u65b9\u6cd5\u5c06\u5f71\u54cd remove \u65b9\u6cd5\u7684\u884c\u4e3a\u3002\u5b83\u8fd8\u51c6\u786e\u5730\u63cf\u8ff0\u4e86\u8fed\u4ee3\u5668\u65b9\u6cd5\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7684\u884c\u4e3a\u5c06\u5982\u4f55\u5f71\u54cd remove \u65b9\u6cd5\u7684\u884c\u4e3a\u3002\u4e0e ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-4-Item-18-Favor-composition-over-inheritance"},"Item-18")," \u4e2d\u7684\u60c5\u51b5\u76f8\u53cd\uff0c\u5728 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-4-Item-18-Favor-composition-over-inheritance"},"Item-18")," \u4e2d\uff0c\u7a0b\u5e8f\u5458\u5b50\u7c7b\u5316 HashSet \u4e0d\u80fd\u7b80\u5355\u5730\u8bf4\u8986\u76d6 add \u65b9\u6cd5\u662f\u5426\u4f1a\u5f71\u54cd addAll \u65b9\u6cd5\u7684\u884c\u4e3a\u3002"),(0,n.kt)("p",null,"But doesn\u2019t this violate the dictum that good API documentation should describe what a given method does and not how it does it? Yes, it does! This is an unfortunate consequence of the fact that inheritance violates encapsulation. To document a class so that it can be safely subclassed, you must describe implementation details that should otherwise be left unspecified."),(0,n.kt)("p",null,"\u4f46\u662f\uff0c\u8fd9\u662f\u5426\u8fdd\u80cc\u4e86\u4e00\u4e2a\u683c\u8a00\uff1a\u597d\u7684 API \u6587\u6863\u5e94\u8be5\u63cf\u8ff0\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65b9\u6cd5\u505a\u4ec0\u4e48\uff0c\u800c\u4e0d\u662f\u5982\u4f55\u505a\uff1f\u662f\u7684\uff0c\u5b83\u786e\u5b9e\u8fdd\u80cc\u4e86\uff01\u8fd9\u662f\u7ee7\u627f\u8fdd\u53cd\u5c01\u88c5\u8fd9\u4e00\u4e8b\u5b9e\u7684\u4e0d\u5e78\u7ed3\u679c\u3002\u8981\u4e3a\u4e00\u4e2a\u7c7b\u7f16\u5236\u6587\u6863\uff0c\u4f7f\u5176\u80fd\u591f\u5b89\u5168\u5730\u5b50\u7c7b\u5316\uff0c\u4f60\u5fc5\u987b\u63cf\u8ff0\u5b9e\u73b0\u7ec6\u8282\uff0c\u5426\u5219\u8fd9\u4e9b\u7ec6\u8282\u5e94\u8be5\u662f\u672a\u6307\u5b9a\u7684\u3002"),(0,n.kt)("p",null,'The @implSpec tag was added in Java 8 and used heavily in Java 9. This tag should be enabled by default, but as of Java 9, the Javadoc utility still ignores it unless you pass the command line switch -tag "apiNote: a :API Note:".'),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"@implSpec")," \u6807\u8bb0\u5728 Java 8 \u4e2d\u6dfb\u52a0\uff0c\u5728 Java 9 \u4e2d\u5927\u91cf\u4f7f\u7528\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5e94\u8be5\u542f\u7528\u8fd9\u4e2a\u6807\u8bb0\uff0c\u4f46\u662f\u5728 Java 9 \u4e2d\uff0cJavadoc \u5b9e\u7528\u7a0b\u5e8f\u4ecd\u7136\u5ffd\u7565\u5b83\uff0c\u9664\u975e\u4f20\u9012\u547d\u4ee4\u884c\u5f00\u5173 ",(0,n.kt)("inlineCode",{parentName:"p"},'-tag "apiNote: a :API Note:"'),"\u3002"),(0,n.kt)("p",null,"Designing for inheritance involves more than just documenting patterns of self-use. To allow programmers to write efficient subclasses without undue pain, a class may have to provide hooks into its internal workings in the form of judiciously chosen protected methods or, in rare instances, protected fields. For example, consider the removeRange method from java.util.AbstractList:"),(0,n.kt)("p",null,"\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u4e0d\u4ec5\u4ec5\u662f\u8bb0\u5f55\u81ea\u7528\u6027\u6a21\u5f0f\u3002\u4e3a\u4e86\u5141\u8bb8\u7a0b\u5e8f\u5458\u7f16\u5199\u9ad8\u6548\u7684\u5b50\u7c7b\u800c\u4e0d\u53d7\u4e0d\u5fc5\u8981\u7684\u75db\u82e6\uff0c\u7c7b\u53ef\u80fd\u5fc5\u987b\u4ee5\u660e\u667a\u5730\u9009\u62e9\u53d7\u4fdd\u62a4\u7684\u65b9\u6cd5\u6216\uff08\u5728\u5f88\u5c11\u7684\u60c5\u51b5\u4e0b\uff09\u53d7\u4fdd\u62a4\u7684\u5b57\u6bb5\u7684\u5f62\u5f0f\u4e3a\u5176\u5185\u90e8\u5de5\u4f5c\u63d0\u4f9b\u6302\u94a9\u3002\u4f8b\u5982\uff0c\u8003\u8651\u6765\u81ea ",(0,n.kt)("inlineCode",{parentName:"p"},"java.util.AbstractList")," \u7684 removeRange \u65b9\u6cd5\uff1a"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"protected void removeRange(int fromIndex, int toIndex)")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex == fromIndex,this operation has no effect.)")),(0,n.kt)("p",null,"\u4ece\u8fd9\u4e2a\u5217\u8868\u4e2d\u5220\u9664\u6240\u6709\u7d22\u5f15\u4f4d\u4e8e fromIndex\uff08\u5305\u542b\u7d22\u5f15\uff09\u548c toIndex\uff08\u72ec\u5360\u7d22\u5f15\uff09\u4e4b\u95f4\u7684\u5143\u7d20\u3002\u5c06\u4efb\u4f55\u540e\u7eed\u5143\u7d20\u79fb\u5230\u5de6\u8fb9\uff08\u51cf\u5c11\u5176\u7d22\u5f15\uff09\u3002\u8fd9\u4e2a\u8c03\u7528\u4f7f\u7528 ",(0,n.kt)("inlineCode",{parentName:"p"},"(toIndex - fromIndex)")," \u5143\u7d20\u7f29\u77ed\u5217\u8868\u3002\uff08\u5982\u679c toIndex == fromIndex\uff0c\u6b64\u64cd\u4f5c\u65e0\u6548\u3002\uff09"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"This method is called by the clear operation on this list and its sublists.Overriding this method to take advantage of the internals of the list implementation can substantially improve the performance of the clear operation on this list and its sublists.")),(0,n.kt)("p",null,"\u6b64\u65b9\u6cd5\u7531\u6b64\u5217\u8868\u53ca\u5176\u5b50\u5217\u8868\u4e0a\u7684 clear \u64cd\u4f5c\u8c03\u7528\u3002\u91cd\u5199\u6b64\u65b9\u6cd5\u4ee5\u5229\u7528\u5217\u8868\u5b9e\u73b0\u7684\u5185\u90e8\u7279\u6027\uff0c\u53ef\u4ee5\u663e\u8457\u63d0\u9ad8\u5bf9\u8be5\u5217\u8868\u53ca\u5176\u5b50\u5217\u8868\u7684 clear \u64cd\u4f5c\u7684\u6027\u80fd\u3002"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Implementation Requirements: This implementation gets a list iterator positioned before fromIndex and repeatedly calls ListIterator.next followed by ListIterator.remove, until the entire range has been removed. Note: If ListIterator.remove requires linear time, this implementation requires quadratic time.")),(0,n.kt)("p",null,"\u5b9e\u73b0\u9700\u6c42\uff1a\u8be5\u5b9e\u73b0\u83b7\u53d6\u4f4d\u4e8e fromIndex \u4e4b\u524d\u7684\u5217\u8868\u8fed\u4ee3\u5668\uff0c\u5e76\u4f9d\u6b21\u91cd\u590d\u8c03\u7528 ",(0,n.kt)("inlineCode",{parentName:"p"},"ListIterator.next")," \u548c ",(0,n.kt)("inlineCode",{parentName:"p"},"ListIterator.remove"),"\uff0c\u76f4\u5230\u5220\u9664\u6574\u4e2a\u8303\u56f4\u7684\u5185\u5bb9\u3002\u6ce8\u610f\uff1a\u5982\u679c ",(0,n.kt)("inlineCode",{parentName:"p"},"ListIterator.remove")," \u9700\u8981\u7ebf\u6027\u65f6\u95f4\uff0c\u8fd9\u4e2a\u5b9e\u73b0\u9700\u8981\u5e73\u65b9\u7ea7\u7684\u65f6\u95f4\u3002"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Parameters:")),(0,n.kt)("p",null,"\u53c2\u6570"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"fromIndex index of first element to be removed.")),(0,n.kt)("p",null,"\u8981\u5220\u9664\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684 fromIndex \u7d22\u5f15\u3002"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"toIndex index after last element to be removed.")),(0,n.kt)("p",null,"\u8981\u5220\u9664\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u7d22\u5f15\u3002"),(0,n.kt)("p",null,"This method is of no interest to end users of a List implementation. It is provided solely to make it easy for subclasses to provide a fast clear method on sublists. In the absence of the removeRange method, subclasses would have to make do with quadratic performance when the clear method was invoked on sublists or rewrite the entire subList mechanism from scratch\u2014 not an easy task!"),(0,n.kt)("p",null,"\u6b64\u65b9\u6cd5\u5bf9\u5217\u8868\u5b9e\u73b0\u7684\u6700\u7ec8\u7528\u6237\u6ca1\u6709\u4efb\u4f55\u5174\u8da3\u3002\u5b83\u7684\u63d0\u4f9b\u53ea\u662f\u4e3a\u4e86\u8ba9\u5b50\u7c7b\u66f4\u5bb9\u6613\u5728\u5b50\u5217\u8868\u4e0a\u63d0\u4f9b\u5feb\u901f\u6e05\u6670\u7684\u65b9\u6cd5\u3002\u5728\u6ca1\u6709 removeRange \u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u5728\u5b50\u5217\u8868\u4e0a\u8c03\u7528 clear \u65b9\u6cd5\u6216\u4ece\u5934\u91cd\u5199\u6574\u4e2a\u5b50\u5217\u8868\u673a\u5236\u65f6\uff0c\u5b50\u7c7b\u5c06\u4e0d\u5f97\u4e0d\u5904\u7406\u4e8c\u6b21\u6027\u80fd\u2014\u2014\u8fd9\u4e0d\u662f\u4e00\u9879\u7b80\u5355\u7684\u4efb\u52a1!"),(0,n.kt)("p",null,"So how do you decide what protected members to expose when you design a class for inheritance? Unfortunately, there is no magic bullet. The best you can do is to think hard, take your best guess, and then test it by writing subclasses.You should expose as few protected members as possible because each one represents a commitment to an implementation detail. On the other hand, you must not expose too few because a missing protected member can render a class practically unusable for inheritance."),(0,n.kt)("p",null,"\u90a3\u4e48\uff0c\u5728\u4e3a\u7ee7\u627f\u8bbe\u8ba1\u7c7b\u65f6\uff0c\u5982\u4f55\u51b3\u5b9a\u8981\u516c\u5f00\u54ea\u4e9b\u53d7\u4fdd\u62a4\u7684\u6210\u5458\u5462\uff1f\u4e0d\u5e78\u7684\u662f\uff0c\u6ca1\u6709\u7075\u4e39\u5999\u836f\u3002\u4f60\u80fd\u505a\u7684\u6700\u597d\u7684\u4e8b\u60c5\u5c31\u662f\u8ba4\u771f\u601d\u8003\uff0c\u505a\u51fa\u6700\u597d\u7684\u731c\u6d4b\uff0c\u7136\u540e\u901a\u8fc7\u7f16\u5199\u5b50\u7c7b\u6765\u6d4b\u8bd5\u5b83\u3002\u4f60\u5e94\u8be5\u5c3d\u53ef\u80fd\u5c11\u5730\u516c\u5f00\u53d7\u4fdd\u62a4\u7684\u6210\u5458\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6210\u5458\u90fd\u8868\u793a\u5bf9\u5b9e\u73b0\u7ec6\u8282\u7684\u627f\u8bfa\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u4e0d\u80fd\u516c\u5f00\u592a\u591a\uff0c\u56e0\u4e3a\u7f3a\u5c11\u53d7\u4fdd\u62a4\u7684\u6210\u5458\u4f1a\u5bfc\u81f4\u7c7b\u5b9e\u9645\u4e0a\u65e0\u6cd5\u7528\u4e8e\u7ee7\u627f\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"The only way to test a class designed for inheritance is to write subclasses.")," If you omit a crucial protected member, trying to write a subclass will make the omission painfully obvious. Conversely, if several subclasses are written and none uses a protected member, you should probably make it private. Experience shows that three subclasses are usually sufficient to test an extendable class. One or more of these subclasses should be written by someone other than the superclass author."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u6d4b\u8bd5\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u7684\u7c7b\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u7f16\u5199\u5b50\u7c7b\u3002")," \u5982\u679c\u4f60\u5ffd\u7565\u4e86\u4e00\u4e2a\u5173\u952e\u7684\u53d7\u4fdd\u62a4\u6210\u5458\uff0c\u90a3\u4e48\u5c1d\u8bd5\u7f16\u5199\u5b50\u7c7b\u5c06\u4f7f\u9057\u6f0f\u53d8\u5f97\u975e\u5e38\u660e\u663e\u3002\u76f8\u53cd\uff0c\u5982\u679c\u7f16\u5199\u4e86\u51e0\u4e2a\u5b50\u7c7b\uff0c\u800c\u6ca1\u6709\u4e00\u4e2a\u5b50\u7c7b\u4f7f\u7528\u53d7\u4fdd\u62a4\u7684\u6210\u5458\uff0c\u5219\u5e94\u8be5\u5c06\u5176\u8bbe\u7f6e\u4e3a\u79c1\u6709\u3002\u7ecf\u9a8c\u8868\u660e\uff0c\u4e09\u4e2a\u5b50\u7c7b\u901a\u5e38\u8db3\u4ee5\u6d4b\u8bd5\u4e00\u4e2a\u53ef\u6269\u5c55\u7c7b\u3002\u8fd9\u4e9b\u5b50\u7c7b\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5e94\u8be5\u7531\u8d85\u7c7b\u4f5c\u8005\u4ee5\u5916\u7684\u5176\u4ed6\u4eba\u7f16\u5199\u3002"),(0,n.kt)("p",null,"When you design for inheritance a class that is likely to achieve wide use, realize that you are committing forever to the self-use patterns that you document and to the implementation decisions implicit in its protected methods and fields. These commitments can make it difficult or impossible to improve the performance or functionality of the class in a subsequent release. Therefore,",(0,n.kt)("strong",{parentName:"p"},"you must test your class by writing subclasses before you release it.")),(0,n.kt)("p",null,"\u5f53\u4f60\u4e3a\u7ee7\u627f\u8bbe\u8ba1\u4e00\u4e2a\u53ef\u80fd\u83b7\u5f97\u5e7f\u6cdb\u4f7f\u7528\u7684\u7c7b\u65f6\uff0c\u8bf7\u610f\u8bc6\u5230\u4f60\u5c06\u6c38\u8fdc\u81f4\u529b\u4e8e\u4f60\u6240\u8bb0\u5f55\u7684\u81ea\u4f7f\u7528\u6a21\u5f0f\uff0c\u4ee5\u53ca\u5728\u5176\u53d7\u4fdd\u62a4\u7684\u65b9\u6cd5\u548c\u5b57\u6bb5\u4e2d\u9690\u542b\u7684\u5b9e\u73b0\u51b3\u7b56\u3002\u8fd9\u4e9b\u627f\u8bfa\u4f1a\u4f7f\u5728\u540e\u7eed\u7248\u672c\u4e2d\u6539\u8fdb\u7c7b\u7684\u6027\u80fd\u6216\u529f\u80fd\u53d8\u5f97\u56f0\u96be\u6216\u4e0d\u53ef\u80fd\u3002\u56e0\u6b64\uff0c",(0,n.kt)("strong",{parentName:"p"},"\u4f60\u5fc5\u987b\u5728\u53d1\u5e03\u7c7b\u4e4b\u524d\u901a\u8fc7\u7f16\u5199\u5b50\u7c7b\u6765\u6d4b\u8bd5\u7c7b\u3002")),(0,n.kt)("p",null,"Also, note that the special documentation required for inheritance clutters up normal documentation, which is designed for programmers who create instances of your class and invoke methods on them. As of this writing, there is little in the way of tools to separate ordinary API documentation from information of interest only to programmers implementing subclasses."),(0,n.kt)("p",null,"\u53e6\u5916\uff0c\u8bf7\u6ce8\u610f\uff0c\u7ee7\u627f\u6240\u9700\u7684\u7279\u6b8a\u6587\u6863\u4f1a\u4f7f\u666e\u901a\u6587\u6863\u53d8\u5f97\u6df7\u4e71\uff0c\u8fd9\u79cd\u6587\u6863\u662f\u4e3a\u90a3\u4e9b\u521b\u5efa\u7c7b\u5b9e\u4f8b\u5e76\u5728\u5176\u4e0a\u8c03\u7528\u65b9\u6cd5\u7684\u7a0b\u5e8f\u5458\u8bbe\u8ba1\u7684\u3002\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0c\u5f88\u5c11\u6709\u5de5\u5177\u80fd\u591f\u5c06\u666e\u901a API \u6587\u6863\u4e0e\u53ea\u5bf9\u5b9e\u73b0\u5b50\u7c7b\u7684\u7a0b\u5e8f\u5458\u611f\u5174\u8da3\u7684\u4fe1\u606f\u5206\u79bb\u5f00\u6765\u3002"),(0,n.kt)("p",null,"There are a few more restrictions that a class must obey to allow inheritance.",(0,n.kt)("strong",{parentName:"p"},"Constructors must not invoke overridable methods,")," directly or indirectly. If you violate this rule, program failure will result. The superclass constructor runs before the subclass constructor, so the overriding method in the subclass will get invoked before the subclass constructor has run. If the overriding method depends on any initialization performed by the subclass constructor, the method will not behave as expected. To make this concrete, here\u2019s a class that violates this rule:"),(0,n.kt)("p",null,"\u4e3a\u4e86\u5141\u8bb8\u7ee7\u627f\uff0c\u7c7b\u5fc5\u987b\u9075\u5b88\u66f4\u591a\u7684\u9650\u5236\u3002",(0,n.kt)("strong",{parentName:"p"},"\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u8c03\u7528\u53ef\u91cd\u5199\u7684\u65b9\u6cd5\u3002")," \u5982\u679c\u4f60\u8fdd\u53cd\u4e86\u8fd9\u4e2a\u89c4\u5219\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u5931\u8d25\u3002\u8d85\u7c7b\u6784\u9020\u51fd\u6570\u5728\u5b50\u7c7b\u6784\u9020\u51fd\u6570\u4e4b\u524d\u8fd0\u884c\uff0c\u56e0\u6b64\u5728\u5b50\u7c7b\u6784\u9020\u51fd\u6570\u8fd0\u884c\u4e4b\u524d\u5c06\u8c03\u7528\u5b50\u7c7b\u4e2d\u7684\u8986\u76d6\u65b9\u6cd5\u3002\u5982\u679c\u91cd\u5199\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u5b50\u7c7b\u6784\u9020\u51fd\u6570\u6267\u884c\u7684\u4efb\u4f55\u521d\u59cb\u5316\uff0c\u5219\u8be5\u65b9\u6cd5\u7684\u884c\u4e3a\u5c06\u4e0d\u50cf\u9884\u671f\u7684\u90a3\u6837\u3002\u4e3a\u4e86\u4f7f\u5176\u5177\u4f53\u5316\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u8fdd\u53cd\u6b64\u89c4\u5219\u7684\u7c7b\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"public class Super {\n    // Broken - constructor invokes an overridable method\n    public Super() {\n        overrideMe();\n    }\n    public void overrideMe() {\n    }\n}\n")),(0,n.kt)("p",null,"Here\u2019s a subclass that overrides the overrideMe method, which is erroneously invoked by Super\u2019s sole constructor:"),(0,n.kt)("p",null,"\u4e0b\u9762\u662f\u8986\u76d6 overrideMe \u65b9\u6cd5\u7684\u5b50\u7c7b\uff0cSuper \u7684\u552f\u4e00\u6784\u9020\u51fd\u6570\u9519\u8bef\u5730\u8c03\u7528\u4e86 overrideMe \u65b9\u6cd5\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"public final class Sub extends Super {\n    // Blank final, set by constructor\n    private final Instant instant;\n    Sub() {\n        instant = Instant.now();\n    }\n    // Overriding method invoked by superclass constructor\n    @Override\n    public void overrideMe() {\n        System.out.println(instant);\n    }\n    public static void main(String[] args) {\n        Sub sub = new Sub();\n        sub.overrideMe();\n    }\n}\n")),(0,n.kt)("p",null,"You might expect this program to print out the instant twice, but it prints out null the first time because overrideMe is invoked by the Super constructor before the Sub constructor has a chance to initialize the instant field. Note that this program observes a final field in two different states! Note also that if overrideMe had invoked any method on instant, it would have thrown a NullPointerException when the Super constructor invoked overrideMe. The only reason this program doesn\u2019t throw a NullPointerException as it stands is that the println method tolerates null parameters."),(0,n.kt)("p",null,"\u4f60\u53ef\u80fd\u5e0c\u671b\u8fd9\u4e2a\u7a0b\u5e8f\u6253\u5370\u4e24\u6b21 instant\uff0c\u4f46\u662f\u5b83\u7b2c\u4e00\u6b21\u6253\u5370 null\uff0c\u56e0\u4e3a\u5728\u5b50\u6784\u9020\u51fd\u6570\u6709\u673a\u4f1a\u521d\u59cb\u5316 instant \u5b57\u6bb5\u4e4b\u524d\uff0c\u8d85\u7ea7\u6784\u9020\u51fd\u6570\u8c03\u7528\u4e86 overrideMe\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u89c2\u5bdf\u4e86\u4e24\u4e2a\u4e0d\u540c\u72b6\u6001\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bb5\uff01\u8fd8\u8981\u6ce8\u610f\uff0c\u5982\u679c overrideMe \u7acb\u5373\u8c03\u7528\u4e86\u4efb\u4f55\u65b9\u6cd5\uff0c\u90a3\u4e48\u5f53\u8d85\u7ea7\u6784\u9020\u51fd\u6570\u8c03\u7528 overrideMe \u65f6\uff0c\u5b83\u4f1a\u629b\u51fa\u4e00\u4e2a NullPointerException\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u4e0d\u629b\u51fa NullPointerException \u7684\u552f\u4e00\u539f\u56e0\u662f println \u65b9\u6cd5\u5141\u8bb8\u7a7a\u53c2\u6570\u3002"),(0,n.kt)("p",null,"Note that it is safe to invoke private methods, final methods, and static methods, none of which are overridable, from a constructor."),(0,n.kt)("p",null,"\u6ce8\u610f\uff0c\u4ece\u6784\u9020\u51fd\u6570\u8c03\u7528\u79c1\u6709\u65b9\u6cd5\u3001\u6700\u7ec8\u65b9\u6cd5\u548c\u9759\u6001\u65b9\u6cd5\u662f\u5b89\u5168\u7684\uff0c\u5b83\u4eec\u90fd\u662f\u4e0d\u53ef\u8986\u76d6\u7684\u3002"),(0,n.kt)("p",null,"The Cloneable and Serializable interfaces present special difficulties when designing for inheritance. It is generally not a good idea for a class designed for inheritance to implement either of these interfaces because they place a substantial burden on programmers who extend the class. There are,however, special actions that you can take to allow subclasses to implement these interfaces without mandating that they do so. These actions are described in Item 13 and Item 86."),(0,n.kt)("p",null,"\u53ef\u514b\u9686\u548c\u53ef\u5e8f\u5217\u5316\u7684\u63a5\u53e3\u5728\u8bbe\u8ba1\u7ee7\u627f\u65f6\u5b58\u5728\u7279\u6b8a\u7684\u56f0\u96be\u3002\u5bf9\u4e8e\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u7684\u7c7b\u6765\u8bf4\uff0c\u5b9e\u73b0\u8fd9\u4e24\u79cd\u63a5\u53e3\u90fd\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u56e0\u4e3a\u5b83\u4eec\u7ed9\u6269\u5c55\u7c7b\u7684\u7a0b\u5e8f\u5458\u5e26\u6765\u4e86\u6c89\u91cd\u7684\u8d1f\u62c5\u3002\u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u91c7\u53d6\u4e00\u4e9b\u7279\u6b8a\u7684\u64cd\u4f5c\u6765\u5141\u8bb8\u5b50\u7c7b\u5b9e\u73b0\u8fd9\u4e9b\u63a5\u53e3\uff0c\u800c\u65e0\u9700\u5f3a\u5236\u5b83\u4eec\u8fd9\u6837\u505a\u3002",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-13-Override-clone-judiciously"},"Item-13")," \u548c ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-86-Implement-Serializable-with-great-caution"},"Item-86")," \u53d9\u8ff0\u4e86\u8fd9\u4e9b\u884c\u52a8\u3002"),(0,n.kt)("p",null,"If you do decide to implement either Cloneable or Serializable in a class that is designed for inheritance, you should be aware that because the clone and readObject methods behave a lot like constructors, a similar restriction applies: neither clone nor readObject may invoke an overridable method, directly or indirectly. In the case of readObject, the overriding method will run before the subclass\u2019s state has been deserialized. In the case of clone, the overriding method will run before the subclass\u2019s clone method has a chance to fix the clone\u2019s state. In either case, a program failure is likely to follow. In the case of clone, the failure can damage the original object as well as the clone. This can happen, for example, if the overriding method assumes it is modifying the clone\u2019s copy of the object\u2019s deep structure, but the copy hasn\u2019t been made yet."),(0,n.kt)("p",null,"\u5982\u679c\u4f60\u786e\u5b9e\u51b3\u5b9a\u5728\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u7684\u7c7b\u4e2d\u5b9e\u73b0 Cloneable \u6216 Serializable\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u77e5\u9053\uff0c\u7531\u4e8e clone \u548c readObject \u65b9\u6cd5\u7684\u884c\u4e3a\u4e0e\u6784\u9020\u51fd\u6570\u975e\u5e38\u76f8\u4f3c\uff0c\u56e0\u6b64\u5b58\u5728\u7c7b\u4f3c\u7684\u9650\u5236\uff1aclone \u548c readObject \u90fd\u4e0d\u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u8c03\u7528\u53ef\u8986\u76d6\u7684\u65b9\u6cd5\u3002\u5bf9\u4e8e readObject\uff0c\u8986\u76d6\u65b9\u6cd5\u5c06\u5728\u5b50\u7c7b\u7684\u72b6\u6001\u53cd\u5e8f\u5217\u5316\u4e4b\u524d\u8fd0\u884c\u3002\u5728 clone \u7684\u60c5\u51b5\u4e0b\uff0c\u8986\u76d6\u65b9\u6cd5\u5c06\u5728\u5b50\u7c7b\u7684 clone \u65b9\u6cd5\u6709\u673a\u4f1a\u4fee\u590d clone \u7684\u72b6\u6001\u4e4b\u524d\u8fd0\u884c\u3002\u5728\u4efb\u4f55\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u5931\u8d25\u90fd\u53ef\u80fd\u968f\u4e4b\u800c\u6765\u3002\u5728 clone \u7684\u60c5\u51b5\u4e0b\uff0c\u5931\u8d25\u53ef\u4ee5\u7834\u574f\u539f\u59cb\u5bf9\u8c61\u548c clone\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8986\u76d6\u65b9\u6cd5\u5047\u8bbe\u5b83\u6b63\u5728\u4fee\u6539\u5bf9\u8c61\u7684\u6df1\u5c42\u7ed3\u6784\u7684 clone \u526f\u672c\uff0c\u4f46\u662f\u590d\u5236\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002"),(0,n.kt)("p",null,"Finally, if you decide to implement Serializable in a class designed for inheritance and the class has a readResolve or writeReplace method,you must make the readResolve or writeReplace method protected rather than private. If these methods are private, they will be silently ignored by subclasses. This is one more case where an implementation detail becomes part of a class\u2019s API to permit inheritance."),(0,n.kt)("p",null,"\u6700\u540e\uff0c\u5982\u679c\u4f60\u51b3\u5b9a\u5728\u4e00\u4e2a\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u7684\u7c7b\u4e2d\u5b9e\u73b0 Serializable\uff0c\u5e76\u4e14\u8fd9\u4e2a\u7c7b\u6709\u4e00\u4e2a readResolve \u6216 writeReplace \u65b9\u6cd5\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u4f7f readResolve \u6216 writeReplace \u65b9\u6cd5\u4e3a protected\uff0c\u800c\u4e0d\u662f private\u3002\u5982\u679c\u8fd9\u4e9b\u65b9\u6cd5\u662f private \u7684\uff0c\u5b83\u4eec\u5c06\u88ab\u5b50\u7c7b\u9759\u9759\u5730\u5ffd\u7565\u3002\u8fd9\u662f\u5b9e\u73b0\u7ec6\u8282\u6210\u4e3a\u7c7b API \u5141\u8bb8\u7ee7\u627f\u7684\u4e00\u90e8\u5206\u7684\u53c8\u4e00\u79cd\u60c5\u51b5\u3002"),(0,n.kt)("p",null,"By now it should be apparent that designing a class for inheritance requires great effort and places substantial limitations on the class. This is not a decision to be undertaken lightly. There are some situations where it is clearly the right thing to do, such as abstract classes, including skeletal implementations of interfaces (Item 20). There are other situations where it is clearly the wrong thing to do, such as immutable classes (Item 17)."),(0,n.kt)("p",null,"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u663e\u7136\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\u9700\u8981\u4ed8\u51fa\u5f88\u5927\u7684\u52aa\u529b\uff0c\u5e76\u4e14\u5bf9\u7c7b\u6709\u5f88\u5927\u7684\u9650\u5236\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u53ef\u4ee5\u8f7b\u6613\u4f5c\u51fa\u7684\u51b3\u5b9a\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u505a\u663e\u7136\u662f\u6b63\u786e\u7684\uff0c\u4f8b\u5982\u62bd\u8c61\u7c7b\uff0c\u5305\u62ec\u63a5\u53e3\u7684\u9aa8\u67b6\u5b9e\u73b0\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes"},"Item-20"),"\uff09\u3002\u8fd8\u6709\u4e00\u4e9b\u60c5\u51b5\u663e\u7136\u662f\u9519\u8bef\u7684\uff0c\u6bd4\u5982\u4e0d\u53ef\u53d8\u7c7b\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-4-Item-17-Minimize-mutability"},"Item-17"),"\uff09\u3002"),(0,n.kt)("p",null,"But what about ordinary concrete classes? Traditionally, they are neither final nor designed and documented for subclassing, but this state of affairs is dangerous. Each time a change is made in such a class, there is a chance that subclasses extending the class will break. This is not just a theoretical problem.It is not uncommon to receive subclassing-related bug reports after modifying the internals of a nonfinal concrete class that was not designed and documented for inheritance."),(0,n.kt)("p",null,"\u4f46\u662f\u666e\u901a\u7684\u5177\u4f53\u7c7b\u5462\uff1f\u4f20\u7edf\u4e0a\uff0c\u5b83\u4eec\u65e2\u4e0d\u662f\u6700\u7ec8\u7684\uff0c\u4e5f\u4e0d\u662f\u4e3a\u5b50\u7c7b\u5316\u800c\u8bbe\u8ba1\u548c\u8bb0\u5f55\u7684\uff0c\u4f46\u8fd9\u79cd\u72b6\u6001\u662f\u5371\u9669\u7684\u3002\u6bcf\u5f53\u5728\u8fd9\u6837\u7684\u7c7b\u4e2d\u8fdb\u884c\u66f4\u6539\u65f6\uff0c\u6269\u5c55\u7c7b\u7684\u5b50\u7c7b\u5c31\u6709\u53ef\u80fd\u4e2d\u65ad\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u7406\u8bba\u95ee\u9898\u3002\u5728\u4fee\u6539\u672a\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u548c\u8bb0\u5f55\u6587\u6863\u7684\u975e\u6700\u7ec8\u5177\u4f53\u7c7b\u7684\u5185\u90e8\u7ed3\u6784\u540e\uff0c\u63a5\u6536\u4e0e\u5b50\u7c7b\u76f8\u5173\u7684 bug \u62a5\u544a\u5e76\u4e0d\u7f55\u89c1\u3002"),(0,n.kt)("p",null,"The best solution to this problem is to prohibit subclassing in classes that are not designed and documented to be safely subclassed. There are two ways to prohibit subclassing. The easier of the two is to declare the class final. The alternative is to make all the constructors private or package-private and to add public static factories in place of the constructors. This alternative, which provides the flexibility to use subclasses internally, is discussed in Item 17. Either approach is acceptable."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u662f\u7981\u6b62\u5728\u6ca1\u6709\u8bbe\u8ba1\u548c\u6587\u6863\u8bb0\u5f55\u7684\u7c7b\u4e2d\u8fdb\u884c\u5b50\u7c7b\u5316\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7981\u6b62\u5b50\u7c7b\u5316\u3002\u4e24\u8005\u4e2d\u6bd4\u8f83\u5bb9\u6613\u7684\u662f\u58f0\u660e\u7c7b final\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u6240\u6709\u6784\u9020\u51fd\u6570\u53d8\u4e3a\u79c1\u6709\u6216\u5305\u79c1\u6709\uff0c\u5e76\u5728\u6784\u9020\u51fd\u6570\u7684\u4f4d\u7f6e\u6dfb\u52a0\u516c\u5171\u9759\u6001\u5de5\u5382\u3002\u8fd9\u4e2a\u66ff\u4ee3\u65b9\u6848\u63d0\u4f9b\u4e86\u5185\u90e8\u4f7f\u7528\u5b50\u7c7b\u7684\u7075\u6d3b\u6027\uff0c\u5728 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-4-Item-17-Minimize-mutability"},"Item-17")," \u4e2d\u8fdb\u884c\u4e86\u8ba8\u8bba\u3002\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u63a5\u53d7\u3002"),(0,n.kt)("p",null,"This advice may be somewhat controversial because many programmers have grown accustomed to subclassing ordinary concrete classes to add facilities such as instrumentation, notification, and synchronization or to limit functionality. If a class implements some interface that captures its essence, such as Set, List, or Map, then you should feel no compunction about prohibiting subclassing. The wrapper class pattern, described in Item 18, provides a superior alternative to inheritance for augmenting the functionality."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u5efa\u8bae\u53ef\u80fd\u6709\u70b9\u4e89\u8bae\uff0c\u56e0\u4e3a\u8bb8\u591a\u7a0b\u5e8f\u5458\u5df2\u7ecf\u4e60\u60ef\u4e86\u5b50\u7c7b\u5316\u666e\u901a\u7684\u5177\u4f53\u7c7b\uff0c\u4ee5\u6dfb\u52a0\u5de5\u5177\u3001\u901a\u77e5\u548c\u540c\u6b65\u7b49\u529f\u80fd\u6216\u9650\u5236\u529f\u80fd\u3002\u5982\u679c\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u6355\u83b7\u4e86\u5b83\u7684\u672c\u8d28\uff0c\u4f8b\u5982 Set\u3001List \u6216 Map\uff0c\u90a3\u4e48\u4f60\u4e0d\u5e94\u8be5\u5bf9\u7981\u6b62\u5b50\u7c7b\u5316\u611f\u5230\u5185\u759a\u3002\u5728 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-4-Item-18-Favor-composition-over-inheritance"},"Item-18")," \u4e2d\u63cf\u8ff0\u7684\u5305\u88c5\u5668\u7c7b\u6a21\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f18\u4e8e\u7ee7\u627f\u7684\u65b9\u6cd5\u6765\u589e\u5f3a\u529f\u80fd\u3002"),(0,n.kt)("p",null,"If a concrete class does not implement a standard interface, then you may inconvenience some programmers by prohibiting inheritance. If you feel that you must allow inheritance from such a class, one reasonable approach is to ensure that the class never invokes any of its overridable methods and to document this fact. In other words, eliminate the class\u2019s self-use of overridable\nmethods entirely. In doing so, you\u2019ll create a class that is reasonably safe to subclass. Overriding a method will never affect the behavior of any other method."),(0,n.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u5177\u4f53\u7684\u7c7b\u6ca1\u6709\u5b9e\u73b0\u4e00\u4e2a\u6807\u51c6\u7684\u63a5\u53e3\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7981\u6b62\u7ee7\u627f\u800c\u7ed9\u4e00\u4e9b\u7a0b\u5e8f\u5458\u5e26\u6765\u4e0d\u4fbf\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u5fc5\u987b\u5141\u8bb8\u7ee7\u627f\u6b64\u7c7b\u7c7b\uff0c\u90a3\u4e48\u4e00\u79cd\u5408\u7406\u7684\u65b9\u6cd5\u662f\u786e\u4fdd\u8be5\u7c7b\u6c38\u8fdc\u4e0d\u4f1a\u8c03\u7528\u5176\u4efb\u4f55\u53ef\u91cd\u5199\u7684\u65b9\u6cd5\uff0c\u5e76\u8bb0\u5f55\u8fd9\u4e00\u4e8b\u5b9e\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6d88\u9664\u7c7b\u7684\u81ea\u7528 overridable"),(0,n.kt)("p",null,"You can eliminate a class\u2019s self-use of overridable methods mechanically, without changing its behavior. Move the body of each overridable method to a private \u201chelper method\u201d and have each overridable method invoke its private helper method. Then replace each self-use of an overridable method with a direct invocation of the overridable method\u2019s private helper method."),(0,n.kt)("p",null,"\u4f60\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u7c7b\u884c\u4e3a\u7684\u60c5\u51b5\u4e0b\uff0c\u673a\u68b0\u5730\u6d88\u9664\u7c7b\u5bf9\u53ef\u91cd\u5199\u65b9\u6cd5\u7684\u81ea\u4f7f\u7528\u3002\u5c06\u6bcf\u4e2a\u53ef\u8986\u76d6\u65b9\u6cd5\u7684\u4e3b\u4f53\u79fb\u52a8\u5230\u4e00\u4e2a\u79c1\u6709\u7684\u300c\u52a9\u624b\u65b9\u6cd5\u300d\uff0c\u5e76\u8ba9\u6bcf\u4e2a\u53ef\u8986\u76d6\u65b9\u6cd5\u8c03\u7528\u5b83\u7684\u79c1\u6709\u52a9\u624b\u65b9\u6cd5\u3002\u7136\u540e\uff0c\u7528\u53ef\u8986\u76d6\u65b9\u6cd5\u7684\u79c1\u6709\u52a9\u624b\u65b9\u6cd5\u7684\u76f4\u63a5\u8c03\u7528\u66ff\u6362\u53ef\u8986\u76d6\u65b9\u6cd5\u7684\u6bcf\u4e2a\u81ea\u4f7f\u7528\u3002"),(0,n.kt)("p",null,"In summary, designing a class for inheritance is hard work. You must document all of its self-use patterns, and once you\u2019ve documented them, you must commit to them for the life of the class. If you fail to do this, subclasses may become dependent on implementation details of the superclass and may break if the implementation of the superclass changes. To allow others to write efficient subclasses, you may also have to export one or more protected methods.Unless you know there is a real need for subclasses, you are probably better off prohibiting inheritance by declaring your class final or ensuring that there are no accessible constructors."),(0,n.kt)("p",null,"\u603b\u4e4b\uff0c\u4e3a\u7ee7\u627f\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\u662f\u4e00\u9879\u8270\u82e6\u7684\u5de5\u4f5c\u3002\u4f60\u5fc5\u987b\u8bb0\u5f55\u6240\u6709\u7684\u81ea\u7528\u6a21\u5f0f\uff0c\u5e76\u4e14\u4e00\u65e6\u4f60\u8bb0\u5f55\u4e86\u5b83\u4eec\uff0c\u4f60\u5c31\u5fc5\u987b\u5728\u6574\u4e2a\u7c7b\u7684\u751f\u547d\u5468\u671f\u4e2d\u90fd\u9075\u5b88\u5b83\u4eec\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u5b50\u7c7b\u53ef\u80fd\u4f1a\u4f9d\u8d56\u4e8e\u8d85\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u5982\u679c\u8d85\u7c7b\u7684\u5b9e\u73b0\u53d1\u751f\u53d8\u5316\uff0c\u5b50\u7c7b\u53ef\u80fd\u4f1a\u5d29\u6e83\u3002\u4e3a\u4e86\u5141\u8bb8\u5176\u4ed6\u4eba\u7f16\u5199\u9ad8\u6548\u7684\u5b50\u7c7b\uff0c\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u5bfc\u51fa\u4e00\u4e2a\u6216\u591a\u4e2a\u53d7\u4fdd\u62a4\u7684\u65b9\u6cd5\u3002\u9664\u975e\u4f60\u77e5\u9053\u786e\u5b9e\u9700\u8981\u5b50\u7c7b\uff0c\u5426\u5219\u6700\u597d\u901a\u8fc7\u58f0\u660e\u7c7b\u4e3a final \u6216\u786e\u4fdd\u6ca1\u6709\u53ef\u8bbf\u95ee\u7684\u6784\u9020\u51fd\u6570\u7684\u65b9\u5f0f\u6765\u7981\u6b62\u7ee7\u627f\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-4-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-4-Item-18-Favor-composition-over-inheritance"},"Item 18: Favor composition over inheritance\uff08\u4f18\u5148\u9009\u62e9\u590d\u5408\u800c\u4e0d\u662f\u7ee7\u627f\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes"},"Item 20: Prefer interfaces to abstract classes\uff08\u63a5\u53e3\u4f18\u4e8e\u62bd\u8c61\u7c7b\uff09")))))}d.isMDXComponent=!0}}]);