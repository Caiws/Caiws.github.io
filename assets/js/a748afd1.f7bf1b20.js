"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4734],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),h=a,y=m["".concat(l,".").concat(h)]||m[h]||u[h]||i;return r?n.createElement(y,o(o({ref:t},c),{},{components:r})):n.createElement(y,o({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5420:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={},o=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-5/Chapter-5-Item-28-Prefer-lists-to-arrays",id:"Books/EffectiveJava3/Chapter-5/Chapter-5-Item-28-Prefer-lists-to-arrays",title:"Chapter-5-Item-28-Prefer-lists-to-arrays",description:"Chapter 5. Generics\uff08\u6cdb\u578b\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-28-Prefer-lists-to-arrays.md",sourceDirName:"Books/EffectiveJava3/Chapter-5",slug:"/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-28-Prefer-lists-to-arrays",permalink:"/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-28-Prefer-lists-to-arrays",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-28-Prefer-lists-to-arrays.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-5-Item-27-Eliminate-unchecked-warnings",permalink:"/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-27-Eliminate-unchecked-warnings"},next:{title:"Chapter-5-Item-29-Favor-generic-types",permalink:"/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-29-Favor-generic-types"}},l={},p=[{value:"Chapter 5. Generics\uff08\u6cdb\u578b\uff09",id:"chapter-5-generics\u6cdb\u578b",level:2},{value:"Item 28: Prefer lists to arrays\uff08list \u4f18\u4e8e\u6570\u7ec4\uff09",id:"item-28-prefer-lists-to-arrayslist-\u4f18\u4e8e\u6570\u7ec4",level:3}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"chapter-5-generics\u6cdb\u578b"},"Chapter 5. Generics\uff08\u6cdb\u578b\uff09"),(0,a.kt)("h3",{id:"item-28-prefer-lists-to-arrayslist-\u4f18\u4e8e\u6570\u7ec4"},"Item 28: Prefer lists to arrays\uff08list \u4f18\u4e8e\u6570\u7ec4\uff09"),(0,a.kt)("p",null,"Arrays differ from generic types in two important ways. First, arrays are covariant. This scary-sounding word means simply that if Sub is a subtype of Super, then the array type Sub[] is a subtype of the array type Super[]. Generics, by contrast, are invariant: for any two distinct types Type1 and Type2, ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Type1>")," is neither a subtype nor a supertype of ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Type2>")," ","[JLS, 4.10; Naftalin07, 2.5]",". You might think this means that generics are deficient, but arguably\uff08\u53ef\u80fd\uff0c\u5927\u6982\uff09 it is arrays that are deficient. This code fragment is legal:"),(0,a.kt)("p",null,"\u6570\u7ec4\u4e0e\u6cdb\u578b\u6709\u4e24\u4e2a\u91cd\u8981\u533a\u522b\u3002\u9996\u5148\uff0c\u6570\u7ec4\u662f\u534f\u53d8\u7684\u3002\u8fd9\u4e2a\u542c\u8d77\u6765\u5f88\u5413\u4eba\u7684\u5355\u8bcd\u7684\u610f\u601d\u5f88\u7b80\u5355\uff0c\u5982\u679c Sub \u662f Super \u7684\u4e00\u4e2a\u5b50\u7c7b\u578b\uff0c\u90a3\u4e48\u6570\u7ec4\u7c7b\u578b Sub[] \u5c31\u662f\u6570\u7ec4\u7c7b\u578b Super[] \u7684\u4e00\u4e2a\u5b50\u7c7b\u578b\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6cdb\u578b\u662f\u4e0d\u53d8\u7684\uff1a\u5bf9\u4e8e\u4efb\u4f55\u4e24\u4e2a\u4e0d\u540c\u7c7b\u578b Type1 \u548c Type2\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"List<Type1>")," \u65e2\u4e0d\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Type2>")," \u7684\u5b50\u7c7b\u578b\uff0c\u4e5f\u4e0d\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Type2>")," \u7684\u8d85\u7c7b\u578b ","[JLS, 4.10; Naftalin07, 2.5]","\u3002\u4f60\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u610f\u5473\u7740\u6cdb\u578b\u662f\u6709\u7f3a\u9677\u7684\uff0c\u4f46\u53ef\u4ee5\u8bf4\u6570\u7ec4\u624d\u662f\u6709\u7f3a\u9677\u7684\u3002\u8fd9\u6bb5\u4ee3\u7801\u662f\u5408\u6cd5\u7684\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// Fails at runtime!\nObject[] objectArray = new Long[1];\nobjectArray[0] = "I don\'t fit in"; // Throws ArrayStoreException\n')),(0,a.kt)("p",null,"but this one is not:"),(0,a.kt)("p",null,"\u4f46\u8fd9\u4e00\u6bb5\u4ee3\u7801\u5c31\u4e0d\u662f\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// Won't compile!\nList<Object> ol = new ArrayList<Long>(); // Incompatible types\nol.add(\"I don't fit in\");\n")),(0,a.kt)("p",null,"Either way you can\u2019t put a String into a Long container, but with an array you find out that you\u2019ve made a mistake at runtime; with a list, you find out at compile time. Of course, you\u2019d rather find out at compile time."),(0,a.kt)("p",null,"\u4e24\u79cd\u65b9\u6cd5\u90fd\u4e0d\u80fd\u5c06 String \u653e\u5165 Long \u5bb9\u5668\uff0c\u4f46\u4f7f\u7528\u6570\u7ec4\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\uff1b\u4f7f\u7528 list\uff0c\u4f60\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u53d1\u73b0\u95ee\u9898\u3002\u5f53\u7136\uff0c\u4f60\u66f4\u5e0c\u671b\u5728\u7f16\u8bd1\u65f6\u627e\u5230\u95ee\u9898\u3002"),(0,a.kt)("p",null,"The second major difference between arrays and generics is that arrays are reified ","[JLS, 4.7]",". This means that arrays know and enforce their element type at runtime. As noted earlier, if you try to put a String into an array of Long, you\u2019ll get an ArrayStoreException. Generics, by contrast, are implemented by erasure ","[JLS, 4.6]",". This means that they enforce their type constraints only at compile time and discard (or erase) their element type information at runtime. Erasure is what allowed generic types to interoperate freely with legacy code that didn\u2019t use generics (Item 26), ensuring a smooth transition to generics in Java 5."),(0,a.kt)("p",null,"\u6570\u7ec4\u548c\u6cdb\u578b\u4e4b\u95f4\u7684\u7b2c\u4e8c\u4e2a\u4e3b\u8981\u533a\u522b\uff1a\u6570\u7ec4\u662f\u5177\u4f53\u5316\u7684 ","[JLS, 4.7]","\u3002\u8fd9\u610f\u5473\u7740\u6570\u7ec4\u5728\u8fd0\u884c\u65f6\u77e5\u9053\u5e76\u5f3a\u5236\u6267\u884c\u4ed6\u4eec\u7684\u5143\u7d20\u7c7b\u578b\u3002\u5982\u524d\u6240\u8ff0\uff0c\u5982\u679c\u8bd5\u56fe\u5c06 String \u5143\u7d20\u653e\u5165\u4e00\u4e2a Long \u7c7b\u578b\u7684\u6570\u7ec4\u4e2d\uff0c\u5c31\u4f1a\u5f97\u5230 ArrayStoreException\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6cdb\u578b\u662f\u901a\u8fc7\u64e6\u9664\u6765\u5b9e\u73b0\u7684 ","[JLS, 4.6]","\u3002\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ea\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u7c7b\u578b\u7ea6\u675f\uff0c\u5e76\u5728\u8fd0\u884c\u65f6\u4e22\u5f03\uff08\u6216\u64e6\u9664\uff09\u5143\u7d20\u7c7b\u578b\u4fe1\u606f\u3002\u64e6\u9664\u5141\u8bb8\u6cdb\u578b\u4e0e\u4e0d\u4f7f\u7528\u6cdb\u578b\u7684\u9057\u7559\u4ee3\u7801\u81ea\u7531\u4ea4\u4e92\u64cd\u4f5c\uff08",(0,a.kt)("a",{parentName:"p",href:"./Chapter-5-Item-26-Do-not-use-raw-types"},"Item-26"),"\uff09\uff0c\u786e\u4fdd\u5728 Java 5 \u4e2d\u5e73\u7a33\u5730\u8fc7\u6e21\u3002"),(0,a.kt)("p",null,"Because of these fundamental differences, arrays and generics do not mix well. For example, it is illegal to create an array of a generic type, a parameterized type, or a type parameter. Therefore, none of these array creation expressions are legal: ",(0,a.kt)("inlineCode",{parentName:"p"},"new List<E>[]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"new List<String>[]"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"new E[]"),". All will result in generic array creation errors at compile time."),(0,a.kt)("p",null,"\u7531\u4e8e\u8fd9\u4e9b\u57fa\u672c\u5dee\u5f02\uff0c\u6570\u7ec4\u548c\u6cdb\u578b\u4e0d\u80fd\u5f88\u597d\u5730\u6df7\u5408\u3002\u4f8b\u5982\uff0c\u521b\u5efa\u6cdb\u578b\u3001\u53c2\u6570\u5316\u7c7b\u578b\u6216\u7c7b\u578b\u53c2\u6570\u7684\u6570\u7ec4\u662f\u975e\u6cd5\u7684\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u6570\u7ec4\u521b\u5efa\u8868\u8fbe\u5f0f\u90fd\u4e0d\u662f\u5408\u6cd5\u7684\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"new List<E>[]"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"new List<String>[]"),"\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"new E[]"),"\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4f1a\u5728\u7f16\u8bd1\u65f6\u5bfc\u81f4\u6cdb\u578b\u6570\u7ec4\u521b\u5efa\u9519\u8bef\u3002"),(0,a.kt)("p",null,"Why is it illegal to create a generic array? Because it isn\u2019t typesafe. If it were legal, casts generated by the compiler in an otherwise correct program could fail at runtime with a ClassCastException. This would violate the fundamental guarantee provided by the generic type system."),(0,a.kt)("p",null,"\u4e3a\u4ec0\u4e48\u521b\u5efa\u6cdb\u578b\u6570\u7ec4\u662f\u975e\u6cd5\u7684\uff1f\u56e0\u4e3a\u8fd9\u4e0d\u662f\u7c7b\u578b\u5b89\u5168\u7684\u3002\u5982\u679c\u5408\u6cd5\uff0c\u7f16\u8bd1\u5668\u5728\u5176\u4ed6\u6b63\u786e\u7684\u7a0b\u5e8f\u4e2d\u751f\u6210\u7684\u5f3a\u5236\u8f6c\u6362\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u5e76\u5bfc\u81f4 ClassCastException\u3002\u8fd9\u5c06\u8fdd\u53cd\u6cdb\u578b\u7cfb\u7edf\u63d0\u4f9b\u7684\u57fa\u672c\u4fdd\u8bc1\u3002"),(0,a.kt)("p",null,"To make this more concrete, consider the following code fragment:"),(0,a.kt)("p",null,"\u4e3a\u4e86\u66f4\u5177\u4f53\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// Why generic array creation is illegal - won't compile!\nList<String>[] stringLists = new List<String>[1]; // (1)\nList<Integer> intList = List.of(42); // (2)\nObject[] objects = stringLists; // (3)\nobjects[0] = intList; // (4)\nString s = stringLists[0].get(0); // (5)\n")),(0,a.kt)("p",null,"Let\u2019s pretend that line 1, which creates a generic array, is legal. Line 2 creates and initializes a ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Integer>")," containing a single element. Line 3 stores the ",(0,a.kt)("inlineCode",{parentName:"p"},"List<String>")," array into an Object array variable, which is legal because arrays are covariant. Line 4 stores the ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Integer>")," into the sole element of the Object array, which succeeds because generics are implemented by erasure: the runtime type of a ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Integer>")," instance is simply List, and the runtime type of a ",(0,a.kt)("inlineCode",{parentName:"p"},"List<String>"),"[] instance is List[], so this assignment doesn\u2019t generate an ArrayStoreException. Now we\u2019re in trouble. We\u2019ve stored a ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Integer>")," instance into an array that is declared to hold only ",(0,a.kt)("inlineCode",{parentName:"p"},"List<String>")," instances. In line 5, we retrieve the sole element from the sole list in this array. The compiler automatically casts the retrieved element to String, but it\u2019s an Integer, so we get a ClassCastException at runtime. In order to prevent this from happening, line 1 (which creates a generic array) must generate a compile-time error."),(0,a.kt)("p",null,"\u5047\u8bbe\u521b\u5efa\u6cdb\u578b\u6570\u7ec4\u7684\u7b2c 1 \u884c\u662f\u5408\u6cd5\u7684\u3002\u7b2c 2 \u884c\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u5305\u542b\u5355\u4e2a\u5143\u7d20\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Integer>"),"\u3002\u7b2c 3 \u884c\u5c06 ",(0,a.kt)("inlineCode",{parentName:"p"},"List<String>")," \u6570\u7ec4\u5b58\u50a8\u5230 Object \u7c7b\u578b\u7684\u6570\u7ec4\u53d8\u91cf\u4e2d\uff0c\u8fd9\u662f\u5408\u6cd5\u7684\uff0c\u56e0\u4e3a\u6570\u7ec4\u662f\u534f\u53d8\u7684\u3002\u7b2c 4 \u884c\u5c06 ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Integer>")," \u5b58\u50a8\u5230 Object \u7c7b\u578b\u7684\u6570\u7ec4\u7684\u552f\u4e00\u5143\u7d20\u4e2d\uff0c\u8fd9\u662f\u6210\u529f\u7684\uff0c\u56e0\u4e3a\u6cdb\u578b\u662f\u7531\u64e6\u9664\u5b9e\u73b0\u7684\uff1a",(0,a.kt)("inlineCode",{parentName:"p"},"List<Integer>")," \u5b9e\u4f8b\u7684\u8fd0\u884c\u65f6\u7c7b\u578b\u662f List\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"List<String>"),"[] \u5b9e\u4f8b\u7684\u8fd0\u884c\u65f6\u7c7b\u578b\u662f List[]\uff0c\u56e0\u6b64\u8fd9\u4e2a\u8d4b\u503c\u4e0d\u4f1a\u751f\u6210 ArrayStoreException\u3002\u73b0\u5728\u6211\u4eec\u6709\u9ebb\u70e6\u4e86\u3002\u6211\u4eec\u5c06\u4e00\u4e2a ",(0,a.kt)("inlineCode",{parentName:"p"},"List<Integer>")," \u5b9e\u4f8b\u5b58\u50a8\u5230\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u8be5\u6570\u7ec4\u58f0\u660e\u53ea\u4fdd\u5b58 ",(0,a.kt)("inlineCode",{parentName:"p"},"List<String>")," \u5b9e\u4f8b\u3002\u5728\u7b2c 5 \u884c\uff0c\u6211\u4eec\u4ece\u8fd9\u4e2a\u6570\u7ec4\u7684\u552f\u4e00\u5217\u8868\u4e2d\u68c0\u7d22\u552f\u4e00\u5143\u7d20\u3002\u7f16\u8bd1\u5668\u81ea\u52a8\u5c06\u68c0\u7d22\u5230\u7684\u5143\u7d20\u8f6c\u6362\u4e3a String \u7c7b\u578b\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a Integer \u7c7b\u578b\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u5f97\u5230\u4e00\u4e2a ClassCastException\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u7b2c 1 \u884c\uff08\u521b\u5efa\u6cdb\u578b\u6570\u7ec4\uff09\u5fc5\u987b\u751f\u6210\u7f16\u8bd1\u65f6\u9519\u8bef\u3002"),(0,a.kt)("p",null,"Types such as E, ",(0,a.kt)("inlineCode",{parentName:"p"},"List<E>"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"List<String>")," are technically known as nonreifiable types ","[JLS, 4.7]",". Intuitively speaking, a non-reifiable type is one whose runtime representation contains less information than its compile-time representation. Because of erasure, the only parameterized types that are reifiable are unbounded wildcard types such as ",(0,a.kt)("inlineCode",{parentName:"p"},"List<?>")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Map<?,?>")," (Item 26). It is legal, though rarely useful, to create arrays of unbounded wildcard types."),(0,a.kt)("p",null,"E\u3001",(0,a.kt)("inlineCode",{parentName:"p"},"List<E>")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"List<string>")," \u7b49\u7c7b\u578b\u5728\u6280\u672f\u4e0a\u79f0\u4e3a\u4e0d\u53ef\u5177\u4f53\u5316\u7c7b\u578b ","[JLS, 4.7]","\u3002\u76f4\u89c2\u5730\u8bf4\uff0c\u975e\u5177\u4f53\u5316\u7c7b\u578b\u7684\u8fd0\u884c\u65f6\u8868\u793a\u5305\u542b\u7684\u4fe1\u606f\u5c11\u4e8e\u5176\u7f16\u8bd1\u65f6\u8868\u793a\u3002\u7531\u4e8e\u64e6\u9664\uff0c\u552f\u4e00\u53ef\u5177\u4f53\u5316\u7684\u53c2\u6570\u5316\u7c7b\u578b\u662f\u65e0\u9650\u5236\u901a\u914d\u7b26\u7c7b\u578b\uff0c\u5982 ",(0,a.kt)("inlineCode",{parentName:"p"},"List<?>")," \u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"Map<?,?>"),"\uff08",(0,a.kt)("a",{parentName:"p",href:"./Chapter-5-Item-26-Do-not-use-raw-types"},"Item-26"),"\uff09\u3002\u521b\u5efa\u65e0\u8fb9\u754c\u901a\u914d\u7b26\u7c7b\u578b\u6570\u7ec4\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u4e0d\u600e\u4e48\u6709\u7528\u3002"),(0,a.kt)("p",null,"The prohibition on generic array creation can be annoying. It means, for example, that it\u2019s not generally possible for a generic collection to return an array of its element type (but see Item 33 for a partial solution). It also means that you get confusing warnings when using varargs methods (Item 53) in combination with generic types. This is because every time you invoke a varargs method, an array is created to hold the varargs parameters. If the element type of this array is not reifiable, you get a warning. The SafeVarargs annotation can be used to address this issue (Item 32)."),(0,a.kt)("p",null,"\u7981\u6b62\u521b\u5efa\u6cdb\u578b\u6570\u7ec4\u53ef\u80fd\u5f88\u70e6\u4eba\u3002\u4f8b\u5982\uff0c\u8fd9\u610f\u5473\u7740\u6cdb\u578b\u96c6\u5408\u901a\u5e38\u4e0d\u53ef\u80fd\u8fd4\u56de\u5176\u5143\u7d20\u7c7b\u578b\u7684\u6570\u7ec4\uff08\u90e8\u5206\u89e3\u51b3\u65b9\u6848\u8bf7\u53c2\u89c1 ",(0,a.kt)("a",{parentName:"p",href:"./Chapter-5-Item-33-Consider-typesafe-heterogeneous-containers"},"Item-33"),"\uff09\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u5728\u4f7f\u7528 varargs \u65b9\u6cd5\uff08",(0,a.kt)("a",{parentName:"p",href:"./Chapter-8-Item-53-Use-varargs-judiciously"},"Item-53"),"\uff09\u4e0e\u6cdb\u578b\u7ec4\u5408\u65f6\uff0c\u4f60\u4f1a\u5f97\u5230\u4ee4\u4eba\u56f0\u60d1\u7684\u8b66\u544a\u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u6b21\u8c03\u7528 varargs \u65b9\u6cd5\u65f6\uff0c\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\u6765\u4fdd\u5b58 varargs \u53c2\u6570\u3002\u5982\u679c\u8be5\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b\u4e0d\u53ef\u5177\u4f53\u5316\uff0c\u5219\u4f1a\u5f97\u5230\u8b66\u544a\u3002SafeVarargs \u6ce8\u89e3\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff08",(0,a.kt)("a",{parentName:"p",href:"./Chapter-5-Item-32-Combine-generics-and-varargs-judiciously"},"Item-32"),"\uff09\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1avarargs \u65b9\u6cd5\uff0c\u6307\u5e26\u6709\u53ef\u53d8\u53c2\u6570\u7684\u65b9\u6cd5\u3002")),(0,a.kt)("p",null,"When you get a generic array creation error or an unchecked cast warning on a cast to an array type, the best solution is often to use the collection type ",(0,a.kt)("inlineCode",{parentName:"p"},"List<E>")," in preference to the array type E[]. You might sacrifice some conciseness or performance, but in exchange you get better type safety and interoperability."),(0,a.kt)("p",null,"\u5f53\u4f60\u5728\u8f6c\u6362\u4e3a\u6570\u7ec4\u7c7b\u578b\u65f6\u9047\u5230\u6cdb\u578b\u6570\u7ec4\u521b\u5efa\u9519\u8bef\u6216 unchecked \u5f3a\u5236\u8f6c\u6362\u8b66\u544a\u65f6\uff0c\u901a\u5e38\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u96c6\u5408\u7c7b\u578b ",(0,a.kt)("inlineCode",{parentName:"p"},"List<E>"),"\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u7c7b\u578b E[]\u3002\u4f60\u53ef\u80fd\u4f1a\u727a\u7272\u4e00\u4e9b\u7b80\u6d01\u6027\u6216\u6027\u80fd\uff0c\u4f46\u4f5c\u4e3a\u4ea4\u6362\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u7c7b\u578b\u5b89\u5168\u6027\u548c\u4e92\u64cd\u4f5c\u6027\u3002"),(0,a.kt)("p",null,"For example, suppose you want to write a Chooser class with a constructor that takes a collection, and a single method that returns an element of the collection chosen at random. Depending on what collection you pass to the constructor, you could use a chooser as a game die, a magic 8-ball, or a data source for a Monte Carlo simulation. Here\u2019s a simplistic implementation without generics:"),(0,a.kt)("p",null,"\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5e0c\u671b\u7f16\u5199\u4e00\u4e2a Chooser \u7c7b\uff0c\u8be5\u7c7b\u7684\u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u96c6\u5408\uff0c\u800c\u5355\u4e2a\u65b9\u6cd5\u8fd4\u56de\u968f\u673a\u9009\u62e9\u7684\u96c6\u5408\u5143\u7d20\u3002\u6839\u636e\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u5c06\u9009\u62e9\u5668\u7528\u4f5c\u6e38\u620f\u9ab0\u5b50\u3001\u9b54\u672f 8 \u7403\u6216\u8499\u7279\u5361\u6d1b\u6a21\u62df\u7684\u6570\u636e\u6e90\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6ca1\u6709\u6cdb\u578b\u7684\u7b80\u5355\u5b9e\u73b0\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// Chooser - a class badly in need of generics!\npublic class Chooser {\n  private final Object[] choiceArray;\n\n  public Chooser(Collection choices) {\n    choiceArray = choices.toArray();\n}\n\n  public Object choose() {\n    Random rnd = ThreadLocalRandom.current();\n    return choiceArray[rnd.nextInt(choiceArray.length)];\n  }\n}\n")),(0,a.kt)("p",null,"To use this class, you have to cast the choose method\u2019s return value from Object to the desired type every time you use invoke the method, and the cast will fail at runtime if you get the type wrong. Taking the advice of Item 29 to heart, we attempt to modify Chooser to make it generic. Changes are shown in boldface:"),(0,a.kt)("p",null,"\u8981\u4f7f\u7528\u8fd9\u4e2a\u7c7b\uff0c\u6bcf\u6b21\u4f7f\u7528\u65b9\u6cd5\u8c03\u7528\u65f6\uff0c\u5fc5\u987b\u5c06 choose \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4ece\u5bf9\u8c61\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u7c7b\u578b\uff0c\u5982\u679c\u7c7b\u578b\u9519\u8bef\uff0c\u8f6c\u6362\u5c06\u5728\u8fd0\u884c\u65f6\u5931\u8d25\u3002\u6211\u4eec\u8ba4\u771f\u8003\u8651\u4e86 ",(0,a.kt)("a",{parentName:"p",href:"./Chapter-5-Item-29-Favor-generic-types"},"Item-29")," \u7684\u5efa\u8bae\uff0c\u8bd5\u56fe\u5bf9 Chooser \u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5176\u5177\u6709\u901a\u7528\u6027\u3002\u53d8\u5316\u4ee5\u7c97\u4f53\u663e\u793a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// A first cut at making Chooser generic - won't compile\npublic class Chooser<T> {\n  private final T[] choiceArray;\n\n  public Chooser(Collection<T> choices) {\n    choiceArray = choices.toArray();\n  }\n\n  // choose method unchanged\n}\n")),(0,a.kt)("p",null,"If you try to compile this class, you\u2019ll get this error message:"),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u5c1d\u8bd5\u7f16\u8bd1\u8fd9\u4e2a\u7c7b\uff0c\u4f60\u5c06\u5f97\u5230\u8fd9\u6837\u7684\u9519\u8bef\u6d88\u606f\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Chooser.java:9: error: incompatible types: Object[] cannot be converted to T[]\nchoiceArray = choices.toArray();\n^ where T is a type-variable:\nT extends Object declared in class Chooser\n")),(0,a.kt)("p",null,"No big deal, you say, I\u2019ll cast the Object array to a T array:"),(0,a.kt)("p",null,"\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\uff0c\u4f60\u4f1a\u8bf4\uff0c\u6211\u628a\u5bf9\u8c61\u6570\u7ec4\u8f6c\u6362\u6210 T \u6570\u7ec4\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"choiceArray = (T[]) choices.toArray();\n")),(0,a.kt)("p",null,"This gets rid of the error, but instead you get a warning:"),(0,a.kt)("p",null,"\u8fd9\u6837\u5c31\u6d88\u9664\u4e86\u9519\u8bef\uff0c\u4f46\u4f60\u5f97\u5230\u4e00\u4e2a\u8b66\u544a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Chooser.java:9: warning: [unchecked] unchecked cast choiceArray = (T[]) choices.toArray();\n^ required: T[], found: Object[]\nwhere T is a type-variable:\nT extends Object declared in class Chooser\n")),(0,a.kt)("p",null,"The compiler is telling you that it can\u2019t vouch for the safety of the cast at runtime because the program won\u2019t know what type T represents\u2014remember, element type information is erased from generics at runtime. Will the program work? Yes, but the compiler can\u2019t prove it. You could prove it to yourself, put the proof in a comment and suppress the warning with an annotation, but you\u2019re better off eliminating the cause of warning (Item 27)."),(0,a.kt)("p",null,"\u7f16\u8bd1\u5668\u544a\u8bc9\u4f60\uff0c\u5b83\u4e0d\u80fd\u4fdd\u8bc1\u5728\u8fd0\u884c\u65f6\u8f6c\u6362\u7684\u5b89\u5168\u6027\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u4e0d\u77e5\u9053\u7c7b\u578b T \u4ee3\u8868\u4ec0\u4e48\u3002\u8bb0\u4f4f\uff0c\u5143\u7d20\u7c7b\u578b\u4fe1\u606f\u5728\u8fd0\u884c\u65f6\u4ece\u6cdb\u578b\u4e2d\u5220\u9664\u3002\u8fd9\u4e2a\u8ba1\u5212\u4f1a\u594f\u6548\u5417\uff1f\u662f\u7684\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4e0d\u80fd\u8bc1\u660e\u5b83\u3002\u4f60\u53ef\u4ee5\u5411\u81ea\u5df1\u8bc1\u660e\u8fd9\u4e00\u70b9\uff0c\u4f46\u662f\u4f60\u6700\u597d\u5c06\u8bc1\u636e\u653e\u5728\u6ce8\u91ca\u4e2d\uff0c\u6307\u51fa\u6d88\u9664\u8b66\u544a\u7684\u539f\u56e0\uff08",(0,a.kt)("a",{parentName:"p",href:"./Chapter-5-Item-27-Eliminate-unchecked-warnings"},"Item-27"),"\uff09\uff0c\u5e76\u4f7f\u7528\u6ce8\u89e3\u9690\u85cf\u8b66\u544a\u3002"),(0,a.kt)("p",null,"To eliminate the unchecked cast warning, use a list instead of an array. Here is a version of the Chooser class that compiles without error or warning:"),(0,a.kt)("p",null,"\u82e5\u8981\u6d88\u9664 unchecked \u5f3a\u5236\u8f6c\u6362\u8b66\u544a\uff0c\u8bf7\u4f7f\u7528 list \u800c\u4e0d\u662f\u6570\u7ec4\u3002\u4e0b\u9762\u662f\u7f16\u8bd1\u65f6\u6ca1\u6709\u9519\u8bef\u6216\u8b66\u544a\u7684 Chooser \u7c7b\u7684\u4e00\u4e2a\u7248\u672c\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// List-based Chooser - typesafe\npublic class Chooser<T> {\n    private final List<T> choiceList;\n\n    public Chooser(Collection<T> choices) {\n        choiceList = new ArrayList<>(choices);\n    }\n\n    public T choose() {\n        Random rnd = ThreadLocalRandom.current();\n        return choiceList.get(rnd.nextInt(choiceList.size()));\n    }\n}\n")),(0,a.kt)("p",null,"This version is a tad more verbose, and perhaps a tad slower, but it\u2019s worth it for the peace of mind that you won\u2019t get a ClassCastException at runtime."),(0,a.kt)("p",null,"\u8fd9\u4e2a\u7248\u672c\u7a0d\u5fae\u6709\u70b9\u5197\u957f\uff0c\u53ef\u80fd\u7a0d\u5fae\u6162\u4e00\u4e9b\uff0c\u4f46\u662f\u4e3a\u4e86\u8ba9\u4f60\u5b89\u5fc3\uff0c\u5728\u8fd0\u884c\u65f6\u4e0d\u4f1a\u5f97\u5230 ClassCastException \u662f\u503c\u5f97\u7684\u3002"),(0,a.kt)("p",null,"In summary, arrays and generics have very different type rules. Arrays are covariant and reified; generics are invariant and erased. As a consequence, arrays provide runtime type safety but not compile-time type safety, and vice versa for generics. As a rule, arrays and generics don\u2019t mix well. If you find yourself mixing them and getting compile-time errors or warnings, your first impulse should be to replace the arrays with lists."),(0,a.kt)("p",null,"\u603b\u4e4b\uff0c\u6570\u7ec4\u548c\u6cdb\u578b\u6709\u975e\u5e38\u4e0d\u540c\u7684\u7c7b\u578b\u89c4\u5219\u3002\u6570\u7ec4\u662f\u534f\u53d8\u7684\u3001\u5177\u4f53\u5316\u7684\uff1b\u6cdb\u578b\u662f\u4e0d\u53d8\u7684\u548c\u53ef\u88ab\u64e6\u9664\u7684\u3002\u56e0\u6b64\uff0c\u6570\u7ec4\u63d0\u4f9b\u4e86\u8fd0\u884c\u65f6\u7c7b\u578b\u5b89\u5168\uff0c\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6\u7c7b\u578b\u5b89\u5168\uff0c\u5bf9\u4e8e\u6cdb\u578b\u53cd\u4e4b\u4ea6\u7136\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6570\u7ec4\u548c\u6cdb\u578b\u4e0d\u80fd\u5f88\u597d\u5730\u6df7\u5408\u3002\u5982\u679c\u4f60\u53d1\u73b0\u5c06\u5b83\u4eec\u6df7\u5408\u5728\u4e00\u8d77\u5e76\u5f97\u5230\u7f16\u8bd1\u65f6\u9519\u8bef\u6216\u8b66\u544a\uff0c\u90a3\u4e48\u4f60\u7684\u7b2c\u4e00\u4e2a\u53cd\u5e94\u8be5\u662f\u5c06\u6570\u7ec4\u66ff\u6362\u4e3a list\u3002"),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"./Chapter-5-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,a.kt)("a",{parentName:"strong",href:"./Chapter-5-Item-27-Eliminate-unchecked-warnings"},"Item 27: Eliminate unchecked warnings\uff08\u6d88\u9664 unchecked \u8b66\u544a\uff09"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,a.kt)("a",{parentName:"strong",href:"./Chapter-5-Item-29-Favor-generic-types"},"Item 29: Favor generic types\uff08\u4f18\u5148\u4f7f\u7528\u6cdb\u578b\uff09")))))}u.isMDXComponent=!0}}]);