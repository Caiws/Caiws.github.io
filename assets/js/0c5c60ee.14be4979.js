"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1888],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(n),m=r,d=h["".concat(l,".").concat(m)]||h[m]||u[m]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6566:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},o=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-2/Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type",id:"Books/EffectiveJava3/Chapter-2/Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type",title:"Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type",description:"Chapter 2. Creating and Destroying Objects\uff08\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type.md",sourceDirName:"Books/EffectiveJava3/Chapter-2",slug:"/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type",permalink:"/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters",permalink:"/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters"},next:{title:"Chapter-2-Item-4-Enforce-noninstantiability-with-a-private-constructor",permalink:"/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-4-Enforce-noninstantiability-with-a-private-constructor"}},l={},c=[{value:"Chapter 2. Creating and Destroying Objects\uff08\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\uff09",id:"chapter-2-creating-and-destroying-objects\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61",level:2},{value:"Item 3: Enforce the singleton property with a private constructor or an enum type\uff08\u4f7f\u7528\u79c1\u6709\u6784\u9020\u51fd\u6570\u6216\u679a\u4e3e\u7c7b\u578b\u5b9e\u65bd\u5355\u4f8b\u5c5e\u6027\uff09",id:"item-3-enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type\u4f7f\u7528\u79c1\u6709\u6784\u9020\u51fd\u6570\u6216\u679a\u4e3e\u7c7b\u578b\u5b9e\u65bd\u5355\u4f8b\u5c5e\u6027",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"chapter-2-creating-and-destroying-objects\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61"},"Chapter 2. Creating and Destroying Objects\uff08\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\uff09"),(0,r.kt)("h3",{id:"item-3-enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type\u4f7f\u7528\u79c1\u6709\u6784\u9020\u51fd\u6570\u6216\u679a\u4e3e\u7c7b\u578b\u5b9e\u65bd\u5355\u4f8b\u5c5e\u6027"},"Item 3: Enforce the singleton property with a private constructor or an enum type\uff08\u4f7f\u7528\u79c1\u6709\u6784\u9020\u51fd\u6570\u6216\u679a\u4e3e\u7c7b\u578b\u5b9e\u65bd\u5355\u4f8b\u5c5e\u6027\uff09"),(0,r.kt)("p",null,"A singleton is simply a class that is instantiated exactly once ","[Gamma95]",".Singletons typically represent either a stateless object such as a function (Item24) or a system component that is intrinsically unique. ",(0,r.kt)("strong",{parentName:"p"},"Making a class a singleton can make it difficult to test its clients")," because it\u2019s impossible to substitute a mock implementation for a singleton unless it implements an interface that serves as its type."),(0,r.kt)("p",null,"\u5355\u4f8b\u662f\u4e00\u4e2a\u53ea\u5b9e\u4f8b\u5316\u4e00\u6b21\u7684\u7c7b ","[Gamma95]","\u3002\u5355\u4f8b\u901a\u5e38\u8868\u793a\u65e0\u72b6\u6001\u5bf9\u8c61\uff0c\u6bd4\u5982\u51fd\u6570\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic"},"Item-24"),"\uff09\u6216\u7cfb\u7edf\u7ec4\u4ef6\uff0c\u5b83\u4eec\u5728\u672c\u8d28\u4e0a\u662f\u552f\u4e00\u7684\u3002",(0,r.kt)("strong",{parentName:"p"},"\u5c06\u4e00\u4e2a\u7c7b\u8bbe\u8ba1\u4e3a\u5355\u4f8b\u4f1a\u4f7f\u5b83\u7684\u5ba2\u6237\u7aef\u6d4b\u8bd5\u65f6\u53d8\u5f97\u56f0\u96be\uff0c")," \u9664\u975e\u5b83\u5b9e\u73b0\u4e86\u4f5c\u4e3a\u5176\u7c7b\u578b\u7684\u63a5\u53e3\uff0c\u5426\u5219\u65e0\u6cd5\u7528\u6a21\u62df\u5b9e\u73b0\u6765\u4ee3\u66ff\u5355\u4f8b\u3002"),(0,r.kt)("p",null,"There are two common ways to implement singletons. Both are based on keeping the constructor private and exporting a public static member to provide access to the sole instance. In one approach, the member is a final field:"),(0,r.kt)("p",null,"\u5b9e\u73b0\u5355\u4f8b\u6709\u4e24\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u3002\u4e24\u8005\u90fd\u57fa\u4e8e\u4fdd\u6301\u6784\u9020\u51fd\u6570\u79c1\u6709\u548c\u5bfc\u51fa\u516c\u5171\u9759\u6001\u6210\u5458\u4ee5\u63d0\u4f9b\u5bf9\u552f\u4e00\u5b9e\u4f8b\u7684\u8bbf\u95ee\u3002\u5728\u7b2c\u4e00\u79cd\u65b9\u6cd5\u4e2d\uff0c\u6210\u5458\u662f\u4e00\u4e2a final \u5b57\u6bb5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Singleton with public final field\npublic class Elvis {\n    public static final Elvis INSTANCE = new Elvis();\n    private Elvis() { ... }\n    public void leaveTheBuilding() { ... }\n}\n")),(0,r.kt)("p",null,"The private constructor is called only once, to initialize the public static final field Elvis.INSTANCE. The lack of a public or protected constructor guarantees a \u201cmonoelvistic\u201d universe: exactly one Elvis instance will exist once the Elvis class is initialized\u2014no more, no less. Nothing that a client does can change this, with one caveat: a privileged client can invoke the private constructor reflectively (Item 65) with the aid of the AccessibleObject.setAccessible method. If you need to defend against this attack, modify the constructor to make it throw an exception if it\u2019s asked to create a second instance."),(0,r.kt)("p",null,"\u79c1\u6709\u6784\u9020\u51fd\u6570\u53ea\u8c03\u7528\u4e00\u6b21\uff0c\u7528\u4e8e\u521d\u59cb\u5316 public static final \u4fee\u9970\u7684 Elvis \u7c7b\u578b\u5b57\u6bb5 INSTANCE\u3002\u4e0d\u4f7f\u7528 public \u6216 protected \u7684\u6784\u9020\u51fd\u6570\u4fdd\u8bc1\u4e86\u300c\u72ec\u4e00\u65e0\u4e8c\u300d\u7684\u7a7a\u95f4\uff1a\u4e00\u65e6\u521d\u59cb\u5316\u4e86 Elvis \u7c7b\uff0c\u5c31\u53ea\u4f1a\u5b58\u5728\u4e00\u4e2a Elvis \u5b9e\u4f8b\uff0c\u4e0d\u591a\u4e5f\u4e0d\u5c11\u3002\u5ba2\u6237\u7aef\u6240\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\u90fd\u4e0d\u80fd\u6539\u53d8\u8fd9\u4e00\u70b9\uff0c\u4f46\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff1a\u62e5\u6709\u7279\u6b8a\u6743\u9650\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u501f\u52a9 AccessibleObject.setAccessible \u65b9\u6cd5\u5229\u7528\u53cd\u5c04\u8c03\u7528\u79c1\u6709\u6784\u9020\u51fd\u6570\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-9-Item-65-Prefer-interfaces-to-reflection"},"Item-65"),"\uff09\u5982\u679c\u9700\u8981\u9632\u8303\u8fd9\u79cd\u653b\u51fb\uff0c\u8bf7\u4fee\u6539\u6784\u9020\u51fd\u6570\uff0c\u4f7f\u5176\u5728\u8bf7\u6c42\u521b\u5efa\u7b2c\u4e8c\u4e2a\u5b9e\u4f8b\u65f6\u629b\u51fa\u5f02\u5e38\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"strong"},"AccessibleObject.setAccessible")," \u65b9\u6cd5\u8c03\u7528\u79c1\u6709\u6784\u9020\u51fd\u6570\u793a\u4f8b\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Constructor<?>[] constructors = Elvis.class.getDeclaredConstructors();\nAccessibleObject.setAccessible(constructors, true);\n\nArrays.stream(constructors).forEach(name -> {\n    if (name.toString().contains("Elvis")) {\n        Elvis instance = (Elvis) name.newInstance();\n        instance.leaveTheBuilding();\n    }\n});\n')),(0,r.kt)("p",null,"In the second approach to implementing singletons, the public member is a static factory method:"),(0,r.kt)("p",null,"\u5728\u5b9e\u73b0\u5355\u4f8b\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u4e2d\uff0c\u516c\u5171\u6210\u5458\u662f\u4e00\u79cd\u9759\u6001\u5de5\u5382\u65b9\u6cd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Singleton with static factory\npublic class Elvis {\n    private static final Elvis INSTANCE = new Elvis();\n    private Elvis() { ... }\n    public static Elvis getInstance() { return INSTANCE; }\n    public void leaveTheBuilding() { ... }\n}\n")),(0,r.kt)("p",null,"All calls to Elvis.getInstance return the same object reference, and no other Elvis instance will ever be created (with the same caveat mentioned earlier)."),(0,r.kt)("p",null,"\u6240\u6709\u5bf9 ",(0,r.kt)("inlineCode",{parentName:"p"},"getInstance()")," \u65b9\u6cd5\u7684\u8c03\u7528\u90fd\u8fd4\u56de\u76f8\u540c\u7684\u5bf9\u8c61\u5f15\u7528\uff0c\u5e76\u4e14\u4e0d\u4f1a\u521b\u5efa\u5176\u4ed6 Elvis \u5b9e\u4f8b\uff08\u4e0e\u524d\u9762\u63d0\u5230\u7684\u8b66\u544a\u76f8\u540c\uff09\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a\u8fd9\u91cc\u7684\u8b66\u544a\u6307\u62e5\u6709\u7279\u6b8a\u6743\u9650\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u501f\u52a9 ",(0,r.kt)("inlineCode",{parentName:"strong"},"AccessibleObject.setAccessible")," \u65b9\u6cd5\u5229\u7528\u53cd\u5c04\u8c03\u7528\u79c1\u6709\u6784\u9020\u51fd\u6570")),(0,r.kt)("p",null,"The main advantage of the public field approach is that the API makes it clear that the class is a singleton: the public static field is final, so it will always contain the same object reference. The second advantage is that it\u2019s simpler."),(0,r.kt)("p",null,"\u516c\u5171\u5b57\u6bb5\u65b9\u6cd5\u7684\u4e3b\u8981\u4f18\u70b9\u662f API \u660e\u786e\u4e86\u7c7b\u662f\u5355\u4f8b\u7684\uff1apublic static \u4fee\u9970\u7684\u5b57\u6bb5\u662f final \u7684\uff0c\u56e0\u6b64\u5b83\u603b\u662f\u5305\u542b\u76f8\u540c\u7684\u5bf9\u8c61\u5f15\u7528\u3002\u7b2c\u4e8c\u4e2a\u4f18\u70b9\u662f\u66f4\u7b80\u5355\u3002"),(0,r.kt)("p",null,"One advantage of the static factory approach is that it gives you the flexibility to change your mind about whether the class is a singleton without changing its API. The factory method returns the sole instance, but it could be modified to return, say, a separate instance for each thread that invokes it. A second advantage is that you can write a generic singleton factory if your application requires it (Item 30). A final advantage of using a static factory is that a method reference can be used as a supplier, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"Elvis::instance")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Supplier<Elvis>"),". Unless one of these advantages is relevant, the public field approach is preferable."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1astatic factory approach \u7b49\u540c\u4e8e static factory method")),(0,r.kt)("p",null,"\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\uff0c\u5b83\u53ef\u4ee5\u5728\u4e0d\u66f4\u6539 API \u7684\u60c5\u51b5\u4e0b\u51b3\u5b9a\u7c7b\u662f\u5426\u662f\u5355\u4f8b\u3002\u5de5\u5382\u65b9\u6cd5\u8fd4\u56de\u552f\u4e00\u7684\u5b9e\u4f8b\uff0c\u4f46\u662f\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u4e3a\u8c03\u7528\u5b83\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u8fd4\u56de\u4e00\u4e2a\u5355\u72ec\u7684\u5b9e\u4f8b\u3002\u7b2c\u4e8c\u4e2a\u4f18\u70b9\u662f\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u7f16\u5199\u6cdb\u578b\u7684\u5355\u4f8b\u5de5\u5382\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-5-Item-30-Favor-generic-methods"},"Item-30"),"\uff09\u3002\u4f7f\u7528\u9759\u6001\u5de5\u5382\u7684\u6700\u540e\u4e00\u4e2a\u4f18\u70b9\u662f\u65b9\u6cd5\u5f15\u7528\u80fd\u591f\u4f5c\u4e3a\u4e00\u4e2a\u63d0\u4f9b\u8005\uff0c\u4f8b\u5982 ",(0,r.kt)("inlineCode",{parentName:"p"},"Elvis::getInstance")," \u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"Supplier<Elvis>")," \u7684\u63d0\u4f9b\u8005\u3002\u9664\u975e\u80fd\u591f\u4e0e\u8fd9\u4e9b\u4f18\u70b9\u6cbe\u8fb9\uff0c\u5426\u5219\u4f7f\u7528 public \u5b57\u6bb5\u7684\u65b9\u5f0f\u66f4\u53ef\u53d6\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8 1\uff1a\u539f\u6587\u65b9\u6cd5\u5f15\u7528\u53ef\u80fd\u662f\u7b14\u8bef\uff0c\u4fee\u6539\u4e3a ",(0,r.kt)("inlineCode",{parentName:"strong"},"Elvis::getInstance"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8 2\uff1a\u65b9\u6cd5\u5f15\u7528\u4f5c\u4e3a\u63d0\u4f9b\u8005\u7684\u4f8b\u5b50\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Supplier<Elvis> sup = Elvis::getInstance;\nElvis obj = sup.get();\nobj.leaveTheBuilding();\n")),(0,r.kt)("p",null,"To make a singleton class that uses either of these approaches serializable (Chapter 12), it is not sufficient merely to add implements Serializable to its declaration. To maintain the singleton guarantee, declare all instance fields transient and provide a readResolve method (Item 89). Otherwise, each time a serialized instance is deserialized, a new instance will be created, leading,in the case of our example, to spurious Elvis sightings. To prevent this from happening, add this readResolve method to the Elvis class:"),(0,r.kt)("p",null,"\u8981\u4f7f\u5355\u4f8b\u7c7b\u4f7f\u7528\u8fd9\u4e24\u79cd\u65b9\u6cd5\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u5b9e\u73b0\u53ef\u5e8f\u5217\u5316\uff08Chapter 12\uff09\uff0c\u4ec5\u4ec5\u5728\u5176\u58f0\u660e\u4e2d\u6dfb\u52a0\u5b9e\u73b0 serializable \u662f\u4e0d\u591f\u7684\u3002\u8981\u7ef4\u62a4\u5355\u4f8b\u4fdd\u8bc1\uff0c\u5e94\u58f0\u660e\u6240\u6709\u5b9e\u4f8b\u5b57\u6bb5\u4e3a transient\uff0c\u5e76\u63d0\u4f9b readResolve \u65b9\u6cd5\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve"},"Item-89"),"\uff09\u3002\u5426\u5219\uff0c\u6bcf\u6b21\u53cd\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\uff0c\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u51fa\u73b0\u865a\u5047\u7684 Elvis\u3002\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff0c\u5c06\u8fd9\u4e2a readResolve \u65b9\u6cd5\u6dfb\u52a0\u5230 Elvis \u7c7b\u4e2d\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// readResolve method to preserve singleton property\nprivate Object readResolve() {\n    // Return the one true Elvis and let the garbage collector\n    // take care of the Elvis impersonator.\n    return INSTANCE;\n}\n")),(0,r.kt)("p",null,"A third way to implement a singleton is to declare a single-element enum:"),(0,r.kt)("p",null,"\u5b9e\u73b0\u5355\u4f8b\u7684\u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u58f0\u660e\u4e00\u4e2a\u5355\u5143\u7d20\u679a\u4e3e\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Enum singleton - the preferred approach\npublic enum Elvis {\n    INSTANCE;\n    public void leaveTheBuilding() { ... }\n}\n")),(0,r.kt)("p",null,"This approach is similar to the public field approach, but it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks. This approach may feel a bit unnatural, but ",(0,r.kt)("strong",{parentName:"p"},"a single-element enum type is often the best way to implement a singleton.")," Note that you can\u2019t use this approach if your singleton must extend a superclass other than Enum(though you can declare an enum to implement interfaces)."),(0,r.kt)("p",null,"\u8fd9\u79cd\u65b9\u6cd5\u7c7b\u4f3c\u4e8e public \u5b57\u6bb5\u65b9\u6cd5\uff0c\u4f46\u662f\u5b83\u66f4\u7b80\u6d01\uff0c\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u5e8f\u5217\u5316\u673a\u5236\uff0c\u63d0\u4f9b\u4e86\u5bf9\u591a\u4e2a\u5b9e\u4f8b\u5316\u7684\u4e25\u683c\u4fdd\u8bc1\uff0c\u5373\u4f7f\u9762\u5bf9\u590d\u6742\u7684\u5e8f\u5217\u5316\u6216\u53cd\u5c04\u653b\u51fb\u4e5f\u662f\u5982\u6b64\u3002\u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u6709\u70b9\u4e0d\u81ea\u7136\uff0c\u4f46\u662f",(0,r.kt)("strong",{parentName:"p"},"\u5355\u5143\u7d20\u679a\u4e3e\u7c7b\u578b\u901a\u5e38\u662f\u5b9e\u73b0\u5355\u4f8b\u7684\u6700\u4f73\u65b9\u6cd5\u3002")," \u6ce8\u610f\uff0c\u5982\u679c\u4f60\u7684\u5355\u4f8b\u5fc5\u987b\u6269\u5c55\u4e00\u4e2a\u8d85\u7c7b\u800c\u4e0d\u662f Enum\uff08\u5c3d\u7ba1\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a Enum \u6765\u5b9e\u73b0\u63a5\u53e3\uff09\uff0c\u4f60\u5c31\u4e0d\u80fd\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002"),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"./Chapter-2-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters"},"Item 2: Consider a builder when faced with many constructor parameters\uff08\u5728\u9762\u5bf9\u591a\u4e2a\u6784\u9020\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u8bf7\u8003\u8651\u6784\u5efa\u5668\uff09"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-2-Item-4-Enforce-noninstantiability-with-a-private-constructor"},"Item 4: Enforce noninstantiability with a private constructor\uff08\u7528\u79c1\u6709\u6784\u9020\u51fd\u6570\u5b9e\u65bd\u4e0d\u53ef\u5b9e\u4f8b\u5316\uff09")))))}u.isMDXComponent=!0}}]);