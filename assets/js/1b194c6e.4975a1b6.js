"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8954],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),h=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=h(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=h(a),d=n,m=u["".concat(l,".").concat(d)]||u[d]||c[d]||s;return a?r.createElement(m,i(i({ref:t},p),{},{components:a})):r.createElement(m,i({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var h=2;h<s;h++)i[h]=a[h];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9248:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var r=a(7462),n=(a(7294),a(3905));const s={},i=void 0,o={unversionedId:"Books/EffectiveJava3/Chapter-5/Chapter-5-Item-32-Combine-generics-and-varargs-judiciously",id:"Books/EffectiveJava3/Chapter-5/Chapter-5-Item-32-Combine-generics-and-varargs-judiciously",title:"Chapter-5-Item-32-Combine-generics-and-varargs-judiciously",description:"Chapter 5. Generics\uff08\u6cdb\u578b\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-32-Combine-generics-and-varargs-judiciously.md",sourceDirName:"Books/EffectiveJava3/Chapter-5",slug:"/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-32-Combine-generics-and-varargs-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-32-Combine-generics-and-varargs-judiciously",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-32-Combine-generics-and-varargs-judiciously.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-5-Item-31-Use-bounded-wildcards-to-increase-API-flexibility",permalink:"/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-31-Use-bounded-wildcards-to-increase-API-flexibility"},next:{title:"Chapter-5-Item-33-Consider-typesafe-heterogeneous-containers",permalink:"/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-33-Consider-typesafe-heterogeneous-containers"}},l={},h=[{value:"Chapter 5. Generics\uff08\u6cdb\u578b\uff09",id:"chapter-5-generics\u6cdb\u578b",level:2},{value:"Item 32: Combine generics and varargs judiciously\uff08\u660e\u667a\u5730\u5408\u7528\u6cdb\u578b\u548c\u53ef\u53d8\u53c2\u6570\uff09",id:"item-32-combine-generics-and-varargs-judiciously\u660e\u667a\u5730\u5408\u7528\u6cdb\u578b\u548c\u53ef\u53d8\u53c2\u6570",level:3}],p={toc:h};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-5-generics\u6cdb\u578b"},"Chapter 5. Generics\uff08\u6cdb\u578b\uff09"),(0,n.kt)("h3",{id:"item-32-combine-generics-and-varargs-judiciously\u660e\u667a\u5730\u5408\u7528\u6cdb\u578b\u548c\u53ef\u53d8\u53c2\u6570"},"Item 32: Combine generics and varargs judiciously\uff08\u660e\u667a\u5730\u5408\u7528\u6cdb\u578b\u548c\u53ef\u53d8\u53c2\u6570\uff09"),(0,n.kt)("p",null,"Varargs methods (Item 53) and generics were both added to the platform in Java 5, so you might expect them to interact gracefully; sadly, they do not. The purpose of varargs is to allow clients to pass a variable number of arguments to a method, but it is a leaky abstraction: when you invoke a varargs method, an array is created to hold the varargs parameters; that array, which should be an implementation detail, is visible. As a consequence, you get confusing compiler warnings when varargs parameters have generic or parameterized types."),(0,n.kt)("p",null,"\u53ef\u53d8\u53c2\u6570\u65b9\u6cd5\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-8-Item-53-Use-varargs-judiciously"},"Item-53"),"\uff09\u548c\u6cdb\u578b\u90fd\u662f\u5728 Java 5 \u4e2d\u6dfb\u52a0\u7684\uff0c\u56e0\u6b64\u4f60\u53ef\u80fd\u8ba4\u4e3a\u5b83\u4eec\u80fd\u591f\u4f18\u96c5\u5730\u4ea4\u4e92\uff1b\u53ef\u60b2\u7684\u662f\uff0c\u4ed6\u4eec\u5e76\u4e0d\u80fd\u3002\u53ef\u53d8\u53c2\u6570\u7684\u76ee\u7684\u662f\u5141\u8bb8\u5ba2\u6237\u7aef\u5411\u65b9\u6cd5\u4f20\u9012\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u62bd\u8c61\u6cc4\u6f0f\uff1a\u5f53\u4f60\u8c03\u7528\u53ef\u53d8\u53c2\u6570\u65b9\u6cd5\u65f6\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\u6765\u4fdd\u5b58\u53c2\u6570\uff1b\u8be5\u6570\u7ec4\u672c\u5e94\u662f\u5b9e\u73b0\u7ec6\u8282\uff0c\u5374\u662f\u53ef\u89c1\u7684\u3002\u56e0\u6b64\uff0c\u5f53\u53ef\u53d8\u53c2\u6570\u5177\u6709\u6cdb\u578b\u6216\u53c2\u6570\u5316\u7c7b\u578b\u65f6\uff0c\u4f1a\u51fa\u73b0\u4ee4\u4eba\u56f0\u60d1\u7684\u7f16\u8bd1\u5668\u8b66\u544a\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a\u6709\u5173\u300c\u62bd\u8c61\u6cc4\u6f0f\u300d\uff08Leaky Abstractions\uff09\u7684\u6982\u5ff5\u53ef\u53c2\u8003 ",(0,n.kt)("a",{parentName:"strong",href:"https://mp.weixin.qq.com/s/KneomYX_7yQ78RzAmvIoHg"},"\u5947\u821e\u7cbe\u9009 2021-07-06 \u7684\u6587\u7ae0"))),(0,n.kt)("p",null,"Recall from Item 28 that a non-reifiable type is one whose runtime representation has less information than its compile-time representation, and that nearly all generic and parameterized types are non-reifiable. If a method declares its varargs parameter to be of a non-reifiable type, the compiler generates a warning on the declaration. If the method is invoked on varargs parameters whose inferred type is non-reifiable, the compiler generates a warning on the invocation too. The warnings look something like this:"),(0,n.kt)("p",null,"\u56de\u60f3\u4e00\u4e0b ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-5-Item-28-Prefer-lists-to-arrays"},"Item-28"),"\uff0c\u975e\u5177\u4f53\u5316\u7c7b\u578b\u662f\u6307\u5176\u8fd0\u884c\u65f6\u8868\u793a\u7684\u4fe1\u606f\u5c11\u4e8e\u5176\u7f16\u8bd1\u65f6\u8868\u793a\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u51e0\u4e4e\u6240\u6709\u6cdb\u578b\u548c\u53c2\u6570\u5316\u7c7b\u578b\u90fd\u662f\u4e0d\u53ef\u5177\u4f53\u5316\u7684\u3002\u5982\u679c\u65b9\u6cd5\u58f0\u660e\u5176\u53ef\u53d8\u53c2\u6570\u4e3a\u4e0d\u53ef\u5177\u4f53\u5316\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u5c06\u5728\u58f0\u660e\u4e0a\u751f\u6210\u8b66\u544a\u3002\u5982\u679c\u65b9\u6cd5\u662f\u5728\u5176\u63a8\u65ad\u7c7b\u578b\u4e0d\u53ef\u5177\u4f53\u5316\u7684\u53ef\u53d8\u53c2\u6570\u4e0a\u8c03\u7528\u7684\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u5728\u8c03\u7528\u65f6\u751f\u6210\u8b66\u544a\u3002\u751f\u6210\u7684\u8b66\u544a\u5c31\u50cf\u8fd9\u6837\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"warning: [unchecked] Possible heap pollution from parameterized vararg type List<String>\n")),(0,n.kt)("p",null,"Heap pollution occurs when a variable of a parameterized type refers to an object that is not of that type ","[JLS, 4.12.2]",". It can cause the compiler\u2019s automatically generated casts to fail, violating the fundamental guarantee of the generic type system."),(0,n.kt)("p",null,"\u5f53\u53c2\u6570\u5316\u7c7b\u578b\u7684\u53d8\u91cf\u5f15\u7528\u4e0d\u5c5e\u4e8e\u8be5\u7c7b\u578b\u7684\u5bf9\u8c61\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u5806\u6c61\u67d3","[JLS, 4.12.2]","\u3002\u5b83\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u5931\u8d25\uff0c\u8fdd\u53cd\u6cdb\u578b\u7c7b\u578b\u7cfb\u7edf\u7684\u57fa\u672c\u4fdd\u8bc1\u3002"),(0,n.kt)("p",null,"For example, consider this method, which is a thinly disguised\uff08\u4f2a\u88c5\u7684\uff09 variant of the code fragment on page 127:"),(0,n.kt)("p",null,"\u4f8b\u5982\uff0c\u8003\u8651\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5b83\u6458\u81ea 127 \u9875\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-5-Item-26-Do-not-use-raw-types"},"Item-26"),"\uff09\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u4f46\u505a\u4e86\u4e9b\u4fee\u6539\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Mixing generics and varargs can violate type safety!\n// \u6cdb\u578b\u548c\u53ef\u53d8\u53c2\u6570\u6df7\u5408\u4f7f\u7528\u53ef\u80fd\u8fdd\u53cd\u7c7b\u578b\u5b89\u5168\u539f\u5219\uff01\nstatic void dangerous(List<String>... stringLists) {\n    List<Integer> intList = List.of(42);\n    Object[] objects = stringLists;\n    objects[0] = intList; // Heap pollution\n    String s = stringLists[0].get(0); // ClassCastException\n}\n")),(0,n.kt)("p",null,"This method has no visible casts yet throws a ClassCastException when invoked with one or more arguments. Its last line has an invisible cast that is generated by the compiler. This cast fails, demonstrating that type safety has been compromised, and ",(0,n.kt)("strong",{parentName:"p"},"it is unsafe to store a value in a generic varargs array parameter.")),(0,n.kt)("p",null,"\u6b64\u65b9\u6cd5\u6ca1\u6709\u663e\u5f0f\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u4f46\u5728\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\u8c03\u7528\u65f6\u629b\u51fa ClassCastException\u3002\u5b83\u7684\u6700\u540e\u4e00\u884c\u6709\u4e00\u4e2a\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u9690\u5f0f\u5f3a\u5236\u8f6c\u6362\u3002\u6b64\u8f6c\u6362\u5931\u8d25\uff0c\u8868\u660e\u7c7b\u578b\u5b89\u5168\u6027\u53d7\u5230\u4e86\u5f71\u54cd\uff0c\u5e76\u4e14",(0,n.kt)("strong",{parentName:"p"},"\u5728\u6cdb\u578b\u53ef\u53d8\u53c2\u6570\u6570\u7ec4\u4e2d\u5b58\u50a8\u503c\u662f\u4e0d\u5b89\u5168\u7684\u3002")),(0,n.kt)("p",null,"This example raises an interesting question: Why is it even legal to declare a method with a generic varargs parameter, when it is illegal to create a generic array explicitly? In other words, why does the method shown previously generate only a warning, while the code fragment on page 127 generates an error? The answer is that methods with varargs parameters of generic or parameterized types can be very useful in practice, so the language designers opted to live with this inconsistency. In fact, the Java libraries export several such methods, including ",(0,n.kt)("inlineCode",{parentName:"p"},"Arrays.asList(T... a)"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Collections.addAll(Collection<? super T> c, T... elements)"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"EnumSet.of(E first, E... rest)"),". Unlike the dangerous method shown earlier, these library methods are typesafe."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u4f8b\u5b50\u63d0\u51fa\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u4f7f\u7528\u6cdb\u578b\u53ef\u53d8\u53c2\u6570\u58f0\u660e\u65b9\u6cd5\u662f\u5408\u6cd5\u7684\uff0c\u800c\u663e\u5f0f\u521b\u5efa\u6cdb\u578b\u6570\u7ec4\u662f\u975e\u6cd5\u7684\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e3a\u4ec0\u4e48\u524d\u9762\u663e\u793a\u7684\u65b9\u6cd5\u53ea\u751f\u6210\u8b66\u544a\uff0c\u800c 127 \u9875\u4e0a\u7684\u4ee3\u7801\u7247\u6bb5\u53d1\u751f\u9519\u8bef\uff1f\u7b54\u6848\u662f\uff0c\u5e26\u6709\u6cdb\u578b\u6216\u53c2\u6570\u5316\u7c7b\u578b\u7684\u53ef\u53d8\u53c2\u6570\u7684\u65b9\u6cd5\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u975e\u5e38\u6709\u7528\uff0c\u56e0\u6b64\u8bed\u8a00\u8bbe\u8ba1\u4eba\u5458\u9009\u62e9\u5fcd\u53d7\u8fd9\u79cd\u4e0d\u4e00\u81f4\u6027\u3002\u4e8b\u5b9e\u4e0a\uff0cJava \u5e93\u5bfc\u51fa\u4e86\u51e0\u4e2a\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u5305\u62ec ",(0,n.kt)("inlineCode",{parentName:"p"},"Arrays.asList(T... a)"),"\u3001",(0,n.kt)("inlineCode",{parentName:"p"},"Collections.addAll(Collection<? super T> c, T... elements)")," \u4ee5\u53ca ",(0,n.kt)("inlineCode",{parentName:"p"},"EnumSet.of(E first, E... rest)"),"\u3002\u5b83\u4eec\u4e0e\u524d\u9762\u663e\u793a\u7684\u5371\u9669\u65b9\u6cd5\u4e0d\u540c\uff0c\u8fd9\u4e9b\u5e93\u65b9\u6cd5\u662f\u7c7b\u578b\u5b89\u5168\u7684\u3002"),(0,n.kt)("p",null,'Prior to Java 7, there was nothing the author of a method with a generic varargs parameter could do about the warnings at the call sites. This made these APIs unpleasant to use. Users had to put up with the warnings or, preferably, to eliminate them with @SuppressWarnings("unchecked") annotations at every call site (Item 27). This was tedious, harmed readability, and hid warnings that flagged real issues.'),(0,n.kt)("p",null,"\u5728 Java 7 \u4e4b\u524d\uff0c\u4f7f\u7528\u6cdb\u578b\u53ef\u53d8\u53c2\u6570\u7684\u65b9\u6cd5\u7684\u4f5c\u8005\u5bf9\u8c03\u7528\u70b9\u4e0a\u4ea7\u751f\u7684\u8b66\u544a\u65e0\u80fd\u4e3a\u529b\u3002\u4f7f\u5f97\u8fd9\u4e9b API \u96be\u4ee5\u4f7f\u7528\u3002\u7528\u6237\u5fc5\u987b\u5fcd\u53d7\u8fd9\u4e9b\u8b66\u544a\uff0c\u6216\u8005\u5728\u6bcf\u4e2a\u8c03\u7528\u70b9\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-5-Item-27-Eliminate-unchecked-warnings"},"Item-27"),'\uff09\u4f7f\u7528 @SuppressWarnings("unchecked") \u6ce8\u91ca\u6d88\u9664\u8fd9\u4e9b\u8b66\u544a\u3002\u8fd9\u79cd\u505a\u6cd5\u4e4f\u5584\u53ef\u9648\uff0c\u65e2\u635f\u5bb3\u4e86\u53ef\u8bfb\u6027\uff0c\u4e5f\u5ffd\u7565\u4e86\u6807\u8bb0\u5b9e\u9645\u95ee\u9898\u7684\u8b66\u544a\u3002'),(0,n.kt)("p",null,"In Java 7, the SafeVarargs annotation was added to the platform, to allow the author of a method with a generic varargs parameter to suppress client warnings automatically. In essence, ",(0,n.kt)("strong",{parentName:"p"},"the SafeVarargs annotation constitutes a promise by the author of a method that it is typesafe.")," In exchange for this promise, the compiler agrees not to warn the users of the method that calls may be unsafe."),(0,n.kt)("p",null,"\u5728 Java 7 \u4e2d\u6dfb\u52a0\u4e86 SafeVarargs \u6ce8\u91ca\uff0c\u4ee5\u5141\u8bb8\u4f7f\u7528\u6cdb\u578b\u53ef\u53d8\u53c2\u6570\u7684\u65b9\u6cd5\u7684\u4f5c\u8005\u81ea\u52a8\u6291\u5236\u5ba2\u6237\u7aef\u8b66\u544a\u3002\u672c\u8d28\u4e0a\uff0c",(0,n.kt)("strong",{parentName:"p"},"SafeVarargs \u6ce8\u91ca\u6784\u6210\u4e86\u65b9\u6cd5\u4f5c\u8005\u7684\u4e00\u4e2a\u627f\u8bfa\uff0c\u5373\u8be5\u65b9\u6cd5\u662f\u7c7b\u578b\u5b89\u5168\u7684\u3002")," \u4f5c\u4e3a\u8fd9\u4e2a\u627f\u8bfa\u7684\u4ea4\u6362\u6761\u4ef6\uff0c\u7f16\u8bd1\u5668\u540c\u610f\u4e0d\u5bf9\u8c03\u7528\u53ef\u80fd\u4e0d\u5b89\u5168\u7684\u65b9\u6cd5\u7684\u7528\u6237\u53d1\u51fa\u8b66\u544a\u3002"),(0,n.kt)("p",null,"It is critical that you do not annotate a method with @SafeVarargs unless it actually is safe. So what does it take to ensure this? Recall that a generic array is created when the method is invoked, to hold the varargs parameters. If the method doesn\u2019t store anything into the array (which would overwrite the parameters) and doesn\u2019t allow a reference to the array to escape (which would enable untrusted code to access the array), then it\u2019s safe. In other words, if the varargs parameter array is used only to transmit a variable number of arguments from the caller to the method\u2014which is, after all, the purpose of varargs\u2014then the method is safe."),(0,n.kt)("p",null,"\u5173\u952e\u95ee\u9898\u662f\uff0c\u4f7f\u7528 @SafeVarargs \u6ce8\u91ca\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u5b89\u5168\u7684\u3002\u90a3\u4e48\u600e\u6837\u624d\u80fd\u786e\u4fdd\u8fd9\u4e00\u70b9\u5462\uff1f\u56de\u60f3\u4e00\u4e0b\uff0c\u5728\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\u521b\u5efa\u4e86\u4e00\u4e2a\u6cdb\u578b\u6570\u7ec4\u6765\u4fdd\u5b58\u53ef\u53d8\u53c2\u6570\u3002\u5982\u679c\u65b9\u6cd5\u6ca1\u6709\u5c06\u4efb\u4f55\u5185\u5bb9\u5b58\u50a8\u5230\u6570\u7ec4\u4e2d\uff08\u8fd9\u4f1a\u8986\u76d6\u53c2\u6570\uff09\uff0c\u5e76\u4e14\u4e0d\u5141\u8bb8\u5bf9\u6570\u7ec4\u7684\u5f15\u7528\u8fdb\u884c\u8f6c\u4e49\uff08\u8fd9\u4f1a\u4f7f\u4e0d\u53d7\u4fe1\u4efb\u7684\u4ee3\u7801\u80fd\u591f\u8bbf\u95ee\u6570\u7ec4\uff09\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u5b89\u5168\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u53ef\u53d8\u53c2\u6570\u6570\u7ec4\u4ec5\u7528\u4e8e\u5c06\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u4ece\u8c03\u7528\u65b9\u4f20\u8f93\u5230\u65b9\u6cd5\uff08\u6bd5\u7adf\u8fd9\u662f\u53ef\u53d8\u53c2\u6570\u7684\u76ee\u7684\uff09\uff0c\u90a3\u4e48\u8be5\u65b9\u6cd5\u662f\u5b89\u5168\u7684\u3002"),(0,n.kt)("p",null,"It is worth noting that you can violate type safety without ever storing anything in the varargs parameter array. Consider the following generic varargs method, which returns an array containing its parameters. At first glance, it may look like a handy little utility:"),(0,n.kt)("p",null,"\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u53ef\u53d8\u53c2\u6570\u6570\u7ec4\u4e2d\u4e0d\u5b58\u50a8\u4efb\u4f55\u4e1c\u897f\u5c31\u53ef\u80fd\u8fdd\u53cd\u7c7b\u578b\u5b89\u5168\u6027\u3002\u8003\u8651\u4e0b\u9762\u7684\u901a\u7528\u53ef\u53d8\u53c2\u6570\u65b9\u6cd5\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u53c2\u6570\u7684\u6570\u7ec4\u3002\u4e4d\u4e00\u770b\uff0c\u5b83\u4f3c\u4e4e\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u5c0f\u5b9e\u7528\u7a0b\u5e8f\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// UNSAFE - Exposes a reference to its generic parameter array!\nstatic <T> T[] toArray(T... args) {\n  return args;\n}\n")),(0,n.kt)("p",null,"This method simply returns its varargs parameter array. The method may not look dangerous, but it is! The type of this array is determined by the compiletime types of the arguments passed in to the method, and the compiler may not have enough information to make an accurate determination. Because this method returns its varargs parameter array, it can propagate heap pollution up the call stack."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u65b9\u6cd5\u53ea\u662f\u8fd4\u56de\u5b83\u7684\u53ef\u53d8\u53c2\u6570\u6570\u7ec4\u3002\u8fd9\u79cd\u65b9\u6cd5\u770b\u8d77\u6765\u5e76\u4e0d\u5371\u9669\uff0c\u4f46\u786e\u5b9e\u5371\u9669\uff01\u8fd9\u4e2a\u6570\u7ec4\u7684\u7c7b\u578b\u7531\u4f20\u9012\u7ed9\u65b9\u6cd5\u7684\u53c2\u6570\u7684\u7f16\u8bd1\u65f6\u7c7b\u578b\u51b3\u5b9a\uff0c\u7f16\u8bd1\u5668\u53ef\u80fd\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u606f\u6765\u505a\u51fa\u51c6\u786e\u7684\u51b3\u5b9a\u3002\u56e0\u4e3a\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u5b83\u7684\u53ef\u53d8\u53c2\u6570\u6570\u7ec4\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5c06\u5806\u6c61\u67d3\u4f20\u64ad\u5230\u8c03\u7528\u5806\u6808\u4e0a\u3002"),(0,n.kt)("p",null,"To make this concrete, consider the following generic method, which takes three arguments of type T and returns an array containing two of the arguments, chosen at random:"),(0,n.kt)("p",null,"\u4e3a\u4e86\u4f7f\u5176\u5177\u4f53\u5316\uff0c\u8bf7\u8003\u8651\u4e0b\u9762\u7684\u6cdb\u578b\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e09\u4e2a\u7c7b\u578b\u4e3a T \u7684\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u968f\u673a\u9009\u62e9\u7684\u4e24\u4e2a\u53c2\u6570\u7684\u6570\u7ec4\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"static <T> T[] pickTwo(T a, T b, T c) {\n  switch(ThreadLocalRandom.current().nextInt(3)) {\n    case 0: return toArray(a, b);\n    case 1: return toArray(a, c);\n    case 2: return toArray(b, c);\n  }\n  throw new AssertionError(); // Can't get here\n}\n")),(0,n.kt)("p",null,"This method is not, in and of itself, dangerous and would not generate a warning except that it invokes the toArray method, which has a generic varargs parameter."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u65b9\u6cd5\u672c\u8eab\u5e76\u4e0d\u5371\u9669\uff0c\u5e76\u4e14\u4e0d\u4f1a\u751f\u6210\u8b66\u544a\uff0c\u9664\u975e\u5b83\u8c03\u7528 toArray \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u6709\u4e00\u4e2a\u901a\u7528\u7684\u53ef\u53d8\u53c2\u6570\u3002"),(0,n.kt)("p",null,"When compiling this method, the compiler generates code to create a varargs parameter array in which to pass two T instances to toArray. This code allocates an array of type Object[], which is the most specific type that is guaranteed to hold these instances, no matter what types of objects are passed to pickTwo at the call site. The toArray method simply returns this array to pickTwo, which in turn returns it to its caller, so pickTwo will always return an array of type Object[]."),(0,n.kt)("p",null,"\u7f16\u8bd1\u6b64\u65b9\u6cd5\u65f6\uff0c\u7f16\u8bd1\u5668\u751f\u6210\u4ee3\u7801\u6765\u521b\u5efa\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u6570\u7ec4\uff0c\u5728\u8be5\u6570\u7ec4\u4e2d\u5411 toArray \u4f20\u9012\u4e24\u4e2a T \u5b9e\u4f8b\u3002\u8fd9\u6bb5\u4ee3\u7801\u5206\u914d\u4e86 type Object[] \u7684\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u662f\u4fdd\u8bc1\u4fdd\u5b58\u8fd9\u4e9b\u5b9e\u4f8b\u7684\u6700\u7279\u5b9a\u7684\u7c7b\u578b\uff0c\u65e0\u8bba\u8c03\u7528\u7ad9\u70b9\u4e0a\u4f20\u9012\u7ed9 pickTwo \u7684\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u5bf9\u8c61\u3002toArray \u65b9\u6cd5\u53ea\u662f\u5c06\u8fd9\u4e2a\u6570\u7ec4\u8fd4\u56de\u7ed9 pickTwo\uff0c\u800c pickTwo \u53c8\u5c06\u8fd9\u4e2a\u6570\u7ec4\u8fd4\u56de\u7ed9\u5b83\u7684\u8c03\u7528\u8005\uff0c\u6240\u4ee5 pickTwo \u603b\u662f\u8fd4\u56de\u4e00\u4e2a Object[] \u7c7b\u578b\u7684\u6570\u7ec4\u3002"),(0,n.kt)("p",null,"Now consider this main method, which exercises pickTwo:"),(0,n.kt)("p",null,"\u73b0\u5728\u8003\u8651\u8fd9\u4e2a\u4e3b\u8981\u65b9\u6cd5\uff0c\u7ec3\u4e60 pickTwo\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'public static void main(String[] args) {\n  String[] attributes = pickTwo("Good", "Fast", "Cheap");\n}\n')),(0,n.kt)("p",null,"There is nothing at all wrong with this method, so it compiles without generating any warnings. But when you run it, it throws a ClassCastException, though it contains no visible casts. What you don\u2019t see is that the compiler has generated a hidden cast to String[] on the value returned by pickTwo so that it can be stored in attributes. The cast fails, because Object[] is not a subtype of String[]. This failure is quite disconcerting because it is two levels removed from the method that actually causes the heap pollution (toArray), and the varargs parameter array is not modified after the actual parameters are stored in it."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u65b9\u6cd5\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u56e0\u6b64\u5b83\u5728\u7f16\u8bd1\u65f6\u4e0d\u4f1a\u751f\u6210\u4efb\u4f55\u8b66\u544a\u3002\u4f46\u662f\u5f53\u4f60\u8fd0\u884c\u5b83\u65f6\uff0c\u5b83\u4f1a\u629b\u51fa ClassCastException\uff0c\u5c3d\u7ba1\u5b83\u4e0d\u5305\u542b\u53ef\u89c1\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u3002\u4f60\u6ca1\u6709\u770b\u5230\u7684\u662f\uff0c\u7f16\u8bd1\u5668\u5728 pickTwo \u8fd4\u56de\u7684\u503c\u4e0a\u751f\u6210\u4e86\u4e00\u4e2a\u9690\u85cf\u7684 String[] \u8f6c\u6362\uff0c\u8fd9\u6837\u5b83\u5c31\u53ef\u4ee5\u5b58\u50a8\u5728\u5c5e\u6027\u4e2d\u3002\u8f6c\u6362\u5931\u8d25\uff0c\u56e0\u4e3a Object[] \u4e0d\u662f String[] \u7684\u5b50\u7c7b\u578b\u3002\u8fd9\u4e2a\u5931\u8d25\u975e\u5e38\u4ee4\u4eba\u4e0d\u5b89\uff0c\u56e0\u4e3a\u5b83\u662f\u4ece\u65b9\u6cd5\u4e2d\u5220\u9664\u4e86\u4e24\u4e2a\u5bfc\u81f4\u5806\u6c61\u67d3\u7684\u7ea7\u522b\uff08toArray\uff09\uff0c\u5e76\u4e14\u53ef\u53d8\u53c2\u6570\u6570\u7ec4\u5728\u5b9e\u9645\u53c2\u6570\u5b58\u50a8\u5728\u5176\u4e2d\u4e4b\u540e\u4e0d\u4f1a\u88ab\u4fee\u6539\u3002"),(0,n.kt)("p",null,"This example is meant to drive home the point that ",(0,n.kt)("strong",{parentName:"p"},"it is unsafe to give another method access to a generic varargs parameter array,")," with two exceptions: it is safe to pass the array to another varargs method that is correctly annotated with @SafeVarargs, and it is safe to pass the array to a non-varargs method that merely computes some function of the contents of the array."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u793a\u4f8b\u7684\u76ee\u7684\u662f\u8ba9\u4eba\u660e\u767d\uff0c",(0,n.kt)("strong",{parentName:"p"},"\u8ba9\u53e6\u4e00\u4e2a\u65b9\u6cd5\u8bbf\u95ee\u6cdb\u578b\u53ef\u53d8\u53c2\u6570\u6570\u7ec4\u662f\u4e0d\u5b89\u5168\u7684"),"\uff0c\u53ea\u6709\u4e24\u4e2a\u4f8b\u5916\uff1a\u5c06\u6570\u7ec4\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u4f7f\u7528 @SafeVarargs \u6b63\u786e\u6ce8\u91ca\u7684\u53ef\u53d8\u53c2\u6570\u65b9\u6cd5\u662f\u5b89\u5168\u7684\uff0c\u5c06\u6570\u7ec4\u4f20\u9012\u7ed9\u4ec5\u8ba1\u7b97\u6570\u7ec4\u5185\u5bb9\u7684\u67d0\u4e2a\u51fd\u6570\u7684\u975e\u53ef\u53d8\u65b9\u6cd5\u4e5f\u662f\u5b89\u5168\u7684\u3002"),(0,n.kt)("p",null,"Here is a typical example of a safe use of a generic varargs parameter. This method takes an arbitrary number of lists as arguments and returns a single list containing the elements of all of the input lists in sequence. Because the method is annotated with @SafeVarargs, it doesn\u2019t generate any warnings, on the declaration or at its call sites:"),(0,n.kt)("p",null,"\u4e0b\u9762\u662f\u4e00\u4e2a\u5b89\u5168\u4f7f\u7528\u6cdb\u578b\u53ef\u53d8\u53c2\u6570\u7684\u5178\u578b\u793a\u4f8b\u3002\u8be5\u65b9\u6cd5\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u8f93\u5165\u5217\u8868\u7684\u5143\u7d20\u7684\u5e8f\u5217\u5217\u8868\u3002\u56e0\u4e3a\u8be5\u65b9\u6cd5\u662f\u7528 @SafeVarargs \u6ce8\u91ca\u7684\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u5728\u58f0\u660e\u6216\u8c03\u7528\u70b9\u4e0a\u751f\u6210\u4efb\u4f55\u8b66\u544a\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Safe method with a generic varargs parameter\n@SafeVarargs\nstatic <T> List<T> flatten(List<? extends T>... lists) {\n  List<T> result = new ArrayList<>();\n  for (List<? extends T> list : lists)\n    result.addAll(list);\n  return result;\n}\n")),(0,n.kt)("p",null,"The rule for deciding when to use the SafeVarargs annotation is simple: ",(0,n.kt)("strong",{parentName:"p"},"Use @SafeVarargs on every method with a varargs parameter of a generic or parameterized type,")," so its users won\u2019t be burdened by needless and confusing compiler warnings. This implies that you should never write unsafe varargs methods like dangerous or toArray. Every time the compiler warns you of possible heap pollution from a generic varargs parameter in a method you control, check that the method is safe. As a reminder, a generic varargs methods is safe if:"),(0,n.kt)("p",null,"\u51b3\u5b9a\u4f55\u65f6\u4f7f\u7528 SafeVarargs \u6ce8\u91ca\u7684\u89c4\u5219\u5f88\u7b80\u5355\uff1a",(0,n.kt)("strong",{parentName:"p"},"\u5728\u6bcf\u4e2a\u5e26\u6709\u6cdb\u578b\u6216\u53c2\u6570\u5316\u7c7b\u578b\u7684\u53ef\u53d8\u53c2\u6570\u7684\u65b9\u6cd5\u4e0a\u4f7f\u7528 @SafeVarargs"),"\uff0c\u8fd9\u6837\u5b83\u7684\u7528\u6237\u5c31\u4e0d\u4f1a\u88ab\u4e0d\u5fc5\u8981\u7684\u548c\u4ee4\u4eba\u56f0\u60d1\u7684\u7f16\u8bd1\u5668\u8b66\u544a\u6240\u56f0\u6270\u3002\u8fd9\u610f\u5473\u7740\u4f60\u6c38\u8fdc\u4e0d\u5e94\u8be5\u7f16\u5199\u50cf dangerous \u6216 toArray \u8fd9\u6837\u4e0d\u5b89\u5168\u7684\u53ef\u53d8\u53c2\u6570\u65b9\u6cd5\u3002\u6bcf\u5f53\u7f16\u8bd1\u5668\u8b66\u544a\u4f60\u63a7\u5236\u7684\u65b9\u6cd5\u4e2d\u7684\u6cdb\u578b\u53ef\u53d8\u53c2\u6570\u53ef\u80fd\u9020\u6210\u5806\u6c61\u67d3\u65f6\uff0c\u8bf7\u68c0\u67e5\u8be5\u65b9\u6cd5\u662f\u5426\u5b89\u5168\u3002\u63d0\u9192\u4e00\u4e0b\uff0c\u4e00\u4e2a\u901a\u7528\u7684\u53ef\u53d8\u53c2\u6570\u65b9\u6cd5\u662f\u5b89\u5168\u7684\uff0c\u5982\u679c\uff1a"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"it doesn\u2019t store anything in the varargs parameter array, and")),(0,n.kt)("p",null,"\u5b83\u6ca1\u6709\u5728\u53ef\u53d8\u53c2\u6570\u6570\u7ec4\u4e2d\u5b58\u50a8\u4efb\u4f55\u4e1c\u897f\uff0c\u5e76\u4e14"),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"it doesn\u2019t make the array (or a clone) visible to untrusted code. If either of\nthese prohibitions is violated, fix it.")),(0,n.kt)("p",null,"\u5b83\u4e0d\u4f1a\u8ba9\u6570\u7ec4\uff08\u6216\u8005\u5176\u526f\u672c\uff09\u51fa\u73b0\u5728\u4e0d\u53ef\u4fe1\u7684\u4ee3\u7801\u4e2d\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u8fd9\u4e9b\u7981\u4ee4\u4e2d\u7684\u4efb\u4f55\u4e00\u6761\uff0c\u5c31\u7ea0\u6b63\u5b83\u3002"),(0,n.kt)("p",null,"Note that the SafeVarargs annotation is legal only on methods that can\u2019t be overridden, because it is impossible to guarantee that every possible overriding method will be safe. In Java 8, the annotation was legal only on static methods and final instance methods; in Java 9, it became legal on private instance methods as well."),(0,n.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0cSafeVarargs \u6ce8\u91ca\u4ec5\u5bf9\u4e0d\u80fd\u8986\u76d6\u7684\u65b9\u6cd5\u5408\u6cd5\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u4fdd\u8bc1\u6240\u6709\u53ef\u80fd\u8986\u76d6\u7684\u65b9\u6cd5\u90fd\u662f\u5b89\u5168\u7684\u3002\u5728 Java 8 \u4e2d\uff0c\u6ce8\u91ca\u4ec5\u5bf9\u9759\u6001\u65b9\u6cd5\u548c\u6700\u7ec8\u5b9e\u4f8b\u65b9\u6cd5\u5408\u6cd5\uff1b\u5728 Java 9 \u4e2d\uff0c\u5b83\u5728\u79c1\u6709\u5b9e\u4f8b\u65b9\u6cd5\u4e0a\u4e5f\u6210\u4e3a\u5408\u6cd5\u7684\u3002"),(0,n.kt)("p",null,"An alternative to using the SafeVarargs annotation is to take the advice of Item 28 and replace the varargs parameter (which is an array in disguise) with a List parameter. Here\u2019s how this approach looks when applied to our flatten method. Note that only the parameter declaration has changed:"),(0,n.kt)("p",null,"\u4f7f\u7528 SafeVarargs \u6ce8\u91ca\u7684\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u63a5\u53d7 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-5-Item-28-Prefer-lists-to-arrays"},"Item-28")," \u7684\u5efa\u8bae\uff0c\u5e76\u7528 List \u53c2\u6570\u66ff\u6362\u53ef\u53d8\u53c2\u6570\uff08\u5b83\u662f\u4e00\u4e2a\u4f2a\u88c5\u7684\u6570\u7ec4\uff09\u3002\u4e0b\u9762\u662f\u5c06\u8fd9\u79cd\u65b9\u6cd5\u5e94\u7528\u5230\u6211\u4eec\u7684 flatten \u65b9\u6cd5\u65f6\u7684\u6548\u679c\u3002\u6ce8\u610f\uff0c\u53ea\u6709\u53c2\u6570\u58f0\u660e\u53d1\u751f\u4e86\u66f4\u6539\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// List as a typesafe alternative to a generic varargs parameter\nstatic <T> List<T> flatten(List<List<? extends T>> lists) {\n  List<T> result = new ArrayList<>();\n  for (List<? extends T> list : lists)\n    result.addAll(list);\n  return result;\n}\n")),(0,n.kt)("p",null,"This method can then be used in conjunction with the static factory method List.of to allow for a variable number of arguments. Note that this approach relies on the fact that the List.of declaration is annotated with @SafeVarargs:"),(0,n.kt)("p",null,"\u7136\u540e\u53ef\u4ee5\u5c06\u6b64\u65b9\u6cd5\u4e0e\u9759\u6001\u5de5\u5382\u65b9\u6cd5 List.of \u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u5141\u8bb8\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002\u6ce8\u610f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4f9d\u8d56\u4e8e List.of \u58f0\u660e\u662f\u7528 @SafeVarargs \u6ce8\u91ca\u7684\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"audience = flatten(List.of(friends, romans, countrymen));\n")),(0,n.kt)("p",null,"The advantage of this approach is that the compiler can prove that the method is typesafe. You don\u2019t have to vouch for its safety with a SafeVarargs annotation, and you don\u2019t have worry that you might have erred in determining that it was safe. The main disadvantage is that the client code is a bit more verbose and may be a bit slower."),(0,n.kt)("p",null,"\u8fd9\u79cd\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\u7f16\u8bd1\u5668\u53ef\u4ee5\u8bc1\u660e\u8be5\u65b9\u6cd5\u662f\u7c7b\u578b\u5b89\u5168\u7684\u3002\u4f60\u4e0d\u5fc5\u4f7f\u7528 SafeVarargs \u6ce8\u91ca\u6765\u4fdd\u8bc1\u5b83\u7684\u5b89\u5168\u6027\uff0c\u4e5f\u4e0d\u5fc5\u62c5\u5fc3\u5728\u786e\u5b9a\u5b83\u7684\u5b89\u5168\u6027\u65f6\u53ef\u80fd\u51fa\u9519\u3002\u4e3b\u8981\u7684\u7f3a\u70b9\u662f\u5ba2\u6237\u7aef\u4ee3\u7801\u6bd4\u8f83\u5197\u957f\uff0c\u53ef\u80fd\u4f1a\u6bd4\u8f83\u6162\u3002"),(0,n.kt)("p",null,"This trick can also be used in situations where it is impossible to write a safe varargs method, as is the case with the toArray method on page 147. Its List analogue is the List.of method, so we don\u2019t even have to write it; the Java libraries authors have done the work for us. The pickTwo method then becomes this:"),(0,n.kt)("p",null,"\u8fd9\u79cd\u6280\u5de7\u4e5f\u53ef\u7528\u4e8e\u65e0\u6cd5\u7f16\u5199\u5b89\u5168\u7684\u53ef\u53d8\u53c2\u6570\u65b9\u6cd5\u7684\u60c5\u51b5\uff0c\u5982\u7b2c 147 \u9875\u4e2d\u7684 toArray \u65b9\u6cd5\u3002\u5b83\u7684\u5217\u8868\u7c7b\u4f3c\u4e8e List.of \u65b9\u6cd5\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u7528\u5199\uff1bJava \u5e93\u7684\u4f5c\u8005\u4e3a\u6211\u4eec\u505a\u4e86\u8fd9\u4e9b\u5de5\u4f5c\u3002pickTwo \u65b9\u6cd5\u53d8\u6210\u8fd9\u6837\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"static <T> List<T> pickTwo(T a, T b, T c) {\n  switch(rnd.nextInt(3)) {\n    case 0: return List.of(a, b);\n    case 1: return List.of(a, c);\n    case 2: return List.of(b, c);\n  }\n  throw new AssertionError();\n}\n")),(0,n.kt)("p",null,"and the main method becomes this:"),(0,n.kt)("p",null,"main \u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'public static void main(String[] args) {\n  List<String> attributes = pickTwo("Good", "Fast", "Cheap");\n}\n')),(0,n.kt)("p",null,"The resulting code is typesafe because it uses only generics, and not arrays."),(0,n.kt)("p",null,"\u751f\u6210\u7684\u4ee3\u7801\u662f\u7c7b\u578b\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u5b83\u53ea\u4f7f\u7528\u6cdb\u578b\uff0c\u800c\u4e0d\u4f7f\u7528\u6570\u7ec4\u3002"),(0,n.kt)("p",null,"In summary, varargs and generics do not interact well because the varargs facility is a leaky abstraction built atop arrays, and arrays have different type rules from generics. Though generic varargs parameters are not typesafe, they are legal. If you choose to write a method with a generic (or parameterized) varargs parameter, first ensure that the method is typesafe, and then annotate it with @SafeVarargs so it is not unpleasant to use."),(0,n.kt)("p",null,"\u603b\u4e4b\uff0c\u53ef\u53d8\u53c2\u6570\u65b9\u6cd5\u548c\u6cdb\u578b\u4e0d\u80fd\u5f88\u597d\u5730\u4ea4\u4e92\uff0c\u56e0\u4e3a\u53ef\u53d8\u53c2\u6570\u5de5\u5177\u662f\u6784\u5efa\u5728\u6570\u7ec4\u4e4b\u4e0a\u7684\u6f0f\u6d1e\u62bd\u8c61\uff0c\u5e76\u4e14\u6570\u7ec4\u5177\u6709\u4e0e\u6cdb\u578b\u4e0d\u540c\u7684\u7c7b\u578b\u89c4\u5219\u3002\u867d\u7136\u6cdb\u578b\u53ef\u53d8\u53c2\u6570\u4e0d\u662f\u7c7b\u578b\u5b89\u5168\u7684\uff0c\u4f46\u5b83\u4eec\u662f\u5408\u6cd5\u7684\u3002\u5982\u679c\u9009\u62e9\u4f7f\u7528\u6cdb\u578b\uff08\u6216\u53c2\u6570\u5316\uff09\u53ef\u53d8\u53c2\u6570\u7f16\u5199\u65b9\u6cd5\uff0c\u9996\u5148\u8981\u786e\u4fdd\u8be5\u65b9\u6cd5\u662f\u7c7b\u578b\u5b89\u5168\u7684\uff0c\u7136\u540e\u4f7f\u7528 @SafeVarargs \u5bf9\u5176\u8fdb\u884c\u6ce8\u91ca\uff0c\u8fd9\u6837\u4f7f\u7528\u8d77\u6765\u5c31\u4e0d\u4f1a\u4ee4\u4eba\u4e0d\u6109\u5feb\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-5-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-5-Item-31-Use-bounded-wildcards-to-increase-API-flexibility"},"Item 31: Use bounded wildcards to increase API flexibility\uff08\u4f7f\u7528\u6709\u754c\u901a\u914d\u7b26\u589e\u52a0 API \u7684\u7075\u6d3b\u6027\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-5-Item-33-Consider-typesafe-heterogeneous-containers"},"Item 33: Consider typesafe heterogeneous containers\uff08\u8003\u8651\u7c7b\u578b\u5b89\u5168\u7684\u5f02\u6784\u5bb9\u5668\uff09")))))}c.isMDXComponent=!0}}]);