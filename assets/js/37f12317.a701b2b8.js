"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[610],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),c=n,d=u["".concat(l,".").concat(c)]||u[c]||h[c]||s;return a?r.createElement(d,i(i({ref:t},m),{},{components:a})):r.createElement(d,i({ref:t},m))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var p=2;p<s;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5406:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const s={},i=void 0,o={unversionedId:"Books/EffectiveJava3/Chapter-7/Chapter-7-Item-45-Use-streams-judiciously",id:"Books/EffectiveJava3/Chapter-7/Chapter-7-Item-45-Use-streams-judiciously",title:"Chapter-7-Item-45-Use-streams-judiciously",description:"Chapter 7. Lambdas and Streams\uff08\u03bb \u8868\u8fbe\u5f0f\u548c\u6d41\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-45-Use-streams-judiciously.md",sourceDirName:"Books/EffectiveJava3/Chapter-7",slug:"/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-45-Use-streams-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-45-Use-streams-judiciously",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-45-Use-streams-judiciously.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces",permalink:"/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces"},next:{title:"Chapter-7-Item-46-Prefer-side-effect-free-functions-in-streams",permalink:"/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-46-Prefer-side-effect-free-functions-in-streams"}},l={},p=[{value:"Chapter 7. Lambdas and Streams\uff08\u03bb \u8868\u8fbe\u5f0f\u548c\u6d41\uff09",id:"chapter-7-lambdas-and-streams\u03bb-\u8868\u8fbe\u5f0f\u548c\u6d41",level:2},{value:"Item 45: Use streams judiciously\uff08\u660e\u667a\u5730\u4f7f\u7528\u6d41\uff09",id:"item-45-use-streams-judiciously\u660e\u667a\u5730\u4f7f\u7528\u6d41",level:3}],m={toc:p};function h(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-7-lambdas-and-streams\u03bb-\u8868\u8fbe\u5f0f\u548c\u6d41"},"Chapter 7. Lambdas and Streams\uff08\u03bb \u8868\u8fbe\u5f0f\u548c\u6d41\uff09"),(0,n.kt)("h3",{id:"item-45-use-streams-judiciously\u660e\u667a\u5730\u4f7f\u7528\u6d41"},"Item 45: Use streams judiciously\uff08\u660e\u667a\u5730\u4f7f\u7528\u6d41\uff09"),(0,n.kt)("p",null,"The streams API was added in Java 8 to ease the task of performing bulk operations, sequentially or in parallel. This API provides two key abstractions: the stream, which represents a finite or infinite sequence of data elements, and the stream pipeline, which represents a multistage computation on these elements. The elements in a stream can come from anywhere. Common sources include collections, arrays, files, regular expression pattern matchers, pseudorandom number generators, and other streams. The data elements in a stream can be object references or primitive values. Three primitive types are supported: int, long, and double."),(0,n.kt)("p",null,"\u5728 Java 8 \u4e2d\u6dfb\u52a0\u4e86\u6d41 API\uff0c\u4ee5\u7b80\u5316\u5e8f\u5217\u6216\u5e76\u884c\u6267\u884c\u6279\u91cf\u64cd\u4f5c\u7684\u4efb\u52a1\u3002\u8fd9\u4e2a API \u63d0\u4f9b\u4e86\u4e24\u4e2a\u5173\u952e\u7684\u62bd\u8c61\uff1a\u6d41\uff08\u8868\u793a\u6709\u9650\u6216\u65e0\u9650\u7684\u6570\u636e\u5143\u7d20\u5e8f\u5217\uff09\u548c\u6d41\u7ba1\u9053\uff08\u8868\u793a\u5bf9\u8fd9\u4e9b\u5143\u7d20\u7684\u591a\u9636\u6bb5\u8ba1\u7b97\uff09\u3002\u6d41\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u6765\u81ea\u4efb\u4f55\u5730\u65b9\u3002\u5e38\u89c1\u7684\u6e90\u5305\u62ec\u96c6\u5408\u3001\u6570\u7ec4\u3001\u6587\u4ef6\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u7684 Pattern \u5339\u914d\u5668\u3001\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u548c\u5176\u4ed6\u6d41\u3002\u6d41\u4e2d\u7684\u6570\u636e\u5143\u7d20\u53ef\u4ee5\u662f\u5bf9\u8c61\u7684\u5f15\u7528\u6216\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3002\u652f\u6301\u4e09\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff1aint\u3001long \u548c double\u3002"),(0,n.kt)("p",null,"A stream pipeline consists of a source stream followed by zero or more intermediate operations and one terminal operation. Each intermediate operation transforms the stream in some way, such as mapping each element to a function of that element or filtering out all elements that do not satisfy some condition. Intermediate operations all transform one stream into another, whose element type may be the same as the input stream or different from it. The terminal operation performs a final computation on the stream resulting from the last intermediate operation, such as storing its elements into a collection, returning a certain element, or printing all of its elements."),(0,n.kt)("p",null,"\u6d41\u7ba1\u9053\u7531\u6e90\u6d41\u3001\u96f6\u4e2a\u6216\u591a\u4e2a Intermediate \u64cd\u4f5c\u548c\u4e00\u4e2a Terminal \u64cd\u4f5c\u7ec4\u6210\u3002\u6bcf\u4e2a Intermediate \u64cd\u4f5c\u4ee5\u67d0\u79cd\u65b9\u5f0f\u8f6c\u6362\u6d41\uff0c\u4f8b\u5982\u5c06\u6bcf\u4e2a\u5143\u7d20\u6620\u5c04\u5230\u8be5\u5143\u7d20\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u6216\u8005\u8fc7\u6ee4\u6389\u4e0d\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u6240\u6709\u5143\u7d20\u3002\u4e2d\u95f4\u64cd\u4f5c\u90fd\u5c06\u4e00\u4e2a\u6d41\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u6d41\uff0c\u5176\u5143\u7d20\u7c7b\u578b\u53ef\u80fd\u4e0e\u8f93\u5165\u6d41\u76f8\u540c\uff0c\u4e5f\u53ef\u80fd\u4e0e\u8f93\u5165\u6d41\u4e0d\u540c\u3002Terminal \u64cd\u4f5c\u5bf9\u6700\u540e\u4e00\u6b21 Intermediate \u64cd\u4f5c\u6240\u4ea7\u751f\u7684\u6d41\u8fdb\u884c\u6700\u7ec8\u8ba1\u7b97\uff0c\u4f8b\u5982\u5c06\u5176\u5143\u7d20\u5b58\u50a8\u5230\u96c6\u5408\u4e2d\u3001\u8fd4\u56de\u7279\u5b9a\u5143\u7d20\u3001\u6216\u6253\u5370\u5176\u6240\u6709\u5143\u7d20\u3002"),(0,n.kt)("p",null,"Stream pipelines are evaluated lazily: evaluation doesn\u2019t start until the terminal operation is invoked, and data elements that aren\u2019t required in order to complete the terminal operation are never computed. This lazy evaluation is what makes it possible to work with infinite streams. Note that a stream pipeline without a terminal operation is a silent no-op, so don\u2019t forget to include one."),(0,n.kt)("p",null,"\u6d41\u7ba1\u9053\u7684\u8ba1\u7b97\u662f\u60f0\u6027\u7684\uff1a\u76f4\u5230\u8c03\u7528 Terminal \u64cd\u4f5c\u65f6\u624d\u5f00\u59cb\u8ba1\u7b97\uff0c\u5e76\u4e14\u5bf9\u5b8c\u6210 Terminal \u64cd\u4f5c\u4e0d\u9700\u8981\u7684\u6570\u636e\u5143\u7d20\u6c38\u8fdc\u4e0d\u4f1a\u8ba1\u7b97\u3002\u8fd9\u79cd\u60f0\u6027\u7684\u6c42\u503c\u673a\u5236\u4f7f\u5f97\u5904\u7406\u65e0\u9650\u6d41\u6210\u4e3a\u53ef\u80fd\u3002\u8bf7\u6ce8\u610f\uff0c\u6ca1\u6709 Terminal \u64cd\u4f5c\u7684\u6d41\u7ba1\u9053\u662f\u65e0\u52a8\u4f5c\u7684\uff0c\u56e0\u6b64\u4e0d\u8981\u5fd8\u8bb0\u5305\u542b\u4e00\u4e2a Terminal \u64cd\u4f5c\u3002"),(0,n.kt)("p",null,"The streams API is fluent: it is designed to allow all of the calls that comprise a pipeline to be chained into a single expression. In fact, multiple pipelines can be chained together into a single expression."),(0,n.kt)("p",null,"\u6d41 API \u662f\u6d41\u7545\u7684\uff1a\u5b83\u88ab\u8bbe\u8ba1\u6210\u5141\u8bb8\u4f7f\u7528\u94fe\u5f0f\u8c03\u7528\u5c06\u7ec4\u6210\u7ba1\u9053\u7684\u6240\u6709\u8c03\u7528\u5199\u5230\u5355\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u3002\u5b9e\u9645\u4e0a\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u7ba1\u9053\u94fe\u63a5\u5230\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u3002"),(0,n.kt)("p",null,"By default, stream pipelines run sequentially. Making a pipeline execute in parallel is as simple as invoking the parallel method on any stream in the pipeline, but it is seldom appropriate to do so (Item 48)."),(0,n.kt)("p",null,"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6d41\u7ba1\u9053\u6309\u987a\u5e8f\u8fd0\u884c\u3002\u8ba9\u7ba1\u9053\u5e76\u884c\u6267\u884c\u4e0e\u5728\u7ba1\u9053\u4e2d\u7684\u4efb\u4f55\u6d41\u4e0a\u8c03\u7528\u5e76\u884c\u65b9\u6cd5\u4e00\u6837\u7b80\u5355\uff0c\u4f46\u662f\u8fd9\u6837\u505a\u4e0d\u4e00\u5b9a\u5408\u9002\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-7-Item-48-Use-caution-when-making-streams-parallel"},"Item-48"),"\uff09\u3002"),(0,n.kt)("p",null,"The streams API is sufficiently versatile that practically any computation can be performed using streams, but just because you can doesn\u2019t mean you should. When used appropriately, streams can make programs shorter and clearer; when used inappropriately, they can make programs difficult to read and maintain. There are no hard and fast rules for when to use streams, but there are heuristics."),(0,n.kt)("p",null,"\u6d41 API \u975e\u5e38\u901a\u7528\uff0c\u5b9e\u9645\u4e0a\u4efb\u4f55\u8ba1\u7b97\u90fd\u53ef\u4ee5\u4f7f\u7528\u6d41\u6765\u6267\u884c\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u5c31\u5e94\u8be5\u8fd9\u6837\u505a\u3002\u5982\u679c\u4f7f\u7528\u5f97\u5f53\uff0c\u6d41\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u66f4\u77ed\u3001\u66f4\u6e05\u6670\uff1b\u5982\u679c\u4f7f\u7528\u4e0d\u5f53\uff0c\u5b83\u4eec\u4f1a\u4f7f\u7a0b\u5e8f\u96be\u4ee5\u8bfb\u53d6\u548c\u7ef4\u62a4\u3002\u5bf9\u4e8e\u4f55\u65f6\u4f7f\u7528\u6d41\u6ca1\u6709\u786c\u6027\u7684\u89c4\u5219\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u542f\u53d1\u5f0f\u7684\u89c4\u5219\u3002"),(0,n.kt)("p",null,'Consider the following program, which reads the words from a dictionary file and prints all the anagram groups whose size meets a user-specified minimum. Recall that two words are anagrams if they consist of the same letters in a different order. The program reads each word from a user-specified dictionary file and places the words into a map. The map key is the word with its letters alphabetized, so the key for "staple" is "aelpst", and the key for "petals" is also "aelpst": the two words are anagrams, and all anagrams share the same alphabetized form (or alphagram, as it is sometimes known). The map value is a list containing all of the words that share an alphabetized form. After the dictionary has been processed, each list is a complete anagram group. The program then iterates through the map\u2019s values() view and prints each list whose size meets the threshold:'),(0,n.kt)("p",null,"\u8003\u8651\u4e0b\u9762\u7684\u7a0b\u5e8f\uff0c\u5b83\u4ece\u5b57\u5178\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5355\u8bcd\u5e76\u6253\u5370\u6240\u6709\u5927\u5c0f\u6ee1\u8db3\u7528\u6237\u6307\u5b9a\u6700\u5c0f\u503c\u7684\u53d8\u4f4d\u7ec4\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u4e24\u4e2a\u5355\u8bcd\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u7531\u76f8\u540c\u7684\u5b57\u6bcd\u7ec4\u6210\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u662f\u5b57\u8c1c\u3002\u8be5\u7a0b\u5e8f\u4ece\u7528\u6237\u6307\u5b9a\u7684\u5b57\u5178\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6bcf\u4e2a\u5355\u8bcd\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5355\u8bcd\u653e\u5165\u4e00\u4e2a Map \u4e2d\u3002Map \u7684\u952e\u662f\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u5355\u8bcd\uff0c\u56e0\u6b64\u300cstaple\u300d\u7684\u952e\u662f\u300caelpst\u300d\uff0c\u800c\u300cpetals\u300d\u7684\u952e\u4e5f\u662f\u300caelpst\u300d\uff1a\u8fd9\u4e24\u4e2a\u5355\u8bcd\u662f\u5b57\u8c1c\uff0c\u6240\u6709\u7684\u5b57\u8c1c\u90fd\u6709\u76f8\u540c\u7684\u5b57\u6bcd\u6392\u5217\u5f62\u5f0f\uff08\u6709\u65f6\u79f0\u4e3a\u5b57\u6bcd\u56fe\uff09\u3002Map \u7684\u503c\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u5171\u4eab\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u8868\u5355\u7684\u6240\u6709\u5355\u8bcd\u3002\u5728\u5b57\u5178\u88ab\u5904\u7406\u4e4b\u540e\uff0c\u6bcf\u4e2a\u5217\u8868\u90fd\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u5b57\u8c1c\u7ec4\u3002\u7136\u540e\uff0c\u8be5\u7a0b\u5e8f\u904d\u5386 Map \u7684 values() \u89c6\u56fe\uff0c\u5e76\u6253\u5370\u5927\u5c0f\u6ee1\u8db3\u9608\u503c\u7684\u6bcf\u4e2a\u5217\u8868\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'// Prints all large anagram groups in a dictionary iteratively\npublic class Anagrams {\n    public static void main(String[] args) throws IOException {\n        File dictionary = new File(args[0]);\n        int minGroupSize = Integer.parseInt(args[1]);\n        Map<String, Set<String>> groups = new HashMap<>();\n        try (Scanner s = new Scanner(dictionary)) {\n            while (s.hasNext()) {\n                String word = s.next();\n                groups.computeIfAbsent(alphabetize(word),(unused) -> new TreeSet<>()).add(word);\n            }\n        }\n        for (Set<String> group : groups.values())\n        if (group.size() >= minGroupSize)\n            System.out.println(group.size() + ": " + group);\n    }\n\n    private static String alphabetize(String s) {\n        char[] a = s.toCharArray();\n        Arrays.sort(a);\n        return new String(a);\n    }\n}\n')),(0,n.kt)("p",null,"One step in this program is worthy of note. The insertion of each word into the map, which is shown in bold, uses the computeIfAbsent method, which was added in Java 8. This method looks up a key in the map: If the key is present, the method simply returns the value associated with it. If not, the method computes a value by applying the given function object to the key, associates this value with the key, and returns the computed value. The computeIfAbsent method simplifies the implementation of maps that associate multiple values with each key."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a\u6b65\u9aa4\u503c\u5f97\u6ce8\u610f\u3002\u5c06\u6bcf\u4e2a\u5355\u8bcd\u63d2\u5165\u5230 Map \u4e2d\uff08\u4ee5\u7c97\u4f53\u663e\u793a\uff09\u4f7f\u7528 computeIfAbsent \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u662f\u5728 Java 8 \u4e2d\u6dfb\u52a0\u7684\u3002\u6b64\u65b9\u6cd5\u5728 Map \u4e2d\u67e5\u627e\u952e\uff1a\u5982\u679c\u952e\u5b58\u5728\uff0c\u5219\u8be5\u65b9\u6cd5\u4ec5\u8fd4\u56de\u4e0e\u5176\u5173\u8054\u7684\u503c\u3002\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u8be5\u65b9\u6cd5\u901a\u8fc7\u5c06\u7ed9\u5b9a\u7684\u51fd\u6570\u5bf9\u8c61\u5e94\u7528\u4e8e\u952e\u6765\u8ba1\u7b97\u4e00\u4e2a\u503c\uff0c\u5c06\u8be5\u503c\u4e0e\u952e\u5173\u8054\uff0c\u5e76\u8fd4\u56de\u8ba1\u7b97\u7684\u503c\u3002computeIfAbsent \u65b9\u6cd5\u7b80\u5316\u4e86\u5c06\u591a\u4e2a\u503c\u4e0e\u6bcf\u4e2a\u952e\u5173\u8054\u7684 Map \u7684\u5b9e\u73b0\u3002"),(0,n.kt)("p",null,"Now consider the following program, which solves the same problem, but makes heavy use of streams. Note that the entire program, with the exception of the code that opens the dictionary file, is contained in a single expression. The only reason the dictionary is opened in a separate expression is to allow the use of the try-with-resources statement, which ensures that the dictionary file is closed:"),(0,n.kt)("p",null,"\u73b0\u5728\u8003\u8651\u4e0b\u9762\u7684\u7a0b\u5e8f\uff0c\u5b83\u89e3\u51b3\u4e86\u76f8\u540c\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5927\u91cf\u4f7f\u7528\u4e86\u6d41\u3002\u6ce8\u610f\uff0c\u9664\u4e86\u6253\u5f00\u5b57\u5178\u6587\u4ef6\u7684\u4ee3\u7801\u4e4b\u5916\uff0c\u6574\u4e2a\u7a0b\u5e8f\u90fd\u5305\u542b\u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u3002\u5728\u5355\u72ec\u7684\u8868\u8fbe\u5f0f\u4e2d\u6253\u5f00\u5b57\u5178\u7684\u552f\u4e00\u539f\u56e0\u662f\u5141\u8bb8\u4f7f\u7528 ",(0,n.kt)("inlineCode",{parentName:"p"},"try with-resources")," \u8bed\u53e5\uff0c\u8be5\u8bed\u53e5\u786e\u4fdd\u5b57\u5178\u6587\u4ef6\u662f\u5173\u95ed\u7684\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'// Overuse of streams - don\'t do this!\npublic class Anagrams {\n    public static void main(String[] args) throws IOException {\n        Path dictionary = Paths.get(args[0]);\n        int minGroupSize = Integer.parseInt(args[1]);\n        try (Stream<String> words = Files.lines(dictionary)) {\n            words.collect(\n            groupingBy(word -> word.chars().sorted()\n            .collect(StringBuilder::new,(sb, c) -> sb.append((char) c),\n            StringBuilder::append).toString()))\n            .values().stream()\n            .filter(group -> group.size() >= minGroupSize)\n            .map(group -> group.size() + ": " + group)\n            .forEach(System.out::println);\n        }\n    }\n}\n')),(0,n.kt)("p",null,"If you find this code hard to read, don\u2019t worry; you\u2019re not alone. It is shorter, but it is also less readable, especially to programmers who are not experts in the use of streams. Overusing streams makes programs hard to read and maintain. Luckily, there is a happy medium. The following program solves the same problem, using streams without overusing them. The result is a program that\u2019s both shorter and clearer than the original:"),(0,n.kt)("p",null,"\u5982\u679c\u4f60\u53d1\u73b0\u8fd9\u6bb5\u4ee3\u7801\u96be\u4ee5\u9605\u8bfb\uff0c\u4e0d\u8981\u62c5\u5fc3\uff1b\u4e0d\u5355\u662f\u4f60\u6709\u8fd9\u6837\u7684\u611f\u89c9\u3002\u5b83\u867d\u7136\u66f4\u77ed\uff0c\u4f46\u53ef\u8bfb\u6027\u4e5f\u66f4\u5dee\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u4e0d\u64c5\u957f\u6d41\u4f7f\u7528\u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\u3002\u8fc7\u5ea6\u4f7f\u7528\u6d41\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u96be\u4ee5\u8bfb\u53d6\u548c\u7ef4\u62a4\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u6298\u8877\u7684\u529e\u6cd5\u3002\u4e0b\u9762\u7684\u7a0b\u5e8f\u89e3\u51b3\u4e86\u76f8\u540c\u7684\u95ee\u9898\uff0c\u5728\u4e0d\u8fc7\u5ea6\u4f7f\u7528\u6d41\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u6d41\u3002\u7ed3\u679c\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u6bd4\u539f\u6765\u7684\u7a0b\u5e8f\u66f4\u77ed\uff0c\u4e5f\u66f4\u6e05\u6670\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'// Tasteful use of streams enhances clarity and conciseness\npublic class Anagrams {\n    public static void main(String[] args) throws IOException {\n        Path dictionary = Paths.get(args[0]);\n        int minGroupSize = Integer.parseInt(args[1]);\n        try (Stream<String> words = Files.lines(dictionary)) {\n            words.collect(groupingBy(word -> alphabetize(word)))\n            .values().stream()\n            .filter(group -> group.size() >= minGroupSize)\n            .forEach(g -> System.out.println(g.size() + ": " + g));\n        }\n    }\n    // alphabetize method is the same as in original version\n}\n')),(0,n.kt)("p",null,"Even if you have little previous exposure to streams, this program is not hard to understand. It opens the dictionary file in a try-with-resources block, obtaining a stream consisting of all the lines in the file. The stream variable is named words to suggest that each element in the stream is a word. The pipeline on this stream has no intermediate operations; its terminal operation collects all the words into a map that groups the words by their alphabetized form (Item 46). This is exactly the same map that was constructed in both previous versions of the program. Then a new ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream<List<String>>")," is opened on the values() view of the map. The elements in this stream are, of course, the anagram groups. The stream is filtered so that all of the groups whose size is less than minGroupSize are ignored, and finally, the remaining groups are printed by the terminal operation forEach."),(0,n.kt)("p",null,"\u5373\u4f7f\u4f60\u4ee5\u524d\u5f88\u5c11\u63a5\u89e6\u6d41\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4e5f\u4e0d\u96be\u7406\u89e3\u3002\u5b83\u5728\u5e26\u6709\u8d44\u6e90\u7684 try \u5757\u4e2d\u6253\u5f00\u5b57\u5178\u6587\u4ef6\uff0c\u83b7\u5f97\u7531\u6587\u4ef6\u4e2d\u6240\u6709\u884c\u7ec4\u6210\u7684\u6d41\u3002\u6d41\u53d8\u91cf\u540d\u4e3a words\uff0c\u8868\u793a\u6d41\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5355\u8bcd\u3002\u6b64\u6d41\u4e0a\u7684\u7ba1\u9053\u6ca1\u6709 Intermediate \u64cd\u4f5c\uff1b\u5b83\u7684 Terminal \u64cd\u4f5c\u5c06\u6240\u6709\u5355\u8bcd\u6536\u96c6\u5230\u4e00\u4e2a Map \u4e2d\uff0c\u8be5 Map \u6309\u5b57\u6bcd\u987a\u5e8f\u5c06\u5355\u8bcd\u5206\u7ec4\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-7-Item-46-Prefer-side-effect-free-functions-in-streams"},"Item-46"),"\uff09\u3002\u8fd9\u4e0e\u5728\u7a0b\u5e8f\u7684\u524d\u4e24\u4e2a\u7248\u672c\u4e2d\u6784\u9020\u7684 Map \u5b8c\u5168\u76f8\u540c\u3002\u7136\u540e\u5728 Map \u7684 values() \u89c6\u56fe\u4e0a\u6253\u5f00\u4e00\u4e2a\u65b0\u7684 ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream<List<String>>"),"\u3002\u8fd9\u4e2a\u6d41\u4e2d\u7684\u5143\u7d20\u5f53\u7136\u662f\u5b57\u8c1c\u7ec4\u3002\u5bf9\u6d41\u8fdb\u884c\u8fc7\u6ee4\uff0c\u4ee5\u4fbf\u5ffd\u7565\u6240\u6709\u5927\u5c0f\u5c0f\u4e8e minGroupSize \u7684\u7ec4\uff0c\u6700\u540e\uff0cTerminal \u64cd\u4f5c forEach \u6253\u5370\u5176\u4f59\u7ec4\u3002"),(0,n.kt)("p",null,"Note that the lambda parameter names were chosen carefully. The parameter g should really be named group, but the resulting line of code would be too wide for the book. ",(0,n.kt)("strong",{parentName:"p"},"In the absence of explicit types, careful naming of lambda parameters is essential to the readability of stream pipelines.")),(0,n.kt)("p",null,"\u6ce8\u610f\uff0clambda \u8868\u8fbe\u5f0f\u53c2\u6570\u540d\u79f0\u662f\u7ecf\u8fc7\u4ed4\u7ec6\u9009\u62e9\u7684\u3002\u53c2\u6570 g \u5b9e\u9645\u4e0a\u5e94\u8be5\u547d\u540d\u4e3a group\uff0c\u4f46\u662f\u751f\u6210\u7684\u4ee3\u7801\u884c\u5bf9\u4e8e\u672c\u4e66\u6392\u7248\u6765\u8bf4\u592a\u5bbd\u4e86\u3002",(0,n.kt)("strong",{parentName:"p"},"\u5728\u6ca1\u6709\u663e\u5f0f\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\uff0clambda \u8868\u8fbe\u5f0f\u53c2\u6570\u7684\u8c28\u614e\u547d\u540d\u5bf9\u4e8e\u6d41\u7ba1\u9053\u7684\u53ef\u8bfb\u6027\u81f3\u5173\u91cd\u8981\u3002")),(0,n.kt)("p",null,"Note also that word alphabetization is done in a separate alphabetize method. This enhances readability by providing a name for the operation and keeping implementation details out of the main program. ",(0,n.kt)("strong",{parentName:"p"},"Using helper methods is even more important for readability in stream pipelines than in iterative code")," because pipelines lack explicit type information and named temporary variables."),(0,n.kt)("p",null,"\u8fd8\u8981\u6ce8\u610f\uff0c\u5355\u8bcd\u7684\u5b57\u6bcd\u5316\u662f\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u6bcd\u5316\u65b9\u6cd5\u4e2d\u5b8c\u6210\u7684\u3002\u8fd9\u901a\u8fc7\u4e3a\u64cd\u4f5c\u63d0\u4f9b\u4e00\u4e2a\u540d\u79f0\u5e76\u5c06\u5b9e\u73b0\u7ec6\u8282\u6392\u9664\u5728\u4e3b\u7a0b\u5e8f\u4e4b\u5916\uff0c\u4ece\u800c\u589e\u5f3a\u4e86\u53ef\u8bfb\u6027\u3002",(0,n.kt)("strong",{parentName:"p"},"\u5728\u6d41\u7ba1\u9053\u4e2d\u4f7f\u7528 helper \u65b9\u6cd5\u6bd4\u5728\u8fed\u4ee3\u4ee3\u7801\u4e2d\u66f4\u91cd\u8981"),"\uff0c\u56e0\u4e3a\u7ba1\u9053\u7f3a\u5c11\u663e\u5f0f\u7c7b\u578b\u4fe1\u606f\u548c\u547d\u540d\u7684\u4e34\u65f6\u53d8\u91cf\u3002"),(0,n.kt)("p",null,"The alphabetize method could have been reimplemented to use streams, but a stream-based alphabetize method would have been less clear, more difficult to write correctly, and probably slower. These deficiencies result from Java\u2019s lack of support for primitive char streams (which is not to imply that Java should have supported char streams; it would have been infeasible to do so). To demonstrate the hazards of processing char values with streams, consider the following code:"),(0,n.kt)("p",null,"\u672c\u6765\u53ef\u4ee5\u91cd\u65b0\u5b9e\u73b0\u5b57\u6bcd\u987a\u5e8f\u65b9\u6cd5\u6765\u4f7f\u7528\u6d41\uff0c\u4f46\u662f\u57fa\u4e8e\u6d41\u7684\u5b57\u6bcd\u987a\u5e8f\u65b9\u6cd5\u5c31\u4e0d\u90a3\u4e48\u6e05\u6670\u4e86\uff0c\u66f4\u96be\u4e8e\u6b63\u786e\u5730\u7f16\u5199\uff0c\u800c\u4e14\u53ef\u80fd\u4f1a\u66f4\u6162\u3002\u8fd9\u4e9b\u7f3a\u9677\u662f\u7531\u4e8e Java \u4e0d\u652f\u6301\u57fa\u672c\u5b57\u7b26\u6d41\uff08\u8fd9\u5e76\u4e0d\u610f\u5473\u7740 Java \u5e94\u8be5\u652f\u6301\u5b57\u7b26\u6d41\uff1b\u8fd9\u6837\u505a\u662f\u4e0d\u53ef\u884c\u7684\uff09\u3002\u8981\u6f14\u793a\u4f7f\u7528\u6d41\u5904\u7406 char \u503c\u7684\u5371\u5bb3\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u4ee3\u7801\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'"Hello world!".chars().forEach(System.out::print);\n')),(0,n.kt)("p",null,'You might expect it to print Hello world!, but if you run it, you\u2019ll find that it prints 721011081081113211911111410810033. This happens because the elements of the stream returned by "Hello world!".chars() are not char values but int values, so the int overloading of print is invoked. It is admittedly confusing that a method named chars returns a stream of int values. You could fix the program by using a cast to force the invocation of the correct overloading:'),(0,n.kt)("p",null,"\u4f60\u53ef\u80fd\u5e0c\u671b\u5b83\u6253\u5370 Hello world!\uff0c\u4f46\u5982\u679c\u8fd0\u884c\u5b83\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u6253\u5370 721011081081113211911111410810033\u3002\u8fd9\u662f\u56e0\u4e3a ",(0,n.kt)("inlineCode",{parentName:"p"},'"Hello world!".chars()')," \u8fd4\u56de\u7684\u6d41\u5143\u7d20\u4e0d\u662f char \u503c\uff0c\u800c\u662f int \u503c\uff0c\u56e0\u6b64\u8c03\u7528\u4e86 print \u7684 int \u91cd\u8f7d\u3002\u65e0\u53ef\u5426\u8ba4\uff0c\u4e00\u4e2a\u540d\u4e3a chars \u7684\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a int \u503c\u6d41\u662f\u4ee4\u4eba\u56f0\u60d1\u7684\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5f3a\u5236\u8c03\u7528\u6b63\u786e\u7684\u91cd\u8f7d\u6765\u4fee\u590d\u7a0b\u5e8f\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'"Hello world!".chars().forEach(x -> System.out.print((char) x));\n')),(0,n.kt)("p",null,"but ideally you should refrain from using streams to process char values. When you start using streams, you may feel the urge to convert all your loops into streams, but resist the urge. While it may be possible, it will likely harm the readability and maintainability of your code base. As a rule, even moderately complex tasks are best accomplished using some combination of streams and iteration, as illustrated by the Anagrams programs above. So ",(0,n.kt)("strong",{parentName:"p"},"refactor existing code to use streams and use them in new code only where it makes sense to do so.")),(0,n.kt)("p",null,"\u4f46\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u907f\u514d\u4f7f\u7528\u6d41\u6765\u5904\u7406 char \u503c\u3002\u5f53\u4f60\u5f00\u59cb\u4f7f\u7528\u6d41\u65f6\uff0c\u4f60\u53ef\u80fd\u4f1a\u6709\u5c06\u6240\u6709\u5faa\u73af\u8f6c\u6362\u4e3a\u6d41\u7684\u51b2\u52a8\uff0c\u4f46\u662f\u8981\u62b5\u5236\u8fd9\u79cd\u51b2\u52a8\u3002\u867d\u7136\u8fd9\u662f\u53ef\u5b9e\u65bd\u7684\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u635f\u5bb3\u4ee3\u7801\u5e93\u7684\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002\u901a\u5e38\uff0c\u5373\u4f7f\u662f\u4e2d\u7b49\u590d\u6742\u7684\u4efb\u52a1\uff0c\u4e5f\u6700\u597d\u4f7f\u7528\u6d41\u548c\u8fed\u4ee3\u7684\u67d0\u79cd\u7ec4\u5408\u6765\u5b8c\u6210\uff0c\u5982\u4e0a\u9762\u7684 Anagrams \u7a0b\u5e8f\u6240\u793a\u3002\u56e0\u6b64\uff0c",(0,n.kt)("strong",{parentName:"p"},"\u91cd\u6784\u73b0\u6709\u4ee3\u7801\u6216\u662f\u5728\u65b0\u4ee3\u7801\u4e2d\uff0c\u90fd\u5e94\u8be5\u5728\u5408\u9002\u7684\u573a\u666f\u4f7f\u7528\u6d41\u3002")),(0,n.kt)("p",null,"As shown in the programs in this item, stream pipelines express repeated computation using function objects (typically lambdas or method references), while iterative code expresses repeated computation using code blocks. There are some things you can do from code blocks that you can\u2019t do from function objects:"),(0,n.kt)("p",null,"\u5982\u672c\u9879\u4e2d\u7684\u7a0b\u5e8f\u6240\u793a\uff0c\u6d41\u7ba1\u9053\u4f7f\u7528\u51fd\u6570\u5bf9\u8c61\uff08\u901a\u5e38\u662f lambda \u8868\u8fbe\u5f0f\u6216\u65b9\u6cd5\u5f15\u7528\uff09\u8868\u793a\u91cd\u590d\u8ba1\u7b97\uff0c\u800c\u8fed\u4ee3\u4ee3\u7801\u4f7f\u7528\u4ee3\u7801\u5757\u8868\u793a\u91cd\u590d\u8ba1\u7b97\u3002\u6709\u4e9b\u4e8b\u60c5\u4f60\u53ef\u4ee5\u5bf9\u4ee3\u7801\u5757\u505a\uff0c\u800c\u4f60\u4e0d\u80fd\u5bf9\u51fd\u6570\u5bf9\u8c61\u505a\uff1a"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"From a code block, you can read or modify any local variable in scope; from a lambda, you can only read final or effectively final variables ","[JLS 4.12.4]",", and you can\u2019t modify any local variables.")),(0,n.kt)("p",null,"\u4ece\u4ee3\u7801\u5757\u4e2d\uff0c\u53ef\u4ee5\u8bfb\u53d6\u6216\u4fee\u6539\u4f5c\u7528\u57df\u4e2d\u7684\u4efb\u4f55\u5c40\u90e8\u53d8\u91cf\uff1b\u5728 lambda \u8868\u8fbe\u5f0f\u4e2d\uff0c\u53ea\u80fd\u8bfb\u53d6 final \u6216\u6709\u6548\u7684 final \u53d8\u91cf ","[JLS 4.12.4]","\uff0c\u4e0d\u80fd\u4fee\u6539\u4efb\u4f55\u5c40\u90e8\u53d8\u91cf\u3002"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"From a code block, you can return from the enclosing method, break or continue an enclosing loop, or throw any checked exception that this method is declared to throw; from a lambda you can do none of these things.")),(0,n.kt)("p",null,"\u4ece\u4ee3\u7801\u5757\u4e2d\uff0c\u53ef\u4ee5\u4ece\u5c01\u95ed\u65b9\u6cd5\u8fd4\u56de\u3001\u4e2d\u65ad\u6216\u7ee7\u7eed\u5c01\u95ed\u5faa\u73af\uff0c\u6216\u629b\u51fa\u58f0\u660e\u8981\u629b\u51fa\u7684\u4efb\u4f55\u5df2\u68c0\u67e5\u5f02\u5e38\uff1b\u5728 lambda \u8868\u8fbe\u5f0f\u4e2d\uff0c\u4f60\u4e0d\u80fd\u505a\u8fd9\u4e9b\u4e8b\u60c5\u3002"),(0,n.kt)("p",null,"If a computation is best expressed using these techniques, then it\u2019s probably not a good match for streams. Conversely, streams make it very easy to do some things:"),(0,n.kt)("p",null,"\u5982\u679c\u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\u6700\u597d\u5730\u8868\u8fbe\u8ba1\u7b97\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u4e0d\u9002\u5408\u6d41\u3002\u76f8\u53cd\uff0c\u6d41\u4f7f\u505a\u4e00\u4e9b\u4e8b\u60c5\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff1a"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Uniformly transform sequences of elements")),(0,n.kt)("p",null,"\u5143\u7d20\u5e8f\u5217\u7684\u4e00\u81f4\u53d8\u6362"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Filter sequences of elements")),(0,n.kt)("p",null,"\u8fc7\u6ee4\u5143\u7d20\u5e8f\u5217"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Combine sequences of elements using a single operation (for example to add them, concatenate them, or compute their minimum)")),(0,n.kt)("p",null,"\u4f7f\u7528\u5355\u4e2a\u64cd\u4f5c\u7ec4\u5408\u5143\u7d20\u5e8f\u5217\uff08\u4f8b\u5982\u6dfb\u52a0\u5b83\u4eec\u3001\u8fde\u63a5\u5b83\u4eec\u6216\u8ba1\u7b97\u5b83\u4eec\u7684\u6700\u5c0f\u503c\uff09"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Accumulate sequences of elements into a collection, perhaps grouping them by some common attribute")),(0,n.kt)("p",null,"\u5c06\u5143\u7d20\u5e8f\u5217\u7d2f\u79ef\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u53ef\u80fd\u662f\u6309\u67d0\u4e2a\u516c\u5171\u5c5e\u6027\u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u7ec4"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Search a sequence of elements for an element satisfying some criterion")),(0,n.kt)("p",null,"\u5728\u5143\u7d20\u5e8f\u5217\u4e2d\u641c\u7d22\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u5143\u7d20"),(0,n.kt)("p",null,"If a computation is best expressed using these techniques, then it is a good candidate for streams."),(0,n.kt)("p",null,"\u5982\u679c\u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\u80fd\u591f\u6700\u597d\u5730\u8868\u8fbe\u8ba1\u7b97\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u6d41\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f7f\u7528\u573a\u666f\u3002"),(0,n.kt)("p",null,"One thing that is hard to do with streams is to access corresponding elements from multiple stages of a pipeline simultaneously: once you map a value to some other value, the original value is lost. One workaround is to map each value to a pair object containing the original value and the new value, but this is not a satisfying solution, especially if the pair objects are required for multiple stages of a pipeline. The resulting code is messy and verbose, which defeats a primary purpose of streams. When it is applicable, a better workaround is to invert the mapping when you need access to the earlier-stage value."),(0,n.kt)("p",null,"\u4f7f\u7528\u6d41\u5f88\u96be\u505a\u5230\u7684\u4e00\u4ef6\u4e8b\u662f\u4ece\u7ba1\u9053\u7684\u591a\u4e2a\u9636\u6bb5\u540c\u65f6\u8bbf\u95ee\u76f8\u5e94\u7684\u5143\u7d20\uff1a\u4e00\u65e6\u4f60\u5c06\u4e00\u4e2a\u503c\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u503c\uff0c\u539f\u59cb\u503c\u5c31\u4f1a\u4e22\u5931\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u6bcf\u4e2a\u503c\u6620\u5c04\u5230\u5305\u542b\u539f\u59cb\u503c\u548c\u65b0\u503c\u7684 pair \u5bf9\u8c61\uff0c\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u4ee4\u4eba\u6ee1\u610f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u7279\u522b\u662f\u5982\u679c\u7ba1\u9053\u7684\u591a\u4e2a\u9636\u6bb5\u90fd\u9700\u8981 pair \u5bf9\u8c61\u7684\u8bdd\u3002\u751f\u6210\u7684\u4ee3\u7801\u6df7\u4e71\u800c\u5197\u957f\uff0c\u8fd9\u8fdd\u80cc\u4e86\u6d41\u7684\u4e3b\u8981\u76ee\u7684\u3002\u5f53\u5b83\u9002\u7528\u65f6\uff0c\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5728\u9700\u8981\u8bbf\u95ee\u65e9\u671f\u9636\u6bb5\u503c\u65f6\u53cd\u8f6c\u6620\u5c04\u3002"),(0,n.kt)("p",null,"For example, let\u2019s write a program to print the first twenty Mersenne primes. To refresh your memory, a Mersenne number is a number of the form 2p \u2212 1. If p is prime, the corresponding Mersenne number may be prime; if so, it\u2019s a Mersenne prime. As the initial stream in our pipeline, we want all the prime numbers. Here\u2019s a method to return that (infinite) stream. We assume a static import has been used for easy access to the static members of BigInteger:"),(0,n.kt)("p",null,"\u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u6253\u5370\u524d 20 \u4e2a Mersenne \u7d20\u6570\u3002\u5237\u65b0\u4f60\u7684\u8bb0\u5fc6,\u4e00\u4e2a Mersenne \u7d20\u6570\u7684\u6570\u91cf\u662f\u4e00\u4e2a\u6570\u5b57\u5f62\u5f0f 2p \u2212 1\u3002\u5982\u679c p \u662f\u7d20\u6570\uff0c\u5bf9\u5e94\u7684 Mersenne \u6570\u53ef\u4ee5\u662f\u7d20\u6570\uff1b\u5982\u679c\u662f\u7684\u8bdd\uff0c\u8fd9\u5c31\u662f Mersenne \u7d20\u6570\u3002\u4f5c\u4e3a\u7ba1\u9053\u4e2d\u7684\u521d\u59cb\u6d41\uff0c\u6211\u4eec\u9700\u8981\u6240\u6709\u8d28\u6570\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u8fd4\u56de\uff08\u65e0\u9650\uff09\u6d41\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u5047\u8bbe\u5df2\u7ecf\u4f7f\u7528\u9759\u6001\u5bfc\u5165\u6765\u65b9\u4fbf\u5730\u8bbf\u95ee BigInteger \u7684\u9759\u6001\u6210\u5458\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"static Stream<BigInteger> primes() {\n    return Stream.iterate(TWO, BigInteger::nextProbablePrime);\n}\n")),(0,n.kt)("p",null,"The name of the method (primes) is a plural noun describing the elements of the stream. This naming convention is highly recommended for all methods that return streams because it enhances the readability of stream pipelines. The method uses the static factory Stream.iterate, which takes two parameters: the first element in the stream, and a function to generate the next element in the stream from the previous one. Here is the program to print the first twenty Mersenne primes:"),(0,n.kt)("p",null,"\u65b9\u6cd5\u7684\u540d\u79f0\uff08\u7d20\u6570\uff09\u662f\u63cf\u8ff0\u6d41\u5143\u7d20\u7684\u590d\u6570\u540d\u8bcd\u3002\u5f3a\u70c8\u63a8\u8350\u6240\u6709\u8fd4\u56de\u6d41\u7684\u65b9\u6cd5\u4f7f\u7528\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\uff0c\u56e0\u4e3a\u5b83\u589e\u5f3a\u4e86\u6d41\u7ba1\u9053\u7684\u53ef\u8bfb\u6027\u3002\u8be5\u65b9\u6cd5\u4f7f\u7528\u9759\u6001\u5de5\u5382 ",(0,n.kt)("inlineCode",{parentName:"p"},"Stream.iterate"),"\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u6d41\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u4ece\u524d\u4e00\u4e2a\u5143\u7d20\u751f\u6210\u6d41\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u4e0b\u9762\u662f\u6253\u5370\u524d 20 \u4e2a Mersenne \u7d20\u6570\u7684\u7a0b\u5e8f\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"public static void main(String[] args) {\n    primes().map(p -> TWO.pow(p.intValueExact()).subtract(ONE))\n    .filter(mersenne -> mersenne.isProbablePrime(50))\n    .limit(20)\n    .forEach(System.out::println);\n}\n")),(0,n.kt)("p",null,"This program is a straightforward encoding of the prose description above: it starts with the primes, computes the corresponding Mersenne numbers, filters out all but the primes (the magic number 50 controls the probabilistic primality test), limits the resulting stream to twenty elements, and prints them out."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u4e0a\u8ff0\u6563\u6587\u63cf\u8ff0\u7684\u4e00\u4e2a\u7b80\u5355\u7f16\u7801\uff1a\u5b83\u4ece\u7d20\u6570\u5f00\u59cb\uff0c\u8ba1\u7b97\u76f8\u5e94\u7684 Mersenne \u6570\uff0c\u8fc7\u6ee4\u6389\u9664\u7d20\u6570\u4ee5\u5916\u7684\u6240\u6709\u7d20\u6570\uff08\u9b54\u6cd5\u6570\u5b57 50 \u63a7\u5236\u6982\u7387\u7d20\u6570\u6d4b\u8bd5\uff09\uff0c\u5c06\u7ed3\u679c\u6d41\u9650\u5236\u4e3a 20 \u4e2a\u5143\u7d20\uff0c\u5e76\u6253\u5370\u51fa\u6765\u3002"),(0,n.kt)("p",null,"Now suppose that we want to precede each Mersenne prime with its exponent (p). This value is present only in the initial stream, so it is inaccessible in the terminal operation, which prints the results. Luckily, it\u2019s easy to compute the exponent of a Mersenne number by inverting the mapping that took place in the first intermediate operation. The exponent is simply the number of bits in the binary representation, so this terminal operation generates the desired result:"),(0,n.kt)("p",null,"\u73b0\u5728\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u5728\u6bcf\u4e2a Mersenne \u7d20\u6570\u4e4b\u524d\u52a0\u4e0a\u5b83\u7684\u6307\u6570 (p)\uff0c\u8fd9\u4e2a\u503c\u53ea\u5728\u521d\u59cb\u6d41\u4e2d\u5b58\u5728\uff0c\u56e0\u6b64\u5728\u8f93\u51fa\u7ed3\u679c\u7684\u7ec8\u7aef\u64cd\u4f5c\u4e2d\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u901a\u8fc7\u5bf9\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u64cd\u4f5c\u4e2d\u53d1\u751f\u7684\u6620\u5c04\u6c42\u9006\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8ba1\u7b97\u51fa Mersenne \u6570\u7684\u6307\u6570\u3002\u6307\u6570\u4ec5\u4ec5\u662f\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u6bd4\u7279\u6570\uff0c\u56e0\u6b64\u8fd9\u4e2a\u7ec8\u7aef\u64cd\u4f5c\u4ea7\u751f\u4e86\u60f3\u8981\u7684\u7ed3\u679c\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'.forEach(mp -> System.out.println(mp.bitLength() + ": " + mp));\n')),(0,n.kt)("p",null,"There are plenty of tasks where it is not obvious whether to use streams or iteration. For example, consider the task of initializing a new deck of cards. Assume that Card is an immutable value class that encapsulates a Rank and a Suit, both of which are enum types. This task is representative of any task that requires computing all the pairs of elements that can be chosen from two sets. Mathematicians call this the Cartesian product of the two sets. Here\u2019s an iterative implementation with a nested for-each loop that should look very familiar to you:"),(0,n.kt)("p",null,"\u5728\u8bb8\u591a\u4efb\u52a1\u4e2d\uff0c\u4f7f\u7528\u6d41\u8fd8\u662f\u8fed\u4ee3\u5e76\u4e0d\u660e\u663e\u3002\u4f8b\u5982\uff0c\u8003\u8651\u521d\u59cb\u5316\u4e00\u526f\u65b0\u7eb8\u724c\u7684\u4efb\u52a1\u3002\u5047\u8bbe Card \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u503c\u7c7b\uff0c\u5b83\u5c01\u88c5\u4e86 Rank \u548c Suit\uff0c\u5b83\u4eec\u90fd\u662f enum \u7c7b\u578b\u3002\u6b64\u4efb\u52a1\u4ee3\u8868\u9700\u8981\u8ba1\u7b97\u53ef\u4ece\u4e24\u4e2a\u96c6\u5408\u4e2d\u9009\u62e9\u7684\u6240\u6709\u5143\u7d20\u5bf9\u7684\u4efb\u4f55\u4efb\u52a1\u3002\u6570\u5b66\u5bb6\u79f0\u4e4b\u4e3a\u8fd9\u4e24\u4e2a\u96c6\u5408\u7684\u7b1b\u5361\u5c14\u79ef\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5d4c\u5957 for-each \u5faa\u73af\u7684\u8fed\u4ee3\u5b9e\u73b0\uff0c\u4f60\u5e94\u8be5\u975e\u5e38\u719f\u6089\u5b83\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Iterative Cartesian product computation\nprivate static List<Card> newDeck() {\n    List<Card> result = new ArrayList<>();\n    for (Suit suit : Suit.values())\n    for (Rank rank : Rank.values())\n    result.add(new Card(suit, rank));\n    return result;\n}\n")),(0,n.kt)("p",null,"And here is a stream-based implementation that makes use of the intermediate operation flatMap. This operation maps each element in a stream to a stream and then concatenates all of these new streams into a single stream (or flattens them). Note that this implementation contains a nested lambda, shown in boldface:"),(0,n.kt)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u57fa\u4e8e\u6d41\u7684\u5b9e\u73b0\uff0c\u5b83\u4f7f\u7528\u4e86\u4e2d\u95f4\u64cd\u4f5c flatMap\u3002\u6b64\u64cd\u4f5c\u5c06\u6d41\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u6620\u5c04\u5230\u6d41\uff0c\u7136\u540e\u5c06\u6240\u6709\u8fd9\u4e9b\u65b0\u6d41\u8fde\u63a5\u5230\u5355\u4e2a\u6d41\u4e2d\uff08\u6216\u5c06\u5176\u6241\u5e73\u5316\uff09\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u5b9e\u73b0\u5305\u542b\u4e00\u4e2a\u5d4c\u5957 lambda \u8868\u8fbe\u5f0f\uff0c\u7528\u7c97\u4f53\u663e\u793a:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Stream-based Cartesian product computation\nprivate static List<Card> newDeck() {\n    return Stream.of(Suit.values())\n    .flatMap(suit ->Stream.of(Rank.values())\n    .map(rank -> new Card(suit, rank)))\n    .collect(toList());\n}\n")),(0,n.kt)("p",null,"Which of the two versions of newDeck is better? It boils down to personal preference and the environment in which you\u2019re programming. The first version is simpler and perhaps feels more natural. A larger fraction of Java programmers will be able to understand and maintain it, but some programmers will feel more comfortable with the second (stream-based) version. It\u2019s a bit more concise and not too difficult to understand if you\u2019re reasonably well-versed in streams and functional programming. If you\u2019re not sure which version you prefer, the iterative version is probably the safer choice. If you prefer the stream version and you believe that other programmers who will work with the code will share your preference, then you should use it."),(0,n.kt)("p",null,"\u4e24\u4e2a\u7248\u672c\u7684 newDeck \u54ea\u4e2a\u66f4\u597d\uff1f\u8fd9\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4e2a\u4eba\u504f\u597d\u548c\u7f16\u7a0b\u73af\u5883\u3002\u7b2c\u4e00\u4e2a\u7248\u672c\u66f4\u7b80\u5355\uff0c\u53ef\u80fd\u611f\u89c9\u66f4\u81ea\u7136\u3002\u5927\u90e8\u5206 Java \u7a0b\u5e8f\u5458\u5c06\u80fd\u591f\u7406\u89e3\u548c\u7ef4\u62a4\u5b83\uff0c\u4f46\u662f\u4e00\u4e9b\u7a0b\u5e8f\u5458\u5c06\u5bf9\u7b2c\u4e8c\u4e2a\uff08\u57fa\u4e8e\u6d41\u7684\uff09\u7248\u672c\u611f\u5230\u66f4\u8212\u670d\u3002\u5982\u679c\u4f60\u76f8\u5f53\u7cbe\u901a\u6d41\u548c\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u90a3\u4e48\u5b83\u4f1a\u66f4\u7b80\u6d01\uff0c\u4e5f\u4e0d\u4f1a\u592a\u96be\u7406\u89e3\u3002\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\u4f60\u66f4\u559c\u6b22\u54ea\u4e2a\u7248\u672c\uff0c\u8fed\u4ee3\u7248\u672c\u53ef\u80fd\u662f\u66f4\u5b89\u5168\u7684\u9009\u62e9\u3002\u5982\u679c\u4f60\u66f4\u559c\u6b22\u6d41\u7248\u672c\uff0c\u5e76\u4e14\u76f8\u4fe1\u4e0e\u4ee3\u7801\u4e00\u8d77\u5de5\u4f5c\u7684\u5176\u4ed6\u7a0b\u5e8f\u5458\u4e5f\u4f1a\u5206\u4eab\u4f60\u7684\u504f\u597d\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u4f7f\u7528\u5b83\u3002"),(0,n.kt)("p",null,"In summary, some tasks are best accomplished with streams, and others with iteration. Many tasks are best accomplished by combining the two approaches. There are no hard and fast rules for choosing which approach to use for a task, but there are some useful heuristics. In many cases, it will be clear which approach to use; in some cases, it won\u2019t. If you\u2019re not sure whether a task is better served by streams or iteration, try both and see which works better."),(0,n.kt)("p",null,"\u603b\u4e4b\uff0c\u6709\u4e9b\u4efb\u52a1\u6700\u597d\u4f7f\u7528\u6d41\u6765\u5b8c\u6210\uff0c\u6709\u4e9b\u4efb\u52a1\u6700\u597d\u4f7f\u7528\u8fed\u4ee3\u6765\u5b8c\u6210\u3002\u8bb8\u591a\u4efb\u52a1\u6700\u597d\u901a\u8fc7\u7ed3\u5408\u8fd9\u4e24\u79cd\u65b9\u6cd5\u6765\u5b8c\u6210\u3002\u5bf9\u4e8e\u9009\u62e9\u4efb\u52a1\u4f7f\u7528\u54ea\u79cd\u65b9\u6cd5\uff0c\u6ca1\u6709\u786c\u6027\u7684\u89c4\u5219\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u6709\u7528\u7684\u542f\u53d1\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u54ea\u79cd\u65b9\u6cd5\u662f\u6e05\u695a\u7684\uff1b\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5f88\u96be\u51b3\u5b9a\u3002\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\u4e00\u4e2a\u4efb\u52a1\u662f\u901a\u8fc7\u6d41\u8fd8\u662f\u901a\u8fc7\u8fed\u4ee3\u66f4\u597d\u5730\u5b8c\u6210\uff0c\u90a3\u4e48\u540c\u65f6\u5c1d\u8bd5\u8fd9\u4e24\u79cd\u65b9\u6cd5\uff0c\u770b\u770b\u54ea\u4e00\u79cd\u66f4\u6709\u6548\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-7-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces"},"Item 44: Favor the use of standard functional interfaces\uff08\u4f18\u5148\u4f7f\u7528\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-7-Item-46-Prefer-side-effect-free-functions-in-streams"},"Item 46: Prefer side effect free functions in streams\uff08\u5728\u6d41\u4e2d\u4f7f\u7528\u65e0\u526f\u4f5c\u7528\u7684\u51fd\u6570\uff09")))))}h.isMDXComponent=!0}}]);