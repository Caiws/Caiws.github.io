"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6218],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),h=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=h(e.components);return o.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=h(r),u=n,m=d["".concat(s,".").concat(u)]||d[u]||l[u]||a;return r?o.createElement(m,i(i({ref:t},p),{},{components:r})):o.createElement(m,i({ref:t},p))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var h=2;h<a;h++)i[h]=r[h];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4866:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var o=r(7462),n=(r(7294),r(3905));const a={},i=void 0,c={unversionedId:"Books/EffectiveJava3/Chapter-10/Chapter-10-Item-70-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors",id:"Books/EffectiveJava3/Chapter-10/Chapter-10-Item-70-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors",title:"Chapter-10-Item-70-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors",description:"Chapter 10. Exceptions\uff08\u5f02\u5e38\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-70-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors.md",sourceDirName:"Books/EffectiveJava3/Chapter-10",slug:"/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-70-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors",permalink:"/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-70-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-70-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-10-Item-69-Use-exceptions-only-for-exceptional-conditions",permalink:"/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-69-Use-exceptions-only-for-exceptional-conditions"},next:{title:"Chapter-10-Item-71-Avoid-unnecessary-use-of-checked-exceptions",permalink:"/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-71-Avoid-unnecessary-use-of-checked-exceptions"}},s={},h=[{value:"Chapter 10. Exceptions\uff08\u5f02\u5e38\uff09",id:"chapter-10-exceptions\u5f02\u5e38",level:2},{value:"Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors\uff08\u5bf9\u53ef\u6062\u590d\u60c5\u51b5\u4f7f\u7528 checked \u5f02\u5e38\uff0c\u5bf9\u7f16\u7a0b\u9519\u8bef\u4f7f\u7528\u8fd0\u884c\u65f6\u5f02\u5e38\uff09",id:"item-70-use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors\u5bf9\u53ef\u6062\u590d\u60c5\u51b5\u4f7f\u7528-checked-\u5f02\u5e38\u5bf9\u7f16\u7a0b\u9519\u8bef\u4f7f\u7528\u8fd0\u884c\u65f6\u5f02\u5e38",level:3}],p={toc:h};function l(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-10-exceptions\u5f02\u5e38"},"Chapter 10. Exceptions\uff08\u5f02\u5e38\uff09"),(0,n.kt)("h3",{id:"item-70-use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors\u5bf9\u53ef\u6062\u590d\u60c5\u51b5\u4f7f\u7528-checked-\u5f02\u5e38\u5bf9\u7f16\u7a0b\u9519\u8bef\u4f7f\u7528\u8fd0\u884c\u65f6\u5f02\u5e38"},"Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors\uff08\u5bf9\u53ef\u6062\u590d\u60c5\u51b5\u4f7f\u7528 checked \u5f02\u5e38\uff0c\u5bf9\u7f16\u7a0b\u9519\u8bef\u4f7f\u7528\u8fd0\u884c\u65f6\u5f02\u5e38\uff09"),(0,n.kt)("p",null,"Java provides three kinds of throwables: checked exceptions, runtime exceptions, and errors. There is some confusion among programmers as to when it is appropriate to use each kind of throwable. While the decision is not always clear-cut, there are some general rules that provide strong guidance."),(0,n.kt)("p",null,"Java \u63d0\u4f9b\u4e86\u4e09\u79cd\u53ef\u629b\u51fa\u9879\uff1achecked \u5f02\u5e38\u3001\u8fd0\u884c\u65f6\u5f02\u5e38\u548c\u9519\u8bef\u3002\u7a0b\u5e8f\u5458\u4eec\u5bf9\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u8fd9\u4e9b\u53ef\u629b\u51fa\u9879\u6bd4\u8f83\u56f0\u60d1\u3002\u867d\u7136\u51b3\u7b56\u5e76\u4e0d\u603b\u662f\u660e\u786e\u7684\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u901a\u7528\u89c4\u5219\u53ef\u4ee5\u63d0\u4f9b\u5f3a\u6709\u529b\u7684\u6307\u5bfc\u3002"),(0,n.kt)("p",null,"The cardinal rule in deciding whether to use a checked or an unchecked exception is this: ",(0,n.kt)("strong",{parentName:"p"},"use checked exceptions for conditions from which the caller can reasonably be expected to recover.")," By throwing a checked exception, you force the caller to handle the exception in a catch clause or to propagate it outward. Each checked exception that a method is declared to throw is therefore a potent indication to the API user that the associated condition is a possible outcome of invoking the method."),(0,n.kt)("p",null,"\u51b3\u5b9a\u662f\u4f7f\u7528 checked \u5f02\u5e38\u8fd8\u662f unchecked \u5f02\u5e38\u7684\u57fa\u672c\u89c4\u5219\u662f\uff1a",(0,n.kt)("strong",{parentName:"p"},"\u4f7f\u7528 checked \u5f02\u5e38\u7684\u60c5\u51b5\u662f\u4e3a\u4e86\u5408\u7406\u5730\u671f\u671b\u8c03\u7528\u8005\u80fd\u591f\u4ece\u4e2d\u6062\u590d\u3002")," \u901a\u8fc7\u629b\u51fa\u4e00\u4e2a checked \u7684\u5f02\u5e38\uff0c\u4f60\u53ef\u4ee5\u5f3a\u5236\u8c03\u7528\u8005\u5728 catch \u5b50\u53e5\u4e2d\u5904\u7406\u5f02\u5e38\uff0c\u6216\u8005\u5c06\u5176\u4f20\u64ad\u51fa\u53bb\u3002\u56e0\u6b64\uff0c\u65b9\u6cd5\u4e2d\u58f0\u660e\u7684\u8981\u629b\u51fa\u7684\u6bcf\u4e2a checked \u5f02\u5e38\uff0c\u90fd\u6e05\u695a\u7684\u5411 API \u7528\u6237\u8868\u660e\uff1athe associated condition is a possible outcome of invoking the method."),(0,n.kt)("p",null,"By confronting the user with a checked exception, the API designer presents a mandate to recover from the condition. The user can disregard the mandate by catching the exception and ignoring it, but this is usually a bad idea (Item 77)."),(0,n.kt)("p",null,"\u901a\u8fc7\u5411\u7528\u6237\u63d0\u4f9b checked \u5f02\u5e38\uff0cAPI \u8bbe\u8ba1\u8005\u63d0\u4f9b\u4e86\u4ece\u6761\u4ef6\u4e2d\u6062\u590d\u7684\u8981\u6c42\u3002\u7528\u6237\u4e3a\u4e86\u65e0\u89c6\u5f3a\u5236\u8981\u6c42\uff0c\u53ef\u4ee5\u6355\u83b7\u5f02\u5e38\u5e76\u5ffd\u7565\uff0c\u4f46\u8fd9\u901a\u5e38\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-77-Don%E2%80%99t-ignore-exceptions"},"Item-77"),"\uff09\n\u3002"),(0,n.kt)("p",null,"There are two kinds of unchecked throwables: runtime exceptions and errors. They are identical in their behavior: both are throwables that needn\u2019t, and generally shouldn\u2019t, be caught. If a program throws an unchecked exception or an error, it is generally the case that recovery is impossible and continued execution would do more harm than good. If a program does not catch such a throwable, it will cause the current thread to halt with an appropriate error message."),(0,n.kt)("p",null,"\u6709\u4e24\u79cd unchecked \u7684\u53ef\u629b\u51fa\u9879\uff1a\u8fd0\u884c\u65f6\u5f02\u5e38\u548c\u9519\u8bef\u3002\u5b83\u4eec\u5728\u884c\u4e3a\u4e0a\u662f\u4e00\u6837\u7684\uff1a\u90fd\u662f\u53ef\u629b\u51fa\u7684\uff0c\u901a\u5e38\u4e0d\u9700\u8981\u4e5f\u4e0d\u5e94\u8be5\u88ab\u6355\u83b7\u3002\u5982\u679c\u7a0b\u5e8f\u629b\u51fa unchecked \u5f02\u5e38\u6216\u9519\u8bef\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u662f\u4e0d\u53ef\u80fd\u6062\u590d\u7684\uff0c\u5982\u679c\u7ee7\u7eed\u6267\u884c\uff0c\u5f0a\u5927\u4e8e\u5229\u3002\u5982\u679c\u7a0b\u5e8f\u6ca1\u6709\u6355\u83b7\u5230\u8fd9\u6837\u7684\u53ef\u629b\u51fa\u9879\uff0c\u5b83\u5c06\u5bfc\u81f4\u5f53\u524d\u7ebf\u7a0b\u505c\u6b62\uff0c\u5e76\u53d1\u51fa\u9002\u5f53\u7684\u9519\u8bef\u6d88\u606f\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Use runtime exceptions to indicate programming errors.")," The great majority of runtime exceptions indicate precondition violations. A precondition violation is simply a failure by the client of an API to adhere to the contract established by the API specification. For example, the contract for array access specifies that the array index must be between zero and the array length minus one, inclusive. ArrayIndexOutOfBoundsException indicates that this precondition was violated."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u4f7f\u7528\u8fd0\u884c\u65f6\u5f02\u5e38\u6765\u6307\u793a\u7f16\u7a0b\u9519\u8bef\u3002")," \u7edd\u5927\u591a\u6570\u8fd0\u884c\u65f6\u5f02\u5e38\u90fd\u8868\u793a\u64cd\u4f5c\u8fdd\u53cd\u4e86\u5148\u51b3\u6761\u4ef6\u3002\u8fdd\u53cd\u5148\u51b3\u6761\u4ef6\u662f\u6307\u4f7f\u7528 API \u7684\u5ba2\u6237\u7aef\u672a\u80fd\u9075\u5b88 API \u89c4\u8303\u6240\u5efa\u7acb\u7684\u7ea6\u5b9a\u3002\u4f8b\u5982\uff0c\u6570\u7ec4\u8bbf\u95ee\u7ea6\u5b9a\u6307\u5b9a\u6570\u7ec4\u7d22\u5f15\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e 0 \u5e76\u4e14\u5c0f\u4e8e\u7b49\u4e8e length-1 \uff08length\uff1a\u6570\u7ec4\u957f\u5ea6\uff09\u3002ArrayIndexOutOfBoundsException \u8868\u793a\u8fdd\u53cd\u4e86\u6b64\u5148\u51b3\u6761\u4ef6\u3002"),(0,n.kt)("p",null,"One problem with this advice is that it is not always clear whether you\u2019re dealing with a recoverable conditions or a programming error. For example, consider the case of resource exhaustion, which can be caused by a programming error such as allocating an unreasonably large array, or by a genuine shortage of resources. If resource exhaustion is caused by a temporary shortage or by temporarily heightened demand, the condition may well be recoverable. It is a matter of judgment on the part of the API designer whether a given instance of resource exhaustion is likely to allow for recovery. If you believe a condition is likely to allow for recovery, use a checked exception; if not, use a runtime exception. If it isn\u2019t clear whether recovery is possible, you\u2019re probably better off using an unchecked exception, for reasons discussed in Item 71."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u5efa\u8bae\u5b58\u5728\u7684\u95ee\u9898\u662f\uff0c\u5e76\u4e0d\u603b\u80fd\u6e05\u695a\u662f\u5728\u5904\u7406\u53ef\u6062\u590d\u7684\u6761\u4ef6\u8fd8\u662f\u7f16\u7a0b\u9519\u8bef\u3002\u4f8b\u5982\uff0c\u8003\u8651\u8d44\u6e90\u8017\u5c3d\u7684\u60c5\u51b5\uff0c\u8fd9\u53ef\u80fd\u662f\u7531\u7f16\u7a0b\u9519\u8bef\uff08\u5982\u5206\u914d\u4e00\u4e2a\u4e0d\u5408\u7406\u7684\u5927\u6570\u7ec4\uff09\u6216\u771f\u6b63\u7684\u8d44\u6e90\u77ed\u7f3a\u9020\u6210\u7684\u3002\u5982\u679c\u8d44\u6e90\u67af\u7aed\u662f\u7531\u4e8e\u6682\u65f6\u77ed\u7f3a\u6216\u6682\u65f6\u9700\u6c42\u589e\u52a0\u9020\u6210\u7684\uff0c\u8fd9\u79cd\u60c5\u51b5\u5f88\u53ef\u80fd\u662f\u53ef\u4ee5\u6062\u590d\u7684\u3002\u5bf9\u4e8e API \u8bbe\u8ba1\u4eba\u5458\u6765\u8bf4\uff0c\u5224\u65ad\u7ed9\u5b9a\u7684\u8d44\u6e90\u8017\u5c3d\u5b9e\u4f8b\u662f\u5426\u5141\u8bb8\u6062\u590d\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u67d0\u4e2a\u6761\u4ef6\u53ef\u80fd\u5141\u8bb8\u6062\u590d\uff0c\u8bf7\u4f7f\u7528 checked \u5f02\u5e38\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u5219\u4f7f\u7528\u8fd0\u884c\u65f6\u5f02\u5e38\u3002\u5982\u679c\u4e0d\u6e05\u695a\u662f\u5426\u53ef\u4ee5\u6062\u590d\uff0c\u6700\u597d\u4f7f\u7528 unchecked \u5f02\u5e38\uff0c\u539f\u56e0\u5c06\u5728 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-71-Avoid-unnecessary-use-of-checked-exceptions"},"Item-71")," \u4e2d\u8ba8\u8bba\u3002"),(0,n.kt)("p",null,"While the Java Language Specification does not require it, there is a strong convention that errors are reserved for use by the JVM to indicate resource deficiencies, invariant failures, or other conditions that make it impossible to continue execution. Given the almost universal acceptance of this convention, it\u2019s best not to implement any new Error subclasses. Therefore, ",(0,n.kt)("strong",{parentName:"p"},"all of the unchecked throwables you implement should subclass RuntimeException")," (directly or indirectly). Not only shouldn\u2019t you define Error subclasses, but with the exception of AssertionError, you shouldn\u2019t throw them either."),(0,n.kt)("p",null,"\u867d\u7136 Java \u8bed\u8a00\u89c4\u8303\u6ca1\u6709\u8981\u6c42\uff0c\u4f46\u6709\u4e00\u4e2a\u7ea6\u5b9a\u4fd7\u6210\u7684\u7ea6\u5b9a\uff0c\u5373\u9519\u8bef\u4fdd\u7559\u7ed9 JVM \u4f7f\u7528\uff0c\u4ee5\u6307\u793a\uff1a\u8d44\u6e90\u4e0d\u8db3\u3001\u4e0d\u53ef\u6062\u590d\u6545\u969c\u6216\u5176\u4ed6\u5bfc\u81f4\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\u7684\u6761\u4ef6\u3002\u8003\u8651\u5230\u8fd9\u79cd\u7ea6\u5b9a\u88ab\u5927\u4f17\u8ba4\u53ef\uff0c\u6240\u4ee5\u6700\u597d\u4e0d\u8981\u5b9e\u73b0\u4efb\u4f55\u65b0\u7684 Error \u5b50\u7c7b\u3002\u56e0\u6b64\uff0c",(0,n.kt)("strong",{parentName:"p"},"\u4f60\u5b9e\u73b0\u7684\u6240\u6709 unchecked \u53ef\u629b\u51fa\u9879\u90fd\u5e94\u8be5\u7ee7\u627f RuntimeException"),"\uff08\u76f4\u63a5\u6216\u95f4\u63a5\uff09\u3002\u4e0d\u4ec5\u4e0d\u5e94\u8be5\u5b9a\u4e49 Error \u5b50\u7c7b\uff0c\u800c\u4e14\u9664\u4e86 AssertionError \u4e4b\u5916\uff0c\u4e0d\u5e94\u8be5\u629b\u51fa\u5b83\u4eec\u3002"),(0,n.kt)("p",null,"It is possible to define a throwable that is not a subclass of Exception, RuntimeException, or Error. The JLS doesn\u2019t address such throwables directly but specifies implicitly that they behave as ordinary checked exceptions (which are subclasses of Exception but not RuntimeException). So when should you use such a beast? In a word, never. They have no benefits over ordinary checked exceptions and would serve merely to confuse the user of your API."),(0,n.kt)("p",null,"\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u79cd\u53ef\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u5b83\u4e0d\u662f Exception\u3001RuntimeException \u6216 Error \u7684\u5b50\u7c7b\u3002JLS \u4e0d\u76f4\u63a5\u5904\u7406\u8fd9\u4e9b\u53ef\u629b\u51fa\u9879\uff0c\u800c\u662f\u9690\u5f0f\u5730\u6307\u5b9a\u5b83\u4eec\u4f5c\u4e3a\u666e\u901a checked \u5f02\u5e38\uff08\u666e\u901a checked \u5f02\u5e38\u662f Exception \u7684\u5b50\u7c7b\uff0c\u4f46\u4e0d\u662f RuntimeException \u7684\u5b50\u7c7b\uff09\u3002\u90a3\u4e48\uff0c\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u4f7f\u7528\u8fd9\u6837\u7684\u300c\u731b\u517d\u300d\u5462\uff1f\u603b\u4e4b\uff0c\u6c38\u8fdc\u4e0d\u8981\u3002\u4e0e\u666e\u901a checked \u5f02\u5e38\u76f8\u6bd4\uff0c\u5b83\u4eec\u6ca1\u6709\u4efb\u4f55\u597d\u5904\uff0c\u53ea\u4f1a\u8ba9 API \u7684\u7528\u6237\u611f\u5230\u56f0\u60d1\u3002"),(0,n.kt)("p",null,"API designers often forget that exceptions are full-fledged objects on which arbitrary methods can be defined. The primary use of such methods is to provide code that catches the exception with additional information concerning the condition that caused the exception to be thrown. In the absence of such methods, programmers have been known to parse the string representation of an exception to ferret out additional information. This is extremely bad practice (Item 12). Throwable classes seldom specify the details of their string representations, so string representations can differ from implementation to implementation and release to release. Therefore, code that parses the string representation of an exception is likely to be nonportable and fragile."),(0,n.kt)("p",null,"API \u8bbe\u8ba1\u4eba\u5458\u5e38\u5e38\u5fd8\u8bb0\u5f02\u5e38\u662f\u6210\u719f\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4e3a\u5176\u5b9a\u4e49\u4efb\u610f\u65b9\u6cd5\u3002\u6b64\u7c7b\u65b9\u6cd5\u7684\u4e3b\u8981\u7528\u9014\u662f\u63d0\u4f9b\u6355\u83b7\u5f02\u5e38\u7684\u4ee3\u7801\uff0c\u5e76\u63d0\u4f9b\u6709\u5173\u5f15\u53d1\u5f02\u5e38\u7684\u9644\u52a0\u4fe1\u606f\u3002\u5982\u679c\u7f3a\u4e4f\u6b64\u7c7b\u65b9\u6cd5\uff0c\u7a0b\u5e8f\u5458\u9700\u8981\u81ea\u884c\u89e3\u6790\u5f02\u5e38\u7684\u5b57\u7b26\u4e32\u8868\u793a\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002\u8fd9\u662f\u6781\u574f\u7684\u505a\u6cd5\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-12-Always-override-toString"},"Item-12"),"\uff09\u3002\u8fd9\u79cd\u7c7b\u5f88\u5c11\u6307\u5b9a\u5176\u5b57\u7b26\u4e32\u8868\u793a\u7684\u7ec6\u8282\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u8868\u793a\u53ef\u80fd\u56e0\u5b9e\u73b0\u800c\u5f02\uff0c\u4e5f\u53ef\u80fd\u56e0\u7248\u672c\u800c\u5f02\u3002\u56e0\u6b64\uff0c\u89e3\u6790\u5f02\u5e38\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u7684\u4ee3\u7801\u53ef\u80fd\u662f\u4e0d\u53ef\u79fb\u690d\u4e14\u8106\u5f31\u7684\u3002"),(0,n.kt)("p",null,"Because checked exceptions generally indicate recoverable conditions, it\u2019s especially important for them to provide methods that furnish information to help the caller recover from the exceptional condition. For example, suppose a checked exception is thrown when an attempt to make a purchase with a gift card fails due to insufficient funds. The exception should provide an accessor method to query the amount of the shortfall. This will enable the caller to relay the amount to the shopper. See Item 75 for more on this topic."),(0,n.kt)("p",null,"\u56e0\u4e3a checked \u5f02\u5e38\u901a\u5e38\u8868\u793a\u53ef\u6062\u590d\u7684\u6761\u4ef6\uff0c\u6240\u4ee5\u8fd9\u7c7b\u5f02\u5e38\u6765\u8bf4\uff0c\u8bbe\u8ba1\u80fd\u591f\u63d0\u4f9b\u4fe1\u606f\u7684\u65b9\u6cd5\u6765\u5e2e\u52a9\u8c03\u7528\u8005\u4ece\u5f02\u5e38\u6761\u4ef6\u4e2d\u6062\u590d\u5c24\u4e3a\u91cd\u8981\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u5f53\u4f7f\u7528\u793c\u54c1\u5361\u8d2d\u7269\u7531\u4e8e\u8d44\u91d1\u4e0d\u8db3\u800c\u5931\u8d25\u65f6\uff0c\u629b\u51fa\u4e00\u4e2a checked \u5f02\u5e38\u3002\u8be5\u5f02\u5e38\u5e94\u63d0\u4f9b\u4e00\u4e2a\u8bbf\u95ee\u5668\u65b9\u6cd5\u6765\u67e5\u8be2\u5dee\u989d\u3002\u8fd9\u5c06\u4f7f\u8c03\u7528\u8005\u80fd\u591f\u5c06\u91d1\u989d\u4f20\u9012\u7ed9\u8d2d\u7269\u8005\u3002\u6709\u5173\u6b64\u4e3b\u9898\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-75-Include-failure-capture-information-in-detail-messages"},"Item-75"),"\u3002"),(0,n.kt)("p",null,"To summarize, throw checked exceptions for recoverable conditions and unchecked exceptions for programming errors. When in doubt, throw unchecked exceptions. Don\u2019t define any throwables that are neither checked exceptions nor runtime exceptions. Provide methods on your checked exceptions to aid in recovery."),(0,n.kt)("p",null,"\u603b\u800c\u8a00\u4e4b\uff0c\u4e3a\u53ef\u6062\u590d\u6761\u4ef6\u629b\u51fa checked \u5f02\u5e38\uff0c\u4e3a\u7f16\u7a0b\u9519\u8bef\u629b\u51fa unchecked \u5f02\u5e38\u3002\u5f53\u6709\u7591\u95ee\u65f6\uff0c\u629b\u51fa unchecked \u5f02\u5e38\u3002\u4e0d\u8981\u5b9a\u4e49\u4efb\u4f55\u65e2\u4e0d\u662f checked \u5f02\u5e38\u4e5f\u4e0d\u662f\u8fd0\u884c\u65f6\u5f02\u5e38\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u3002\u5e94\u8be5\u4e3a checked \u5f02\u5e38\u8bbe\u8ba1\u76f8\u5173\u7684\u65b9\u6cd5\uff0c\u5982\u63d0\u4f9b\u5f02\u5e38\u4fe1\u606f\uff0c\u4ee5\u5e2e\u52a9\u6062\u590d\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-10/Chapter-10-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-10/Chapter-10-Item-69-Use-exceptions-only-for-exceptional-conditions"},"Item 69: Use exceptions only for exceptional conditions\uff08\u4ec5\u5728\u786e\u6709\u5f02\u5e38\u6761\u4ef6\u4e0b\u4f7f\u7528\u5f02\u5e38\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-10/Chapter-10-Item-71-Avoid-unnecessary-use-of-checked-exceptions"},"Item 71: Avoid unnecessary use of checked exceptions\uff08\u907f\u514d\u4e0d\u5fc5\u8981\u5730\u4f7f\u7528 checked \u5f02\u5e38\uff09")))))}l.isMDXComponent=!0}}]);