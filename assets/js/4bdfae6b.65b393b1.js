"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3454],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),h=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=h(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=h(r),m=n,d=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return r?o.createElement(d,i(i({ref:t},c),{},{components:r})):o.createElement(d,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var h=2;h<a;h++)i[h]=r[h];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},374:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>h});var o=r(7462),n=(r(7294),r(3905));const a={},i=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-3/Chapter-3-Item-12-Always-override-toString",id:"Books/EffectiveJava3/Chapter-3/Chapter-3-Item-12-Always-override-toString",title:"Chapter-3-Item-12-Always-override-toString",description:"Chapter 3. Methods Common to All Objects\uff08\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-12-Always-override-toString.md",sourceDirName:"Books/EffectiveJava3/Chapter-3",slug:"/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-12-Always-override-toString",permalink:"/docs/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-12-Always-override-toString",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-12-Always-override-toString.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals",permalink:"/docs/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals"},next:{title:"Chapter-3-Item-13-Override-clone-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-13-Override-clone-judiciously"}},l={},h=[{value:"Chapter 3. Methods Common to All Objects\uff08\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5\uff09",id:"chapter-3-methods-common-to-all-objects\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5",level:2},{value:"Item 12: Always override toString\uff08\u59cb\u7ec8\u8986\u76d6 toString \u65b9\u6cd5\uff09",id:"item-12-always-override-tostring\u59cb\u7ec8\u8986\u76d6-tostring-\u65b9\u6cd5",level:3}],c={toc:h};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-3-methods-common-to-all-objects\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5"},"Chapter 3. Methods Common to All Objects\uff08\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5\uff09"),(0,n.kt)("h3",{id:"item-12-always-override-tostring\u59cb\u7ec8\u8986\u76d6-tostring-\u65b9\u6cd5"},"Item 12: Always override toString\uff08\u59cb\u7ec8\u8986\u76d6 toString \u65b9\u6cd5\uff09"),(0,n.kt)("p",null,"While Object provides an implementation of the toString method, the string that it returns is generally not what the user of your class wants to see. It consists of\uff08\u7531\u2026\u7ec4\u6210\uff09 the class name followed by an \u201cat\u201d sign (@) and the unsigned hexadecimal representation of the hash code, for example,PhoneNumber@163b91. The general contract for toString says that the returned string should be \u201ca concise but informative representation that is easy for a person to read.\u201d While it could be argued that PhoneNumber@163b91 is concise and easy to read, it isn\u2019t very informative when compared to 707-867-5309. The toString contract goes on to say, \u201cIt is recommended that all subclasses override this method.\u201d Good advice, indeed!"),(0,n.kt)("p",null,"\u867d\u7136 Object \u63d0\u4f9b toString \u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u4f46\u5b83\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u901a\u5e38\u4e0d\u662f\u7c7b\u7684\u7528\u6237\u5e0c\u671b\u770b\u5230\u7684\u3002\u5b83\u7531\u540e\u8ddf\u300cat\u300d\u7b26\u53f7\uff08@\uff09\u7684\u7c7b\u540d\u548c hash \u4ee3\u7801\u7684\u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236\u8868\u793a\uff08\u4f8b\u5982 PhoneNumber@163b91\uff09\u7ec4\u6210\u3002toString \u7684\u901a\u7528\u7ea6\u5b9a\u662f\u8fd9\u4e48\u63cf\u8ff0\u7684\uff0c\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u5e94\u8be5\u662f\u300c\u7b80\u6d01\u4f46\u4fe1\u606f\u4e30\u5bcc\u7684\u8868\u793a\uff0c\u6613\u4e8e\u9605\u8bfb\u300d\u3002\u867d\u7136\u6709\u4eba\u8ba4\u4e3a PhoneNumber@163b91 \u7b80\u6d01\u6613\u61c2\uff0c\u4f46\u4e0e 707-867-5309 \u76f8\u6bd4\uff0c\u5b83\u7684\u4fe1\u606f\u91cf\u5e76\u4e0d\u5927\u3002toString \u7ea6\u5b9a\u63a5\u7740\u63cf\u8ff0\uff0c\u300c\u5efa\u8bae\u6240\u6709\u5b50\u7c7b\u8986\u76d6\u6b64\u65b9\u6cd5\u3002\u300d\u597d\u5efa\u8bae\uff0c\u786e\u5b9e\uff01"),(0,n.kt)("p",null,"While it isn\u2019t as critical as obeying the equals and hashCode contracts (Items 10 and 11), ",(0,n.kt)("strong",{parentName:"p"},"providing a good toString implementation makes your class much more pleasant to use and makes systems using the class easier to debug.")," The toString method is automatically invoked when an object is passed to println, printf, the string concatenation operator, or assert, or is printed by a debugger. Even if you never call toString on an object, others may. For example, a component that has a reference to your object may include the string representation of the object in a logged error message. If you fail to override toString, the message may be all but useless."),(0,n.kt)("p",null,"\u867d\u7136\u5b83\u4e0d\u5982\u9075\u5b88 equals \u548c hashCode \u7ea6\u5b9a\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-10-Obey-the-general-contract-when-overriding-equals"},"Item-10")," \u548c ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals"},"Item-11"),"\uff09\u90a3\u4e48\u91cd\u8981\uff0c\u4f46\u662f ",(0,n.kt)("strong",{parentName:"p"},"\u63d0\u4f9b\u4e00\u4e2a\u597d\u7684 toString \u5b9e\u73b0\uff08\u80fd\uff09\u4f7f\u7c7b\u66f4\u6613\u4e8e\u4f7f\u7528\uff0c\u4f7f\u7528\u8be5\u7c7b\u7684\u7cfb\u7edf\uff08\u4e5f\uff09\u66f4\u6613\u4e8e\u8c03\u8bd5\u3002")," \u5f53\u5bf9\u8c61\u88ab\u4f20\u9012\u7ed9 println\u3001printf\u3001\u5b57\u7b26\u4e32\u8fde\u63a5\u64cd\u4f5c\u7b26\u6216\u65ad\u8a00\u6216\u7531\u8c03\u8bd5\u5668\u6253\u5370\u65f6\uff0c\u5c06\u81ea\u52a8\u8c03\u7528 toString \u65b9\u6cd5\u3002\u5373\u4f7f\u4f60\u4ece\u6765\u6ca1\u6709\u8c03\u7528 toString \u5bf9\u8c61\uff0c\u5176\u4ed6\u4eba\u4e5f\u53ef\u80fd\uff08\u4f7f\u7528\uff09\u3002\u4f8b\u5982\uff0c\u6709\u5bf9\u8c61\u5f15\u7528\u7684\u7ec4\u4ef6\u53ef\u4ee5\u5728\u65e5\u5fd7\u9519\u8bef\u6d88\u606f\u4e2d\u5305\u542b\u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002\u5982\u679c\u4f60\u672a\u80fd\u8986\u76d6 toString\uff0c\u5219\u8be5\u6d88\u606f\u53ef\u80fd\u5b8c\u5168\u65e0\u7528\u3002"),(0,n.kt)("p",null,"If you\u2019ve provided a good toString method for PhoneNumber,generating a useful diagnostic message is as easy as this:"),(0,n.kt)("p",null,"\u5982\u679c\u4f60\u5df2\u7ecf\u4e3a PhoneNumber \u63d0\u4f9b\u4e86\u4e00\u4e2a\u597d\u7684 toString \u65b9\u6cd5\uff0c\u90a3\u4e48\u751f\u6210\u4e00\u4e2a\u6709\u7528\u7684\u8bca\u65ad\u6d88\u606f\u5c31\u50cf\u8fd9\u6837\u7b80\u5355\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'System.out.println("Failed to connect to " + phoneNumber);\n')),(0,n.kt)("p",null,"Programmers will generate diagnostic messages in this fashion whether or not you override toString, but the messages won\u2019t be useful unless you do. The benefits of providing a good toString method extend beyond instances of the class to objects containing references to these instances, especially collections.Which would you rather see when printing a map,{Jenny=PhoneNumber@163b91} or {Jenny=707-867-5309}?"),(0,n.kt)("p",null,"\u65e0\u8bba\u4f60\u662f\u5426\u8986\u76d6 toString\uff0c\u7a0b\u5e8f\u5458\u90fd\u4f1a\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u751f\u6210\u8bca\u65ad\u6d88\u606f\uff0c\u4f46\u662f\u9664\u975e\u4f60\uff08\u8986\u76d6 toString\uff09\uff0c\u5426\u5219\u8fd9\u4e9b\u6d88\u606f\u4e0d\u4f1a\u6709\u7528\u3002\u63d0\u4f9b\u597d\u7684 toString \u65b9\u6cd5\u7684\u597d\u5904\u4e0d\u4ec5\u4ec5\u662f\u5c06\u7c7b\u7684\u5b9e\u4f8b\u6269\u5c55\u5230\u5305\u542b\u5bf9\u8fd9\u4e9b\u5b9e\u4f8b\u7684\u5f15\u7528\u7684\u5bf9\u8c61\uff0c\u7279\u522b\u662f\u96c6\u5408\u3002\u5728\u6253\u5370 map \u65f6\uff0c\u4f60\u66f4\u613f\u610f\u770b\u5230\u54ea\u4e2a\uff0c{Jenny=PhoneNumber@163b91} \u8fd8\u662f {Jenny=707-867-5309}\uff1f"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"When practical, the toString method should return all of the interesting information contained in the object,")," as shown in the phone number example. It is impractical if the object is large or if it contains state that is not conducive to string representation. Under these circumstances,toString should return a summary such as Manhattan residential phone directory (1487536 listings) or Thread","[main,5,main]",". Ideally, the string should be self-explanatory. (The Thread example flunks this test.) A particularly annoying penalty for failing to include all of an object\u2019s interesting information in its string representation is test failure reports that look like this:"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5f53\u5b9e\u9645\u4f7f\u7528\u65f6\uff0ctoString \u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u6240\u6709\u6709\u8da3\u4fe1\u606f\uff0c")," \u5982\u7535\u8bdd\u53f7\u7801\u793a\u4f8b\u6240\u793a\u3002\u5982\u679c\u5bf9\u8c61\u5f88\u5927\uff0c\u6216\u8005\u5305\u542b\u4e0d\u5229\u4e8e\u5b57\u7b26\u4e32\u8868\u793a\u7684\u72b6\u6001\uff0c\u90a3\u4e48\u8fd9\u79cd\u65b9\u6cd5\u662f\u4e0d\u5207\u5b9e\u9645\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0ctoString \u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u6458\u8981\uff0c\u4f8b\u5982\u66fc\u54c8\u987f\u4f4f\u5b85\u7535\u8bdd\u76ee\u5f55\uff081487536 \u53f7\u6e05\u5355\uff09\u6216 Thread","[main,5,main]","\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5b57\u7b26\u4e32\u5e94\u8be5\u662f\u4e0d\u8a00\u81ea\u660e\u7684\u3002\uff08\u7ebf\u7a0b\u793a\u4f8b\u672a\u80fd\u901a\u8fc7\u6b64\u6d4b\u8bd5\u3002\uff09\u5982\u679c\u6ca1\u6709\u5728\u5b57\u7b26\u4e32\u8868\u793a\u4e2d\u5305\u542b\u6240\u6709\u5bf9\u8c61\u7684\u6709\u8da3\u4fe1\u606f\uff0c\u90a3\u4e48\u4e00\u4e2a\u7279\u522b\u607c\u4eba\u7684\u60e9\u7f5a\u5c31\u662f\u6d4b\u8bd5\u5931\u8d25\u62a5\u544a\uff0c\u5982\u4e0b\u6240\u793a\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Assertion failure: expected {abc, 123}, but was {abc, 123}.\n")),(0,n.kt)("p",null,"One important decision you\u2019ll have to make when implementing a toString method is whether to specify the format of the return value in the documentation. It is recommended that you do this for value classes, such as phone number or matrix. The advantage of specifying the format is that it serves as a standard, unambiguous, human-readable representation of the object. This representation can be used for input and output and in persistent human-readable data objects, such as CSV files. If you specify the format, it\u2019s usually a good idea to provide a matching static factory or constructor so programmers can easily translate back and forth between the object and its string representation. This approach is taken by many value classes in the Java platform libraries, including BigInteger, BigDecimal, and most of the boxed primitive classes."),(0,n.kt)("p",null,"\u5728\u5b9e\u73b0 toString \u65b9\u6cd5\u65f6\uff0c\u4f60\u5fc5\u987b\u505a\u7684\u4e00\u4e2a\u91cd\u8981\u51b3\u5b9a\u662f\u662f\u5426\u5728\u6587\u6863\u4e2d\u6307\u5b9a\u8fd4\u56de\u503c\u7684\u683c\u5f0f\u3002\u5efa\u8bae\u4f60\u9488\u5bf9\u503c\u7c7b\uff08\u5982\u7535\u8bdd\u53f7\u7801\u6216\u77e9\u9635\uff09\u8fd9\u6837\u505a\u3002\u6307\u5b9a\u683c\u5f0f\u7684\u4f18\u70b9\u662f\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u5bf9\u8c61\u7684\u6807\u51c6\u7684\u3001\u660e\u786e\u7684\u3001\u4eba\u7c7b\u53ef\u8bfb\u7684\u8868\u793a\u3002\u8fd9\u79cd\u8868\u793a\u53ef\u4ee5\u7528\u4e8e\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6301\u4e45\u7684\u4eba\u7c7b\u53ef\u8bfb\u6570\u636e\u5bf9\u8c61\uff0c\u6bd4\u5982 CSV \u6587\u4ef6\u3002\u5982\u679c\u6307\u5b9a\u4e86\u683c\u5f0f\uff0c\u63d0\u4f9b\u4e00\u4e2a\u5339\u914d\u7684\u9759\u6001\u5de5\u5382\u6216\u6784\u9020\u51fd\u6570\u901a\u5e38\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5458\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u5bf9\u8c61\u53ca\u5176\u5b57\u7b26\u4e32\u8868\u793a\u4e4b\u95f4\u6765\u56de\u8f6c\u6362\u3002Java \u5e93\u4e2d\u7684\u8bb8\u591a\u503c\u7c7b\u90fd\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u5305\u62ec BigInteger\u3001BigDecimal \u548c\u5927\u591a\u6570\u5305\u88c5\u7c7b\u3002"),(0,n.kt)("p",null,"The disadvantage of specifying the format of the toString return value is that once you\u2019ve specified it, you\u2019re stuck with it for life, assuming your class is widely used. Programmers will write code to parse the representation, to generate it, and to embed it into persistent data. If you change the representation in a future release, you\u2019ll break their code and data, and they will yowl. By choosing not to specify a format, you preserve the flexibility to add information or improve the format in a subsequent release."),(0,n.kt)("p",null,"\u6307\u5b9a toString \u8fd4\u56de\u503c\u7684\u683c\u5f0f\u7684\u7f3a\u70b9\u662f\uff0c\u4e00\u65e6\u6307\u5b9a\u4e86\u5b83\uff0c\u5c31\u4f1a\u7ec8\u751f\u4f7f\u7528\u5b83\uff0c\u5047\u8bbe\u4f60\u7684\u7c7b\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002\u7a0b\u5e8f\u5458\u5c06\u7f16\u5199\u4ee3\u7801\u6765\u89e3\u6790\u8868\u793a\u3001\u751f\u6210\u8868\u793a\u5e76\u5c06\u5176\u5d4c\u5165\u6301\u4e45\u6570\u636e\u4e2d\u3002\u5982\u679c\u4f60\u5728\u5c06\u6765\u7684\u7248\u672c\u4e2d\u66f4\u6539\u4e86\u8868\u793a\u5f62\u5f0f\uff0c\u4f60\u5c06\u7834\u574f\u5b83\u4eec\u7684\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5b83\u4eec\u5c06\u53d1\u51fa\u5927\u91cf\u7684\u6d88\u606f\u3002\u901a\u8fc7\u9009\u62e9\u4e0d\u6307\u5b9a\u683c\u5f0f\uff0c\u4f60\u53ef\u4ee5\u4fdd\u7559\u5728\u540e\u7eed\u7248\u672c\u4e2d\u6dfb\u52a0\u4fe1\u606f\u6216\u6539\u8fdb\u683c\u5f0f\u7684\u7075\u6d3b\u6027\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Whether or not you decide to specify the format, you should clearly document your intentions.")," If you specify the format, you should do so precisely. For example, here\u2019s a toString method to go with the PhoneNumber class in Item 11:"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u65e0\u8bba\u4f60\u662f\u5426\u51b3\u5b9a\u6307\u5b9a\u683c\u5f0f\uff0c\u4f60\u90fd\u5e94\u8be5\u6e05\u695a\u5730\u8bb0\u5f55\u4f60\u7684\u610f\u56fe\u3002")," \u5982\u679c\u6307\u5b9a\u4e86\u683c\u5f0f\uff0c\u5219\u5e94\u8be5\u7cbe\u786e\u5730\u6307\u5b9a\u683c\u5f0f\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a toString \u65b9\u6cd5\u7528\u4e8e",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals"},"Item-11"),"\u4e2d\u7684 PhoneNumber \u7c7b\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'/**\n* Returns the string representation of this phone number.\n* The string consists of twelve characters whose format is\n* "XXX-YYY-ZZZZ", where XXX is the area code, YYY is the\n* prefix, and ZZZZ is the line number. Each of the capital\n* letters represents a single decimal digit.\n**\nIf any of the three parts of this phone number is too small\n* to fill up its field, the field is padded with leading zeros.\n* For example, if the value of the line number is 123, the last\n* four characters of the string representation will be "0123".\n*/\n@Override\npublic String toString() {\n    return String.format("%03d-%03d-%04d", areaCode, prefix, lineNum);\n}\n')),(0,n.kt)("p",null,"If you decide not to specify a format, the documentation comment should read something like this:"),(0,n.kt)("p",null,"\u5982\u679c\u4f60\u51b3\u5b9a\u4e0d\u6307\u5b9a\u4e00\u79cd\u683c\u5f0f\uff0c\u6587\u6863\u6ce8\u91ca\u5e94\u8be5\u5982\u4e0b\u6240\u793a\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'/**\n* Returns a brief description of this potion. The exact details\n* of the representation are unspecified and subject to change,\n* but the following may be regarded as typical:\n**\n"[Potion #9: type=love, smell=turpentine, look=india ink]"\n*/\n@Override\npublic String toString() { ... }\n')),(0,n.kt)("p",null,"After reading this comment, programmers who produce code or persistent data that depends on the details of the format will have no one but themselves to blame when the format is changed."),(0,n.kt)("p",null,"\u5728\u9605\u8bfb\u4e86\u8fd9\u7bc7\u6587\u6863\u6ce8\u91ca\u4e4b\u540e\uff0c\u5f53\u683c\u5f0f\u88ab\u66f4\u6539\u65f6\uff0c\u751f\u6210\u4f9d\u8d56\u4e8e\u683c\u5f0f\u7ec6\u8282\u7684\u4ee3\u7801\u6216\u6301\u4e45\u6570\u636e\u7684\u7a0b\u5e8f\u5458\u5c06\u53ea\u80fd\u602a\u4ed6\u4eec\u81ea\u5df1\u3002"),(0,n.kt)("p",null,"Whether or not you specify the format, ",(0,n.kt)("strong",{parentName:"p"},"provide programmatic access to the information contained in the value returned by toString.")," For example, the PhoneNumber class should contain accessors for the area code, prefix, and line number. If you fail to do this, you force programmers who need this information to parse the string. Besides reducing performance and making unnecessary work for programmers, this process is error-prone and results in fragile systems that break if you change the format. By failing to provide accessors, you turn the string format into a de facto API, even if you\u2019ve specified that it\u2019s subject to change."),(0,n.kt)("p",null,"\u65e0\u8bba\u4f60\u662f\u5426\u6307\u5b9a\u4e86\u683c\u5f0f\uff0c\u90fd\u8981 ",(0,n.kt)("strong",{parentName:"p"},"\u63d0\u4f9b\u5bf9 toString \u8fd4\u56de\u503c\u4e2d\u5305\u542b\u7684\u4fe1\u606f\u7684\u7a0b\u5e8f\u6027\u8bbf\u95ee\u3002")," \u4f8b\u5982\uff0cPhoneNumber \u7c7b\u5e94\u8be5\u5305\u542b\u533a\u57df\u4ee3\u7801\u3001\u524d\u7f00\u548c\u884c\u53f7\u7684\u8bbf\u95ee\u5668\u3002\u5982\u679c\u505a\u4e0d\u5230\u8fd9\u4e00\u70b9\uff0c\u5c31\u4f1a\u8feb\u4f7f\u9700\u8981\u8fd9\u4e9b\u4fe1\u606f\u7684\u7a0b\u5e8f\u5458\u89e3\u6790\u5b57\u7b26\u4e32\u3002\u9664\u4e86\u964d\u4f4e\u6027\u80fd\u548c\u4f7f\u7a0b\u5e8f\u5458\u4e0d\u5fc5\u8981\u7684\u5de5\u4f5c\u4e4b\u5916\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u5bb9\u6613\u51fa\u9519\uff0c\u5e76\u4e14\u4f1a\u5bfc\u81f4\u8106\u5f31\u7684\u7cfb\u7edf\u5728\u4f60\u66f4\u6539\u683c\u5f0f\u65f6\u5d29\u6e83\u3002\u7531\u4e8e\u6ca1\u6709\u63d0\u4f9b\u8bbf\u95ee\u5668\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u6362\u4e3a\u4e8b\u5b9e\u4e0a\u7684 API\uff0c\u5373\u4f7f\u4f60\u5df2\u7ecf\u6307\u5b9a\u4e86\u5b83\u53ef\u80fd\u4f1a\u53d1\u751f\u66f4\u6539\u3002"),(0,n.kt)("p",null,"It makes no sense to write a toString method in a static utility class (Item 4). Nor should you write a toString method in most enum types (Item 34) because Java provides a perfectly good one for you. You should, however, write a toString method in any abstract class whose subclasses share a common string representation. For example, the toString methods on most collection implementations are inherited from the abstract collection classes."),(0,n.kt)("p",null,"\u5728\u9759\u6001\u5b9e\u7528\u7a0b\u5e8f\u7c7b\u4e2d\u7f16\u5199 toString \u65b9\u6cd5\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-2-Item-4-Enforce-noninstantiability-with-a-private-constructor"},"Item-4"),"\uff09\uff0c\u5728\u5927\u591a\u6570 enum \u7c7b\u578b\u4e2d\u4e5f\u4e0d\u5e94\u8be5\u7f16\u5199 toString \u65b9\u6cd5\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-6-Item-34-Use-enums-instead-of-int-constants"},"Item-34"),"\uff09\uff0c\u56e0\u4e3a Java \u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u65b9\u6cd5\u3002\u4f46\u662f\uff0c\u4f60\u5e94\u8be5\u5728\u4efb\u4f55\u62bd\u8c61\u7c7b\u4e2d\u7f16\u5199 toString \u65b9\u6cd5\uff0c\u8be5\u7c7b\u7684\u5b50\u7c7b\u5171\u4eab\u516c\u5171\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002\u4f8b\u5982\uff0c\u5927\u591a\u6570\u96c6\u5408\u5b9e\u73b0\u4e0a\u7684 toString \u65b9\u6cd5\u90fd\u7ee7\u627f\u81ea\u62bd\u8c61\u96c6\u5408\u7c7b\u3002"),(0,n.kt)("p",null,"Google\u2019s open source AutoValue facility, discussed in Item 10, will generate a toString method for you, as will most IDEs. These methods are great for telling you the contents of each field but aren\u2019t specialized to the meaning of the class. So, for example, it would be inappropriate to use an automatically generated toString method for our PhoneNumber class (as phone numbers have a standard string representation), but it would be perfectly acceptable for our Potion class. That said, an automatically generated toString method is far preferable to the one inherited from Object, which tells you nothing about an object\u2019s value."),(0,n.kt)("p",null,"\u8c37\u6b4c\u7684\u5f00\u653e\u6e90\u7801\u81ea\u52a8\u503c\u5de5\u5177\uff08\u5728 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-10-Obey-the-general-contract-when-overriding-equals"},"Item-10")," \u4e2d\u8ba8\u8bba\uff09\u5c06\u4e3a\u4f60\u751f\u6210 toString \u65b9\u6cd5\uff0c\u5927\u591a\u6570 IDE \u4e5f\u662f\u5982\u6b64\u3002\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5f88\u597d\u5730\u544a\u8bc9\u4f60\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5185\u5bb9\uff0c\u4f46\u5e76\u4e0d\u4e13\u95e8\u9488\u5bf9\u7c7b\u7684\u542b\u4e49\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u5bf9\u4e8e PhoneNumber \u7c7b\u4f7f\u7528\u81ea\u52a8\u751f\u6210\u7684 toString \u65b9\u6cd5\u662f\u4e0d\u5408\u9002\u7684\uff08\u56e0\u4e3a\u7535\u8bdd\u53f7\u7801\u5177\u6709\u6807\u51c6\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e Potion \u7c7b\u6765\u8bf4\u5b83\u662f\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684 toString \u65b9\u6cd5\u8981\u6bd4\u4ece\u5bf9\u8c61\u7ee7\u627f\u7684\u65b9\u6cd5\u597d\u5f97\u591a\uff0c\u5bf9\u8c61\u7ee7\u627f\u7684\u65b9\u6cd5\u4e0d\u4f1a\u544a\u8bc9\u4f60\u5bf9\u8c61\u7684\u503c\u3002"),(0,n.kt)("p",null,"To recap, override Object\u2019s toString implementation in every instantiable class you write, unless a superclass has already done so. It makes classes much more pleasant to use and aids in debugging. The toString method should return a concise, useful description of the object, in an aesthetically pleasing format."),(0,n.kt)("p",null,"\u56de\u987e\u4e00\u4e0b\uff0c\u5728\u4f60\u7f16\u5199\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u5316\u7c7b\u4e2d\u8986\u76d6\u5bf9\u8c61\u7684 toString \u5b9e\u73b0\uff0c\u9664\u975e\u8d85\u7c7b\u5df2\u7ecf\u8fd9\u6837\u505a\u4e86\u3002\u5b83\u4f7f\u7c7b\u66f4\u6613\u4e8e\u4f7f\u7528\uff0c\u5e76\u6709\u52a9\u4e8e\u8c03\u8bd5\u3002toString \u65b9\u6cd5\u5e94\u8be5\u4ee5\u7f8e\u89c2\u7684\u683c\u5f0f\u8fd4\u56de\u5bf9\u8c61\u7684\u7b80\u660e\u3001\u6709\u7528\u7684\u63cf\u8ff0\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-3-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals"},"Item 11: Always override hashCode when you override equals\uff08\u5f53\u8986\u76d6 equals \u65b9\u6cd5\u65f6\uff0c\u603b\u8981\u8986\u76d6 hashCode \u65b9\u6cd5\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-3-Item-13-Override-clone-judiciously"},"Item 13: Override clone judiciously\uff08\u660e\u667a\u5730\u8986\u76d6 clone \u65b9\u6cd5\uff09")))))}u.isMDXComponent=!0}}]);