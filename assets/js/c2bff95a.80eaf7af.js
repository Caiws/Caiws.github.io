"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8484],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),m=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=m(a),h=n,u=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return a?r.createElement(u,s(s({ref:t},c),{},{components:a})):r.createElement(u,s({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var m=2;m<o;m++)s[m]=a[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},1848:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const o={},s=void 0,i={unversionedId:"Books/EffectiveJava3/Chapter-7/Chapter-7-Item-43-Prefer-method-references-to-lambdas",id:"Books/EffectiveJava3/Chapter-7/Chapter-7-Item-43-Prefer-method-references-to-lambdas",title:"Chapter-7-Item-43-Prefer-method-references-to-lambdas",description:"Chapter 7. Lambdas and Streams\uff08\u03bb \u8868\u8fbe\u5f0f\u548c\u6d41\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-43-Prefer-method-references-to-lambdas.md",sourceDirName:"Books/EffectiveJava3/Chapter-7",slug:"/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-43-Prefer-method-references-to-lambdas",permalink:"/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-43-Prefer-method-references-to-lambdas",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-43-Prefer-method-references-to-lambdas.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-7-Item-42-Prefer-lambdas-to-anonymous-classes",permalink:"/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-42-Prefer-lambdas-to-anonymous-classes"},next:{title:"Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces",permalink:"/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces"}},l={},m=[{value:"Chapter 7. Lambdas and Streams\uff08\u03bb \u8868\u8fbe\u5f0f\u548c\u6d41\uff09",id:"chapter-7-lambdas-and-streams\u03bb-\u8868\u8fbe\u5f0f\u548c\u6d41",level:2},{value:"Item 43: Prefer method references to lambdas\uff08\u65b9\u6cd5\u5f15\u7528\u4f18\u4e8e \u03bb \u8868\u8fbe\u5f0f\uff09",id:"item-43-prefer-method-references-to-lambdas\u65b9\u6cd5\u5f15\u7528\u4f18\u4e8e-\u03bb-\u8868\u8fbe\u5f0f",level:3}],c={toc:m};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-7-lambdas-and-streams\u03bb-\u8868\u8fbe\u5f0f\u548c\u6d41"},"Chapter 7. Lambdas and Streams\uff08\u03bb \u8868\u8fbe\u5f0f\u548c\u6d41\uff09"),(0,n.kt)("h3",{id:"item-43-prefer-method-references-to-lambdas\u65b9\u6cd5\u5f15\u7528\u4f18\u4e8e-\u03bb-\u8868\u8fbe\u5f0f"},"Item 43: Prefer method references to lambdas\uff08\u65b9\u6cd5\u5f15\u7528\u4f18\u4e8e \u03bb \u8868\u8fbe\u5f0f\uff09"),(0,n.kt)("p",null,"The primary advantage of lambdas over anonymous classes is that they are more succinct. Java provides a way to generate function objects even more succinct than lambdas: method references. Here is a code snippet from a program that maintains a map from arbitrary keys to Integer values. If the value is interpreted as a count of the number of instances of the key, then the program is a multiset implementation. The function of the code snippet is to associate the number 1 with the key if it is not in the map and to increment the associated value if the key is already present:"),(0,n.kt)("p",null,"lambda \u8868\u8fbe\u5f0f\u4e0e\u533f\u540d\u7c7b\u76f8\u6bd4\uff0c\u4e3b\u8981\u4f18\u52bf\u662f\u66f4\u7b80\u6d01\u3002Java \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u751f\u6210\u6bd4 lambda \u8868\u8fbe\u5f0f\u66f4\u7b80\u6d01\u7684\u51fd\u6570\u5bf9\u8c61\uff1a\u65b9\u6cd5\u5f15\u7528\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7a0b\u5e8f\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u8be5\u7a0b\u5e8f\u7ef4\u62a4\u4ece\u4efb\u610f\u952e\u5230 Integer \u7c7b\u578b\u503c\u7684\u6620\u5c04\u3002\u5982\u679c\u8be5\u503c\u88ab\u89e3\u91ca\u4e3a\u952e\u5b9e\u4f8b\u6570\u7684\u8ba1\u6570\uff0c\u90a3\u4e48\u8be5\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u591a\u96c6\u5b9e\u73b0\u3002\u8be5\u4ee3\u7801\u6bb5\u7684\u529f\u80fd\u662f\uff0c\u5982\u679c\u6570\u5b57 1 \u4e0d\u5728\u6620\u5c04\u4e2d\uff0c\u5219\u5c06\u5176\u4e0e\u952e\u5173\u8054\uff0c\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u5c06\u5173\u8054\u503c\u9012\u589e\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"map.merge(key, 1, (count, incr) -> count + incr);\n")),(0,n.kt)("p",null,"Note that this code uses the merge method, which was added to the Map interface in Java 8. If no mapping is present for the given key, the method simply inserts the given value; if a mapping is already present, merge applies the given function to the current value and the given value and overwrites the current value with the result. This code represents a typical use case for the merge method."),(0,n.kt)("p",null,"\u6ce8\u610f\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528\u4e86 merge \u65b9\u6cd5\uff0c\u5b83\u662f\u5728 Java 8 \u4e2d\u6dfb\u52a0\u5230 Map \u63a5\u53e3\u7684\u3002\u5982\u679c\u7ed9\u5b9a\u952e\u6ca1\u6709\u6620\u5c04\uff0c\u5219\u8be5\u65b9\u6cd5\u53ea\u63d2\u5165\u7ed9\u5b9a\u7684\u503c\uff1b\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u6620\u5c04\uff0c\u5219 merge \u5c06\u7ed9\u5b9a\u7684\u51fd\u6570\u5e94\u7528\u4e8e\u5f53\u524d\u503c\u548c\u7ed9\u5b9a\u503c\uff0c\u5e76\u7528\u7ed3\u679c\u8986\u76d6\u5f53\u524d\u503c\u3002\u8fd9\u6bb5\u4ee3\u7801\u4ee3\u8868\u4e86 merge \u65b9\u6cd5\u7684\u4e00\u4e2a\u5178\u578b\u7528\u4f8b\u3002"),(0,n.kt)("p",null,"The code reads nicely, but there\u2019s still some boilerplate. The parameters count and incr don\u2019t add much value, and they take up a fair amount of space. Really, all the lambda tells you is that the function returns the sum of its two arguments. As of Java 8, Integer (and all the other boxed numerical primitive types) provides a static method sum that does exactly the same thing. We can simply pass a reference to this method and get the same result with less visual clutter:"),(0,n.kt)("p",null,"\u4ee3\u7801\u8bfb\u8d77\u6765\u4e0d\u9519\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u4e00\u4e9b\u523b\u677f\u3002\u53c2\u6570\u8ba1\u6570\u548c incr \u4e0d\u4f1a\u589e\u52a0\u592a\u591a\u7684\u4ef7\u503c\uff0c\u800c\u4e14\u5b83\u4eec\u4f1a\u5360\u7528\u76f8\u5f53\u5927\u7684\u7a7a\u95f4\u3002\u5b9e\u9645\u4e0a\uff0clambda \u8868\u8fbe\u5f0f\u544a\u8bc9\u4f60\u7684\u662f\u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u53c2\u6570\u7684\u548c\u3002\u5728 Java 8 \u4e2d\uff0cInteger\uff08\u548c\u6240\u6709\u5176\u4ed6\u57fa\u672c\u7c7b\u578b\u7684\u5305\u88c5\u7c7b\uff09\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5 sum\uff0c\u5b83\u7684\u4f5c\u7528\u5b8c\u5168\u76f8\u540c\u3002\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u4f20\u9012\u4e00\u4e2a\u5f15\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5e76\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u540c\u65f6\u51cf\u5c11\u89c6\u89c9\u6df7\u4e71\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"map.merge(key, 1, Integer::sum);\n")),(0,n.kt)("p",null,"The more parameters a method has, the more boilerplate you can eliminate with a method reference. In some lambdas, however, the parameter names you choose provide useful documentation, making the lambda more readable and maintainable than a method reference, even if the lambda is longer."),(0,n.kt)("p",null,"\u4e00\u4e2a\u65b9\u6cd5\u7684\u53c2\u6570\u8d8a\u591a\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u65b9\u6cd5\u5f15\u7528\u6d88\u9664\u8d8a\u591a\u7684\u523b\u677f\u6a21\u5f0f\u3002\u7136\u800c\uff0c\u5728\u67d0\u4e9b lambda \u8868\u8fbe\u5f0f\u4e2d\uff0c\u60a8\u9009\u62e9\u7684\u53c2\u6570\u540d\u63d0\u4f9b\u4e86\u6709\u7528\u7684\u6587\u6863\uff0c\u4f7f\u5f97 lambda \u8868\u8fbe\u5f0f\u6bd4\u65b9\u6cd5\u5f15\u7528\u66f4\u6613\u4e8e\u9605\u8bfb\u548c\u7ef4\u62a4\uff0c\u5373\u4f7f lambda \u8868\u8fbe\u5f0f\u66f4\u957f\u3002"),(0,n.kt)("p",null,"There\u2019s nothing you can do with a method reference that you can\u2019t also do with a lambda (with one obscure exception\u2014see JLS, 9.9-2 if you\u2019re curious). That said, method references usually result in shorter, clearer code. They also give you an out if a lambda gets too long or complex: You can extract the code from the lambda into a new method and replace the lambda with a reference to that method. You can give the method a good name and document it to your heart\u2019s content."),(0,n.kt)("p",null,"\u5bf9\u4e8e\u65b9\u6cd5\u5f15\u7528\uff0c\u6ca1\u6709\u4ec0\u4e48\u662f\u4f60\u4e0d\u80fd\u5bf9 lambda \u8868\u8fbe\u5f0f\u505a\u7684\uff08\u53ea\u6709\u4e00\u4e2a\u6a21\u7cca\u7684\u4f8b\u5916\uff0c\u5982\u679c\u4f60\u597d\u5947\u7684\u8bdd\u53ef\u53c2\u89c1 ","[JLS, 9.9-2]","\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u65b9\u6cd5\u5f15\u7528\u901a\u5e38\u4f1a\u4ea7\u751f\u66f4\u77ed\u3001\u66f4\u6e05\u6670\u7684\u4ee3\u7801\u3002\u5982\u679c lambda \u8868\u8fbe\u5f0f\u592a\u957f\u6216\u592a\u590d\u6742\uff0c\u5b83\u4eec\u8fd8\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u8f93\u51fa\uff1a\u53ef\u4ee5\u5c06\u4ee3\u7801\u4ece lambda \u8868\u8fbe\u5f0f\u63d0\u53d6\u5230\u4e00\u4e2a\u65b0\u65b9\u6cd5\u4e2d\uff0c\u5e76\u4ee5\u5bf9\u8be5\u65b9\u6cd5\u7684\u5f15\u7528\u66ff\u6362 lambda \u8868\u8fbe\u5f0f\u3002\u53ef\u4ee5\u4e3a\u8be5\u65b9\u6cd5\u8d77\u4e00\u4e2a\u597d\u540d\u5b57\uff0c\u5e76\u5c06\u5176\u6587\u6863\u5316\u4ee5\u6ee1\u8db3\u9700\u8981\u3002"),(0,n.kt)("p",null,"If you\u2019re programming with an IDE, it will offer to replace a lambda with a method reference wherever it can. You should usually, but not always, take the IDE up on the offer. Occasionally, a lambda will be more succinct than a method reference. This happens most often when the method is in the same class as the lambda. For example, consider this snippet, which is presumed to occur in a class named GoshThisClassNameIsHumongous:"),(0,n.kt)("p",null,"\u5982\u679c\u4f60\u4f7f\u7528 IDE \u7f16\u7a0b\uff0c\u5b83\u5c06\u5728\u4efb\u4f55\u53ef\u80fd\u7684\u5730\u65b9\u5efa\u8bae\u7528\u65b9\u6cd5\u5f15\u7528\u66ff\u6362 lambda \u8868\u8fbe\u5f0f\u3002\u901a\u5e38\u5e94\u8be5\uff08\u4f46\u4e0d\u603b\u662f\uff09\u63a5\u53d7 IDE \u7684\u5efa\u8bae\u3002\u6709\u65f6\u5019\uff0clambda \u8868\u8fbe\u5f0f\u4f1a\u6bd4\u65b9\u6cd5\u5f15\u7528\u66f4\u7b80\u6d01\u3002\u5f53\u65b9\u6cd5\u4e0e lambda \u8868\u8fbe\u5f0f\u5728\u540c\u4e00\u4e2a\u7c7b\u4e2d\u65f6\uff0c\u8fd9\u79cd\u60c5\u51b5\u6700\u5e38\u89c1\u3002\u4f8b\u5982\uff0c\u8003\u8651\u8fd9\u6bb5\u4ee3\u7801\u7247\u6bb5\uff0c\u5b83\u5047\u5b9a\u53d1\u751f\u5728\u4e00\u4e2a\u540d\u4e3a GoshThisClassNameIsHumongous \u7684\u7c7b\u4e2d\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"service.execute(GoshThisClassNameIsHumongous::action);\n")),(0,n.kt)("p",null,"The lambda equivalent looks like this:"),(0,n.kt)("p",null,"\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u662f\u8fd9\u6837\u7684\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"service.execute(() -> action());\n")),(0,n.kt)("p",null,"The snippet using the method reference is neither shorter nor clearer than the snippet using the lambda, so prefer the latter. Along similar lines, the Function interface provides a generic static factory method to return the identity function, Function.identity(). It\u2019s typically shorter and cleaner not to use this method but to code the equivalent lambda inline: x -> x."),(0,n.kt)("p",null,"\u4f7f\u7528\u65b9\u6cd5\u5f15\u7528\u7684\u4ee3\u7801\u7247\u6bb5\u5e76\u4e0d\u6bd4\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u7684\u4ee3\u7801\u7247\u6bb5\u77ed\uff0c\u4e5f\u4e0d\u6e05\u695a\uff0c\u6240\u4ee5\u9009\u62e9\u540e\u8005\u3002\u7c7b\u4f3c\u5730\uff0c\u51fd\u6570\u63a5\u53e3\u63d0\u4f9b\u4e86\u4e00\u4e2a\u901a\u7528\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u6765\u8fd4\u56de\u6807\u8bc6\u51fd\u6570 ",(0,n.kt)("inlineCode",{parentName:"p"},"Function.identity()"),"\u3002\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u800c\u662f\u4e00\u884c\u4e2d\u7f16\u5199\u7b49\u4ef7\u7684 lambda \u8868\u8fbe\u5f0f\uff1a",(0,n.kt)("inlineCode",{parentName:"p"},"x -> x"),"\uff0c\u901a\u5e38\u66f4\u77ed\uff0c\u4e5f\u66f4\u7b80\u6d01\u3002"),(0,n.kt)("p",null,"Many method references refer to static methods, but there are four kinds that do not. Two of them are bound and unbound instance method references. In bound references, the receiving object is specified in the method reference. Bound references are similar in nature to static references: the function object takes the same arguments as the referenced method. In unbound references, the receiving object is specified when the function object is applied, via an additional parameter before the method\u2019s declared parameters. Unbound references are often used as mapping and filter functions in stream pipelines (Item 45). Finally, there are two kinds of constructor references, for classes and arrays. Constructor references serve as factory objects. All five kinds of method references are summarized in the table below:"),(0,n.kt)("p",null,"\u8bb8\u591a\u65b9\u6cd5\u5f15\u7528\u5f15\u7528\u9759\u6001\u65b9\u6cd5\uff0c\u4f46\u662f\u6709\u56db\u79cd\u65b9\u6cd5\u4e0d\u5f15\u7528\u9759\u6001\u65b9\u6cd5\u3002\u5176\u4e2d\u4e24\u4e2a\u662f\u7ed1\u5b9a\u548c\u975e\u7ed1\u5b9a\u5b9e\u4f8b\u65b9\u6cd5\u5f15\u7528\u3002\u5728\u7ed1\u5b9a\u5f15\u7528\u4e2d\uff0c\u63a5\u6536\u5bf9\u8c61\u5728\u65b9\u6cd5\u5f15\u7528\u4e2d\u6307\u5b9a\u3002\u7ed1\u5b9a\u5f15\u7528\u5728\u672c\u8d28\u4e0a\u4e0e\u9759\u6001\u5f15\u7528\u76f8\u4f3c\uff1a\u51fd\u6570\u5bf9\u8c61\u63a5\u53d7\u4e0e\u5f15\u7528\u65b9\u6cd5\u76f8\u540c\u7684\u53c2\u6570\u3002\u5728\u672a\u7ed1\u5b9a\u5f15\u7528\u4e2d\uff0c\u5728\u5e94\u7528\u51fd\u6570\u5bf9\u8c61\u65f6\u901a\u8fc7\u65b9\u6cd5\u58f0\u660e\u53c2\u6570\u4e4b\u524d\u7684\u9644\u52a0\u53c2\u6570\u6307\u5b9a\u63a5\u6536\u5bf9\u8c61\u3002\u5728\u6d41\u7ba1\u9053\u4e2d\uff0c\u672a\u7ed1\u5b9a\u5f15\u7528\u901a\u5e38\u7528\u4f5c\u6620\u5c04\u548c\u7b5b\u9009\u51fd\u6570\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-7-Item-45-Use-streams-judiciously"},"Item-45"),"\uff09\u3002\u6700\u540e\uff0c\u5bf9\u4e8e\u7c7b\u548c\u6570\u7ec4\uff0c\u6709\u4e24\u79cd\u6784\u9020\u51fd\u6570\u5f15\u7528\u3002\u6784\u9020\u51fd\u6570\u5f15\u7528\u7528\u4f5c\u5de5\u5382\u5bf9\u8c61\u3002\u4e94\u79cd\u65b9\u6cd5\u53c2\u8003\u6587\u732e\u6c47\u603b\u5982\u4e0b\u8868\uff1a"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"center"},"Method Ref Type"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Example"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Lambda Equivalent"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"Static"),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"Integer::parseInt")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"str ->"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"Bound"),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"Instant.now()::isAfter")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"Instant then =Instant.now(); t ->then.isAfter(t)"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"Unbound"),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"String::toLowerCase")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"str ->str.toLowerCase()"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"Class Constructor"),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"TreeMap<K,V>::new")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"() -> new TreeMap<K,V>"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"Array Constructor"),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"int[]::new")),(0,n.kt)("td",{parentName:"tr",align:"center"},(0,n.kt)("inlineCode",{parentName:"td"},"len -> new int[len]"))))),(0,n.kt)("p",null,"In summary, method references often provide a more succinct alternative to lambdas. ",(0,n.kt)("strong",{parentName:"p"},"Where method references are shorter and clearer, use them; where they aren\u2019t, stick with lambdas."),"  "),(0,n.kt)("p",null,"\u603b\u4e4b\uff0c\u65b9\u6cd5\u5f15\u7528\u901a\u5e38\u4e3a lambda \u8868\u8fbe\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u7b80\u6d01\u7684\u9009\u62e9\u3002",(0,n.kt)("strong",{parentName:"p"},"\u5982\u679c\u65b9\u6cd5\u5f15\u7528\u66f4\u77ed\u3001\u66f4\u6e05\u6670\uff0c\u5219\u4f7f\u7528\u5b83\u4eec\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u4ecd\u7136\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u3002")),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-7-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-7-Item-42-Prefer-lambdas-to-anonymous-classes"},"Item 42: Prefer lambdas to anonymous classes\uff08\u03bb \u8868\u8fbe\u5f0f\u4f18\u4e8e\u533f\u540d\u7c7b\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces"},"Item 44: Favor the use of standard functional interfaces\uff08\u4f18\u5148\u4f7f\u7528\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3\uff09")))))}d.isMDXComponent=!0}}]);