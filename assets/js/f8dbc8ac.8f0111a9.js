"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4040],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(a),d=o,u=h["".concat(l,".").concat(d)]||h[d]||m[d]||r;return a?n.createElement(u,i(i({ref:t},p),{},{components:a})):n.createElement(u,i({ref:t},p))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2230:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(7462),o=(a(7294),a(3905));const r={},i=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions",id:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions",title:"Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions",description:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions.md",sourceDirName:"Books/EffectiveJava3/Chapter-9",slug:"/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-9-Item-67-Optimize-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-67-Optimize-judiciously"},next:{title:"Chapter-10-Introduction",permalink:"/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Introduction"}},l={},c=[{value:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1",level:2},{value:"Item 68: Adhere to generally accepted naming conventions\uff08\u9075\u5b88\u88ab\u5e7f\u6cdb\u8ba4\u53ef\u7684\u547d\u540d\u7ea6\u5b9a\uff09",id:"item-68-adhere-to-generally-accepted-naming-conventions\u9075\u5b88\u88ab\u5e7f\u6cdb\u8ba4\u53ef\u7684\u547d\u540d\u7ea6\u5b9a",level:3}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1"},"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09"),(0,o.kt)("h3",{id:"item-68-adhere-to-generally-accepted-naming-conventions\u9075\u5b88\u88ab\u5e7f\u6cdb\u8ba4\u53ef\u7684\u547d\u540d\u7ea6\u5b9a"},"Item 68: Adhere to generally accepted naming conventions\uff08\u9075\u5b88\u88ab\u5e7f\u6cdb\u8ba4\u53ef\u7684\u547d\u540d\u7ea6\u5b9a\uff09"),(0,o.kt)("p",null,"The Java platform has a well-established set of naming conventions, many of which are contained in The Java Language Specification ","[JLS, 6.1]",". Loosely speaking, naming conventions fall into two categories: typographical and grammatical."),(0,o.kt)("p",null,"Java \u5e73\u53f0\u6709\u4e00\u7ec4\u5b8c\u5584\u7684\u547d\u540d\u7ea6\u5b9a\uff0c\u5176\u4e2d\u8bb8\u591a\u7ea6\u5b9a\u5305\u542b\u5728\u300aThe Java Language Specification\u300b","[JLS, 6.1]","\u3002\u4e0d\u4e25\u683c\u5730\u8bb2\uff0c\u547d\u540d\u7ea6\u5b9a\u5206\u4e3a\u4e24\u7c7b\uff1a\u6392\u7248\u548c\u8bed\u6cd5\u3002"),(0,o.kt)("p",null,"There are only a handful of typographical naming conventions, covering packages, classes, interfaces, methods, fields, and type variables. You should rarely violate them and never without a very good reason. If an API violates these conventions, it may be difficult to use. If an implementation violates them, it may be difficult to maintain. In both cases, violations have the potential to confuse and irritate other programmers who work with the code and can cause faulty assumptions that lead to errors. The conventions are summarized in this item."),(0,o.kt)("p",null,"\u6709\u5c11\u91cf\u7684\u4e0e\u6392\u7248\u6709\u5173\u7684\u547d\u540d\u7ea6\u5b9a\uff0c\u5305\u62ec\u5305\u3001\u7c7b\u3001\u63a5\u53e3\u3001\u65b9\u6cd5\u3001\u5b57\u6bb5\u548c\u7c7b\u578b\u53d8\u91cf\u3002\u5982\u679c\u6ca1\u6709\u5f88\u597d\u7684\u7406\u7531\uff0c\u4f60\u4e0d\u5e94\u8be5\u8fdd\u53cd\u5b83\u4eec\u3002\u5982\u679c API \u8fdd\u53cd\u4e86\u8fd9\u4e9b\u7ea6\u5b9a\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u5f88\u96be\u4f7f\u7528\u3002\u5982\u679c\u5b9e\u73b0\u8fdd\u53cd\u4e86\u8fd9\u4e9b\u89c4\u5219\uff0c\u53ef\u80fd\u5f88\u96be\u7ef4\u62a4\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fdd\u89c4\u90fd\u6709\u53ef\u80fd\u4f7f\u5176\u4ed6\u4f7f\u7528\u4ee3\u7801\u7684\u7a0b\u5e8f\u5458\u611f\u5230\u56f0\u60d1\u548c\u607c\u6012\uff0c\u5e76\u4f7f\u4ed6\u4eec\u505a\u51fa\u9519\u8bef\u7684\u5047\u8bbe\uff0c\u4ece\u800c\u5bfc\u81f4\u9519\u8bef\u3002\u672c\u6761\u76ee\u6982\u8ff0\u4e86\u5404\u9879\u7ea6\u5b9a\u3002"),(0,o.kt)("p",null,"Package and module names should be hierarchical with the components separated by periods. Components should consist of lowercase alphabetic characters and, rarely, digits. The name of any package that will be used outside your organization should begin with your organization\u2019s Internet domain name with the components reversed, for example, edu.cmu, com.google, org.eff. The standard libraries and optional packages, whose names begin with java and javax, are exceptions to this rule. Users must not create packages or modules whose names begin with java or javax. Detailed rules for converting Internet domain names to package name prefixes can be found in the JLS ","[JLS, 6.1]","."),(0,o.kt)("p",null,"\u5305\u540d\u548c\u6a21\u5757\u540d\u5e94\u8be5\u662f\u5206\u5c42\u7684\uff0c\u7ec4\u4ef6\u4e4b\u95f4\u7528\u53e5\u70b9\u5206\u9694\u3002\u7ec4\u4ef6\u5e94\u8be5\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff0c\u5f88\u5c11\u4f7f\u7528\u6570\u5b57\u3002\u4efb\u4f55\u5728\u4f60\u7684\u7ec4\u7ec7\u5916\u90e8\u4f7f\u7528\u7684\u5305\uff0c\u540d\u79f0\u90fd\u5e94\u8be5\u4ee5\u4f60\u7684\u7ec4\u7ec7\u7684 Internet \u57df\u540d\u5f00\u5934\uff0c\u5e76\u5c06\u7ec4\u4ef6\u98a0\u5012\u8fc7\u6765\uff0c\u4f8b\u5982\uff0cedu.cmu\u3001com.google\u3001org.eff\u3002\u4ee5 java \u548c javax \u5f00\u5934\u7684\u6807\u51c6\u5e93\u548c\u53ef\u9009\u5305\u662f\u8fd9\u4e2a\u89c4\u5219\u7684\u4f8b\u5916\u3002\u7528\u6237\u4e0d\u80fd\u521b\u5efa\u540d\u79f0\u4ee5 java \u6216 javax \u5f00\u5934\u7684\u5305\u6216\u6a21\u5757\u3002\u5c06 Internet \u57df\u540d\u8f6c\u6362\u4e3a\u5305\u540d\u524d\u7f00\u7684\u8be6\u7ec6\u89c4\u5219\u53ef\u4ee5\u5728\u300aThe Java Language Specification\u300b","[JLS, 6.1]"," \u4e2d\u627e\u5230\u3002"),(0,o.kt)("p",null,"The remainder of a package name should consist of one or more components describing the package. Components should be short, generally eight or fewer characters. Meaningful abbreviations are encouraged, for example, util rather than utilities. Acronyms are acceptable, for example, awt. Components should generally consist of a single word or abbreviation."),(0,o.kt)("p",null,"\u5305\u540d\u7684\u5176\u4f59\u90e8\u5206\u5e94\u8be5\u7531\u63cf\u8ff0\u5305\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7ec4\u4ef6\u7ec4\u6210\u3002\u7ec4\u4ef6\u5e94\u8be5\u5f88\u77ed\uff0c\u901a\u5e38\u4e3a 8 \u4e2a\u6216\u66f4\u5c11\u7684\u5b57\u7b26\u3002\u9f13\u52b1\u4f7f\u7528\u6709\u610f\u4e49\u7684\u7f29\u5199\uff0c\u4f8b\u5982 util \u800c\u4e0d\u662f utilities\u3002\u7f29\u5199\u8bcd\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u4f8b\u5982 awt\u3002\u7ec4\u4ef6\u901a\u5e38\u5e94\u8be5\u7531\u4e00\u4e2a\u5355\u8bcd\u6216\u7f29\u5199\u7ec4\u6210\u3002"),(0,o.kt)("p",null,"Many packages have names with just one component in addition to the Internet domain name. Additional components are appropriate for large facilities whose size demands that they be broken up into an informal hierarchy. For example, the javax.util package has a rich hierarchy of packages with names such as java.util.concurrent.atomic. Such packages are known as subpackages, although there is almost no linguistic support for package hierarchies."),(0,o.kt)("p",null,"\u9664\u4e86 Internet \u57df\u540d\u4e4b\u5916\uff0c\u8bb8\u591a\u5305\u7684\u540d\u79f0\u53ea\u6709\u4e00\u4e2a\u7ec4\u4ef6\u3002\u9644\u52a0\u7ec4\u4ef6\u9002\u7528\u4e8e\u5927\u578b\u5de5\u5177\u5305\uff0c\u8fd9\u4e9b\u5de5\u5177\u5305\u7684\u5927\u5c0f\u8981\u6c42\u5c06\u5176\u5206\u89e3\u4e3a\u975e\u6b63\u5f0f\u7684\u5c42\u6b21\u7ed3\u6784\u3002\u4f8b\u5982 ",(0,o.kt)("inlineCode",{parentName:"p"},"javax.util")," \u5305\u5177\u6709\u4e30\u5bcc\u7684\u5305\u5c42\u6b21\u7ed3\u6784\uff0c\u5305\u7684\u540d\u79f0\u5982 ",(0,o.kt)("inlineCode",{parentName:"p"},"java.util.concurrent.atomic"),"\u3002\u8fd9\u6837\u7684\u5305\u79f0\u4e3a\u5b50\u5305\uff0c\u5c3d\u7ba1 Java \u51e0\u4e4e\u4e0d\u652f\u6301\u5305\u5c42\u6b21\u7ed3\u6784\u3002"),(0,o.kt)("p",null,"Class and interface names, including enum and annotation type names, should consist of one or more words, with the first letter of each word capitalized, for example, List or FutureTask. Abbreviations are to be avoided, except for acronyms and certain common abbreviations like max and min. There is some disagreement as to whether acronyms should be uppercase or have only their first letter capitalized. While some programmers still use uppercase, a strong argument can be made in favor of capitalizing only the first letter: even if multiple acronyms occur back-to-back, you can still tell where one word starts and the next word ends. Which class name would you rather see, HTTPURL or HttpUrl?"),(0,o.kt)("p",null,"\u7c7b\u548c\u63a5\u53e3\u540d\u79f0\uff0c\u5305\u62ec\u679a\u4e3e\u548c\u6ce8\u91ca\u7c7b\u578b\u540d\u79f0\uff0c\u5e94\u8be5\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5355\u8bcd\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u4f8b\u5982 List \u6216 FutureTask\u3002\u9664\u4e86\u7f29\u7565\u8bed\u548c\u67d0\u4e9b\u5e38\u89c1\u7684\u7f29\u7565\u8bed\uff0c\u5982 max \u548c min\uff0c\u7f29\u7565\u8bed\u5e94\u8be5\u907f\u514d\u4f7f\u7528\u3002\u7f29\u7565\u8bed\u5e94\u8be5\u5168\u90e8\u5927\u5199\uff0c\u8fd8\u662f\u53ea\u6709\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5b58\u5728\u4e00\u4e9b\u5206\u6b67\u3002\u867d\u7136\u6709\u4e9b\u7a0b\u5e8f\u5458\u4ecd\u7136\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\uff0c\u4f46\u652f\u6301\u53ea\u5c06\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5927\u5199\u7684\u7406\u7531\u5f88\u5145\u5206\uff1a\u5373\u4f7f\u591a\u4e2a\u9996\u5b57\u6bcd\u7f29\u5199\u8fde\u7eed\u51fa\u73b0\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u5355\u8bcd\u4ece\u54ea\u91cc\u5f00\u59cb\uff0c\u4e0b\u4e00\u4e2a\u5355\u8bcd\u4ece\u54ea\u91cc\u7ed3\u675f\u3002\u4f60\u5e0c\u671b\u770b\u5230\u54ea\u4e2a\u7c7b\u540d\uff0cHTTPURL \u8fd8\u662f HttpUrl\uff1f"),(0,o.kt)("p",null,"Method and field names follow the same typographical conventions as class and interface names, except that the first letter of a method or field name should be lowercase, for example, remove or ensureCapacity. If an acronym occurs as the first word of a method or field name, it should be lowercase."),(0,o.kt)("p",null,"\u65b9\u6cd5\u548c\u5b57\u6bb5\u540d\u9075\u5faa\u4e0e\u7c7b\u548c\u63a5\u53e3\u540d\u76f8\u540c\u7684\u6392\u7248\u7ea6\u5b9a\uff0c\u9664\u4e86\u65b9\u6cd5\u6216\u5b57\u6bb5\u540d\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5e94\u8be5\u662f\u5c0f\u5199\uff0c\u4f8b\u5982 remove \u6216 ensureCapacity\u3002\u5982\u679c\u65b9\u6cd5\u6216\u5b57\u6bb5\u540d\u7684\u9996\u5b57\u6bcd\u7f29\u5199\u51fa\u73b0\u5728\u7b2c\u4e00\u4e2a\u5355\u8bcd\u4e2d\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u662f\u5c0f\u5199\u7684\u3002"),(0,o.kt)("p",null,"The sole exception to the previous rule concerns \u201cconstant fields,\u201d whose names should consist of one or more uppercase words separated by the underscore character, for example, VALUES or NEGATIVE_INFINITY. A constant field is a static final field whose value is immutable. If a static final field has a primitive type or an immutable reference type (Item 17), then it is a constant field. For example, enum constants are constant fields. If a static final field has a mutable reference type, it can still be a constant field if the referenced object is immutable. Note that constant fields constitute the only recommended use of underscores."),(0,o.kt)("p",null,"\u524d\u9762\u89c4\u5219\u7684\u552f\u4e00\u4f8b\u5916\u662f\u300c\u5e38\u91cf\u5b57\u6bb5\u300d\uff0c\u5b83\u7684\u540d\u79f0\u5e94\u8be5\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u5927\u5199\u5355\u8bcd\u7ec4\u6210\uff0c\u7531\u4e0b\u5212\u7ebf\u5206\u9694\uff0c\u4f8b\u5982 VALUES \u6216 NEGATIVE_INFINITY\u3002\u5e38\u91cf\u5b57\u6bb5\u662f\u4e00\u4e2a\u9759\u6001\u7684 final \u5b57\u6bb5\uff0c\u5176\u503c\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u5982\u679c\u9759\u6001 final \u5b57\u6bb5\u5177\u6709\u57fa\u672c\u7c7b\u578b\u6216\u4e0d\u53ef\u53d8\u5f15\u7528\u7c7b\u578b(\u7b2c17\u9879)\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u5e38\u91cf\u5b57\u6bb5\u3002\u4f8b\u5982\uff0c\u679a\u4e3e\u5e38\u91cf\u662f\u5e38\u91cf\u5b57\u6bb5\u3002\u5982\u679c\u9759\u6001 final \u5b57\u6bb5\u6709\u4e00\u4e2a\u53ef\u53d8\u7684\u5f15\u7528\u7c7b\u578b\uff0c\u90a3\u4e48\u5982\u679c\u6240\u5f15\u7528\u7684\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u90a3\u4e48\u5b83\u4ecd\u7136\u53ef\u4ee5\u662f\u4e00\u4e2a\u5e38\u91cf\u5b57\u6bb5\u3002\u6ce8\u610f\uff0c\u5e38\u91cf\u5b57\u6bb5\u662f\u552f\u4e00\u63a8\u8350\u4f7f\u7528\u4e0b\u5212\u7ebf\u7528\u6cd5\u7684\u3002"),(0,o.kt)("p",null,"Local variable names have similar typographical naming conventions to member names, except that abbreviations are permitted, as are individual characters and short sequences of characters whose meaning depends on the context in which they occur, for example, i, denom, houseNum. Input parameters are a special kind of local variable. They should be named much more carefully than ordinary local variables, as their names are an integral part of their method\u2019s documentation."),(0,o.kt)("p",null,"\u5c40\u90e8\u53d8\u91cf\u540d\u4e0e\u6210\u5458\u540d\u5177\u6709\u7c7b\u4f3c\u7684\u6392\u7248\u547d\u540d\u7ea6\u5b9a\uff0c\u4f46\u5141\u8bb8\u4f7f\u7528\u7f29\u5199\uff0c\u4e5f\u5141\u8bb8\u4f7f\u7528\u5355\u4e2a\u5b57\u7b26\u548c\u77ed\u5b57\u7b26\u5e8f\u5217\uff0c\u5b83\u4eec\u7684\u542b\u4e49\u53d6\u51b3\u4e8e\u5b83\u4eec\u51fa\u73b0\u7684\u4e0a\u4e0b\u6587\uff0c\u4f8b\u5982 i\u3001denom\u3001houseNum\u3002\u8f93\u5165\u53c2\u6570\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u5b83\u4eec\u7684\u547d\u540d\u5e94\u8be5\u6bd4\u666e\u901a\u7684\u5c40\u90e8\u53d8\u91cf\u8c28\u614e\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u540d\u79f0\u662f\u65b9\u6cd5\u6587\u6863\u7684\u7ec4\u6210\u90e8\u5206\u3002"),(0,o.kt)("p",null,"Type parameter names usually consist of a single letter. Most commonly it is one of these five: T for an arbitrary type, E for the element type of a collection, K and V for the key and value types of a map, and X for an exception. The return type of a function is usually R. A sequence of arbitrary types can be T, U, V or T1, T2, T3."),(0,o.kt)("p",null,"\u7c7b\u578b\u53c2\u6570\u540d\u901a\u5e38\u7531\u5355\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\u6700\u5e38\u89c1\u7684\u662f\u4ee5\u4e0b\u4e94\u79cd\u7c7b\u578b\u4e4b\u4e00\uff1aT \u8868\u793a\u4efb\u610f\u7c7b\u578b\uff0cE \u8868\u793a\u96c6\u5408\u7684\u5143\u7d20\u7c7b\u578b\uff0cK \u548c V \u8868\u793a Map \u7684\u952e\u548c\u503c\u7c7b\u578b\uff0cX \u8868\u793a\u5f02\u5e38\u3002\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u901a\u5e38\u4e3a R\u3002\u4efb\u610f\u7c7b\u578b\u7684\u5e8f\u5217\u53ef\u4ee5\u662f T\u3001U\u3001V \u6216 T1\u3001T2\u3001T3\u3002"),(0,o.kt)("p",null,"For quick reference, the following table shows examples of typographical conventions."),(0,o.kt)("p",null,"\u4e3a\u4e86\u5feb\u901f\u53c2\u8003\uff0c\u4e0b\u8868\u663e\u793a\u4e86\u6392\u7248\u7ea6\u5b9a\u7684\u793a\u4f8b\u3002"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},"Identifier Type"),(0,o.kt)("th",{parentName:"tr",align:"center"},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Package or module"),(0,o.kt)("td",{parentName:"tr",align:"center"},(0,o.kt)("inlineCode",{parentName:"td"},"org.junit.jupiter.api"),", ",(0,o.kt)("inlineCode",{parentName:"td"},"com.google.common.collect"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Class or Interface"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Stream, FutureTask, LinkedHashMap,HttpClient")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Method or Field"),(0,o.kt)("td",{parentName:"tr",align:"center"},"remove, groupingBy, getCrc")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Constant Field"),(0,o.kt)("td",{parentName:"tr",align:"center"},"MIN_VALUE, NEGATIVE_INFINITY")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Local Variable"),(0,o.kt)("td",{parentName:"tr",align:"center"},"i, denom, houseNum")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Type Parameter"),(0,o.kt)("td",{parentName:"tr",align:"center"},"T, E, K, V, X, R, U, V, T1, T2")))),(0,o.kt)("p",null,"Grammatical naming conventions are more flexible and more controversial than typographical conventions. There are no grammatical naming conventions to speak of for packages. Instantiable classes, including enum types, are generally named with a singular noun or noun phrase, such as Thread, PriorityQueue, or ChessPiece. Non-instantiable utility classes (Item 4) are often named with a plural noun, such as Collectors or Collections. Interfaces are named like classes, for example, Collection or Comparator, or with an adjective ending in able or ible, for example, Runnable, Iterable, or Accessible. Because annotation types have so many uses, no part of speech predominates. Nouns, verbs, prepositions, and adjectives are all common, for example, BindingAnnotation, Inject, ImplementedBy, or Singleton."),(0,o.kt)("p",null,"\u8bed\u6cd5\u547d\u540d\u7ea6\u5b9a\u6bd4\u6392\u7248\u7ea6\u5b9a\u66f4\u7075\u6d3b\uff0c\u4e5f\u66f4\u6709\u4e89\u8bae\u3002\u5305\u6ca1\u6709\u8bed\u6cd5\u547d\u540d\u7ea6\u5b9a\u3002\u53ef\u5b9e\u4f8b\u5316\u7684\u7c7b\uff0c\u5305\u62ec\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u540d\u8bcd\u77ed\u8bed\u6765\u547d\u540d\uff0c\u4f8b\u5982 Thread\u3001PriorityQueue \u6216 ChessPiece\u3002\u4e0d\u53ef\u5b9e\u4f8b\u5316\u7684\u5b9e\u7528\u7a0b\u5e8f\u7c7b\uff08",(0,o.kt)("a",{parentName:"p",href:"./Chapter-2-Item-4-Enforce-noninstantiability-with-a-private-constructor"},"Item-4"),"\uff09\u901a\u5e38\u4f7f\u7528\u590d\u6570\u540d\u8bcd\u6765\u547d\u540d\uff0c\u4f8b\u5982 collector \u6216 Collections\u3002\u63a5\u53e3\u7684\u540d\u79f0\u7c7b\u4f3c\u4e8e\u7c7b\uff0c\u4f8b\u5982\u96c6\u5408\u6216\u6bd4\u8f83\u5668\uff0c\u6216\u8005\u4ee5 able \u6216 ible \u7ed3\u5c3e\u7684\u5f62\u5bb9\u8bcd\uff0c\u4f8b\u5982 Runnable\u3001Iterable \u6216 Accessible\u3002\u56e0\u4e3a\u6ce8\u89e3\u7c7b\u578b\u6709\u5f88\u591a\u7684\u7528\u9014\uff0c\u6240\u4ee5\u6ca1\u6709\u54ea\u90e8\u5206\u5360\u4e3b\u5bfc\u5730\u4f4d\u3002\u540d\u8bcd\u3001\u52a8\u8bcd\u3001\u4ecb\u8bcd\u548c\u5f62\u5bb9\u8bcd\u90fd\u5f88\u5e38\u89c1\uff0c\u4f8b\u5982\uff0cBindingAnnotation\u3001Inject\u3001ImplementedBy \u6216 Singleton\u3002"),(0,o.kt)("p",null,"Methods that perform some action are generally named with a verb or verb phrase (including object), for example, append or drawImage. Methods that return a boolean value usually have names that begin with the word is or, less commonly, has, followed by a noun, noun phrase, or any word or phrase that functions as an adjective, for example, isDigit, isProbablePrime, isEmpty, isEnabled, or hasSiblings."),(0,o.kt)("p",null,"\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\u7684\u65b9\u6cd5\u901a\u5e38\u7528\u52a8\u8bcd\u6216\u52a8\u8bcd\u77ed\u8bed\uff08\u5305\u62ec\u5bf9\u8c61\uff09\u547d\u540d\uff0c\u4f8b\u5982\uff0cappend \u6216 drawImage\u3002\u8fd4\u56de\u5e03\u5c14\u503c\u7684\u65b9\u6cd5\u7684\u540d\u79f0\u901a\u5e38\u4ee5\u5355\u8bcd is \u6216 has\uff08\u901a\u5e38\u5f88\u5c11\u7528\uff09\u5f00\u5934\uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u540d\u8bcd\u3001\u4e00\u4e2a\u540d\u8bcd\u77ed\u8bed\uff0c\u6216\u8005\u4efb\u4f55\u7528\u4f5c\u5f62\u5bb9\u8bcd\u7684\u5355\u8bcd\u6216\u77ed\u8bed\uff0c\u4f8b\u5982 isDigit\u3001isProbablePrime\u3001isEmpty\u3001isEnabled \u6216 hasSiblings\u3002"),(0,o.kt)("p",null,"Methods that return a non-boolean function or attribute of the object on which they\u2019re invoked are usually named with a noun, a noun phrase, or a verb phrase beginning with the verb get, for example, size, hashCode, or getTime. There is a vocal contingent that claims that only the third form (beginning with get) is acceptable, but there is little basis for this claim. The first two forms usually lead to more readable code, for example:"),(0,o.kt)("p",null,"\u8fd4\u56de\u88ab\u8c03\u7528\u5bf9\u8c61\u7684\u975e\u5e03\u5c14\u51fd\u6570\u6216\u5c5e\u6027\u7684\u65b9\u6cd5\u901a\u5e38\u4f7f\u7528\u4ee5 get \u5f00\u5934\u7684\u540d\u8bcd\u3001\u540d\u8bcd\u77ed\u8bed\u6216\u52a8\u8bcd\u77ed\u8bed\u6765\u547d\u540d\uff0c\u4f8b\u5982 size\u3001hashCode \u6216 getTime\u3002\u6709\u4e00\u79cd\u8bf4\u6cd5\u662f\uff0c\u53ea\u6709\u7b2c\u4e09\u79cd\u5f62\u5f0f\uff08\u4ee5 get \u5f00\u5934\uff09\u624d\u662f\u53ef\u63a5\u53d7\u7684\uff0c\u4f46\u8fd9\u79cd\u8bf4\u6cd5\u51e0\u4e4e\u6ca1\u6709\u6839\u636e\u3002\u524d\u4e24\u79cd\u5f62\u5f0f\u7684\u4ee3\u7801\u901a\u5e38\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u4f8b\u5982\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'if (car.speed() > 2 * SPEED_LIMIT)\n    generateAudibleAlert("Watch out for cops!");\n')),(0,o.kt)("p",null,"The form beginning with get has its roots in the largely obsolete Java Beans specification, which formed the basis of an early reusable component architecture. There are modern tools that continue to rely on the Beans naming convention, and you should feel free to use it in any code that is to be used in conjunction with these tools. There is also a strong precedent for following this naming convention if a class contains both a setter and a getter for the same attribute. In this case, the two methods are typically named getAttribute and setAttribute."),(0,o.kt)("p",null,"\u4ee5 get \u5f00\u5934\u7684\u8868\u5355\u8d77\u6e90\u4e8e\u57fa\u672c\u8fc7\u65f6\u7684 Java bean \u89c4\u8303\uff0c\u8be5\u89c4\u8303\u6784\u6210\u4e86\u65e9\u671f\u53ef\u590d\u7528\u7ec4\u4ef6\u4f53\u7cfb\u7ed3\u6784\u7684\u57fa\u7840\u3002\u6709\u4e00\u4e9b\u73b0\u4ee3\u5de5\u5177\u4ecd\u7136\u4f9d\u8d56\u4e8e bean \u547d\u540d\u7ea6\u5b9a\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u5728\u4efb\u4f55\u4e0e\u8fd9\u4e9b\u5de5\u5177\u4e00\u8d77\u4f7f\u7528\u7684\u4ee3\u7801\u4e2d\u968f\u610f\u4f7f\u7528\u5b83\u3002\u5982\u679c\u7c7b\u540c\u65f6\u5305\u542b\u76f8\u540c\u5c5e\u6027\u7684 setter \u548c getter\uff0c\u5219\u9075\u5faa\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\u4e5f\u6709\u5f88\u597d\u7684\u5148\u4f8b\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u901a\u5e38\u88ab\u547d\u540d\u4e3a getAttribute \u548c setAttribute\u3002"),(0,o.kt)("p",null,"A few method names deserve special mention. Instance methods that convert the type of an object, returning an independent object of a different type, are often called toType, for example, toString or toArray. Methods that return a view (Item 6) whose type differs from that of the receiving object are often called asType, for example, asList. Methods that return a primitive with the same value as the object on which they\u2019re invoked are often called typeValue, for example, intValue. Common names for static factories include from, of, valueOf, instance, getInstance, newInstance, getType, and newType (Item 1, page 9)."),(0,o.kt)("p",null,"\u4e00\u4e9b\u65b9\u6cd5\u540d\u79f0\u503c\u5f97\u7279\u522b\u6ce8\u610f\u3002\u8f6c\u6362\u5bf9\u8c61\u7c7b\u578b\uff08\u8fd4\u56de\u4e0d\u540c\u7c7b\u578b\u7684\u72ec\u7acb\u5bf9\u8c61\uff09\u7684\u5b9e\u4f8b\u65b9\u6cd5\u901a\u5e38\u79f0\u4e3a toType\uff0c\u4f8b\u5982 toString \u6216 toArray\u3002\u8fd4\u56de\u4e0e\u63a5\u6536\u5bf9\u8c61\u7c7b\u578b\u4e0d\u540c\u7684\u89c6\u56fe\uff08",(0,o.kt)("a",{parentName:"p",href:"./Chapter-2-Item-6-Avoid-creating-unnecessary-objects"},"Item-6"),"\uff09\u7684\u65b9\u6cd5\u901a\u5e38\u79f0\u4e3a asType\uff0c\u4f8b\u5982 asList\u3002\u8fd4\u56de\u4e0e\u8c03\u7528\u5b83\u4eec\u7684\u5bf9\u8c61\u5177\u6709\u76f8\u540c\u503c\u7684\u57fa\u672c\u7c7b\u578b\u7684\u65b9\u6cd5\u901a\u5e38\u79f0\u4e3a\u7c7b\u578b\u503c\uff0c\u4f8b\u5982 intValue\u3002\u9759\u6001\u5de5\u5382\u7684\u5e38\u89c1\u540d\u79f0\u5305\u62ec from\u3001of\u3001valueOf\u3001instance\u3001getInstance\u3001newInstance\u3001getType \u548c newType\uff08",(0,o.kt)("a",{parentName:"p",href:"./Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors"},"Item-1"),"\uff0c\u7b2c 9 \u9875\uff09\u3002"),(0,o.kt)("p",null,"Grammatical conventions for field names are less well established and less important than those for class, interface, and method names because welldesigned APIs contain few if any exposed fields. Fields of type boolean are often named like boolean accessor methods with the initial is omitted, for example, initialized, composite. Fields of other types are usually named with nouns or noun phrases, such as height, digits, or bodyStyle. Grammatical conventions for local variables are similar to those for fields but even weaker."),(0,o.kt)("p",null,"\u5b57\u6bb5\u540d\u7684\u8bed\u6cd5\u7ea6\u5b9a\u6ca1\u6709\u7c7b\u3001\u63a5\u53e3\u548c\u65b9\u6cd5\u540d\u7684\u8bed\u6cd5\u7ea6\u5b9a\u5efa\u7acb\u5f97\u597d\uff0c\u4e5f\u4e0d\u90a3\u4e48\u91cd\u8981\uff0c\u56e0\u4e3a\u8bbe\u8ba1\u826f\u597d\u7684 API \u5305\u542b\u5f88\u5c11\u7684\u516c\u5f00\u5b57\u6bb5\u3002\u7c7b\u578b\u4e3a boolean \u7684\u5b57\u6bb5\u7684\u540d\u79f0\u901a\u5e38\u7c7b\u4f3c\u4e8e boolean \u8bbf\u95ee\u5668\u65b9\u6cd5\uff0c\u7701\u7565\u4e86\u521d\u59cb\u503c\u300cis\u300d\uff0c\u4f8b\u5982 initialized\u3001composite\u3002\u5176\u4ed6\u7c7b\u578b\u7684\u5b57\u6bb5\u901a\u5e38\u7528\u540d\u8bcd\u6216\u540d\u8bcd\u77ed\u8bed\u6765\u547d\u540d\uff0c\u5982 height\u3001digits \u548c bodyStyle\u3002\u5c40\u90e8\u53d8\u91cf\u7684\u8bed\u6cd5\u7ea6\u5b9a\u7c7b\u4f3c\u4e8e\u5b57\u6bb5\u7684\u8bed\u6cd5\u7ea6\u5b9a\uff0c\u4f46\u8981\u6c42\u66f4\u5c11\u3002"),(0,o.kt)("p",null,"To summarize, internalize the standard naming conventions and learn to use them as second nature. The typographical conventions are straightforward and largely unambiguous; the grammatical conventions are more complex and looser. To quote from The Java Language Specification ","[JLS, 6.1]",", \u201cThese conventions should not be followed slavishly if long-held conventional usage dictates otherwise.\u201d Use common sense."),(0,o.kt)("p",null,"\u603b\u4e4b\uff0c\u5c06\u6807\u51c6\u547d\u540d\u7ea6\u5b9a\u5185\u5728\u5316\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u7b2c\u4e8c\u6027\u5f81\u6765\u4f7f\u7528\u3002\u6392\u7248\u4e60\u60ef\u662f\u76f4\u63a5\u7684\uff0c\u800c\u4e14\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u660e\u786e\u7684\uff1b\u8bed\u6cd5\u60ef\u4f8b\u66f4\u52a0\u590d\u6742\u548c\u677e\u6563\u3002\u5f15\u7528\u300aThe JavaLanguage Specification\u300b","[JLS, 6.1]"," \u4e2d\u7684\u8bdd\u8bf4\uff0c\u300c\u5982\u679c\u957f\u671f\u4ee5\u6765\u7684\u4f20\u7edf\u7528\u6cd5\u8981\u6c42\u4e0d\u9075\u5faa\u8fd9\u4e9b\u7ea6\u5b9a\uff0c\u5c31\u4e0d\u5e94\u8be5\u76f2\u76ee\u5730\u9075\u5faa\u8fd9\u4e9b\u7ea6\u5b9a\u3002\u300d\uff0c\u5e94\u4f7f\u7528\u5e38\u8bc6\u5224\u65ad\u3002"),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"./Chapter-9-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,o.kt)("a",{parentName:"strong",href:"./Chapter-9-Item-67-Optimize-judiciously"},"Item 67: Optimize judiciously\uff08\u660e\u667a\u5730\u8fdb\u884c\u4f18\u5316\uff09"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,o.kt)("a",{parentName:"strong",href:"./Chapter-10/Chapter-10-Introduction"},"Chapter 10 Introduction\uff08\u7ae0\u8282\u4ecb\u7ecd\uff09")))))}m.isMDXComponent=!0}}]);