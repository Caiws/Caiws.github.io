"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5686],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=l(a),u=r,d=h["".concat(c,".").concat(u)]||h[u]||m[u]||o;return a?n.createElement(d,i(i({ref:t},p),{},{components:a})):n.createElement(d,i({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3812:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const o={},i=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-2/Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors",id:"Books/EffectiveJava3/Chapter-2/Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors",title:"Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors",description:"Chapter 2. Creating and Destroying Objects\uff08\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors.md",sourceDirName:"Books/EffectiveJava3/Chapter-2",slug:"/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors",permalink:"/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-2-Introduction",permalink:"/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Introduction"},next:{title:"Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters",permalink:"/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters"}},c={},l=[{value:"Chapter 2. Creating and Destroying Objects\uff08\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\uff09",id:"chapter-2-creating-and-destroying-objects\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61",level:2},{value:"Item 1: Consider static factory methods instead of constructors\uff08\u8003\u8651\u4ee5\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4ee3\u66ff\u6784\u9020\u51fd\u6570\uff09",id:"item-1-consider-static-factory-methods-instead-of-constructors\u8003\u8651\u4ee5\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4ee3\u66ff\u6784\u9020\u51fd\u6570",level:3}],p={toc:l};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"chapter-2-creating-and-destroying-objects\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61"},"Chapter 2. Creating and Destroying Objects\uff08\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\uff09"),(0,r.kt)("h3",{id:"item-1-consider-static-factory-methods-instead-of-constructors\u8003\u8651\u4ee5\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4ee3\u66ff\u6784\u9020\u51fd\u6570"},"Item 1: Consider static factory methods instead of constructors\uff08\u8003\u8651\u4ee5\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4ee3\u66ff\u6784\u9020\u51fd\u6570\uff09"),(0,r.kt)("p",null,"The traditional way for a class to allow a client to obtain an instance is to provide a public constructor. There is another technique that should be a part of every programmer\u2019s toolkit. A class can provide a public static factory method,which is simply a static method that returns an instance of the class. Here\u2019s a simple example from Boolean (the boxed primitive class for boolean). This method translates a boolean primitive value into a Boolean object reference:"),(0,r.kt)("p",null,"\u5ba2\u6237\u7aef\u83b7\u5f97\u5b9e\u4f8b\u7684\u4f20\u7edf\u65b9\u5f0f\u662f\u7531\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u516c\u5171\u6784\u9020\u51fd\u6570\u3002\u8fd8\u6709\u4e00\u79cd\u6280\u672f\u5e94\u8be5\u6210\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u5458\u6280\u80fd\u6811\u7684\u4e00\u90e8\u5206\u3002\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u63d0\u4f9b\u516c\u5171\u9759\u6001\u5de5\u5382\u65b9\u6cd5\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u8fd4\u56de\u7c7b\u5b9e\u4f8b\u7684\u9759\u6001\u65b9\u6cd5\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6765\u81ea Boolean \uff08boolean \u7684\u5305\u88c5\u7c7b\uff09\u7684\u7b80\u5355\u793a\u4f8b\u3002\u8be5\u65b9\u6cd5\u5c06 boolean \u57fa\u672c\u7c7b\u578b\u8f6c\u6362\u4e3a Boolean \u5bf9\u8c61\u7684\u5f15\u7528\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"public static Boolean valueOf(boolean b) {\n    return b ? Boolean.TRUE : Boolean.FALSE;\n}\n")),(0,r.kt)("p",null,"Note that a static factory method is not the same as the Factory Method pattern from Design Patterns ","[Gamma95]",". The static factory method described in this item has no direct equivalent in Design Patterns."),(0,r.kt)("p",null,"\u8981\u6ce8\u610f\u7684\u662f\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4e0e\u6765\u81ea\u8bbe\u8ba1\u6a21\u5f0f\u7684\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u4e0d\u540c ","[Gamma95]","\u3002\u672c\u6761\u76ee\u4e2d\u63cf\u8ff0\u7684\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u5728\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u6ca1\u6709\u76f4\u63a5\u7b49\u4ef7\u7684\u65b9\u6cd5\u3002"),(0,r.kt)("p",null,"A class can provide its clients with static factory methods instead of, or in addition to, public constructors. Providing a static factory method instead of a public constructor has both advantages and disadvantages."),(0,r.kt)("p",null,"\u9664\u4e86\u516c\u5171\u6784\u9020\u51fd\u6570\uff0c\u4e00\u4e2a\u7c7b\u8fd8\u53ef\u4ee5\u901a\u8fc7\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u63d0\u4f9b\u5b83\u7684\u5ba2\u6237\u7aef\u3002\u4f7f\u7528\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u800c\u4e0d\u662f\u516c\u5171\u6784\u9020\u51fd\u6570\u7684\u65b9\u5f0f\u65e2\u6709\u4f18\u70b9\u4e5f\u6709\u7f3a\u70b9\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"One advantage of static factory methods is that, unlike constructors, they have names.")," If the parameters to a constructor do not, in and of themselves, describe the object being returned, a static factory with a well-chosen name is easier to use and the resulting client code easier to read. For example, the constructor BigInteger(int, int, Random), which returns a BigInteger that is probably prime, would have been better expressed as a static factory method named BigInteger.probablePrime. (This method was added in Java 4.)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4e0e\u6784\u9020\u51fd\u6570\u76f8\u6bd4\u7684\u7b2c\u4e00\u4e2a\u4f18\u70b9\uff0c\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u6709\u786e\u5207\u540d\u79f0\u3002")," \u5982\u679c\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u672c\u8eab\u5e76\u4e0d\u80fd\u63cf\u8ff0\u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u5177\u6709\u786e\u5207\u540d\u79f0\u7684\u9759\u6001\u5de5\u5382\u5219\u66f4\u5bb9\u6613\u4f7f\u7528\uff0c\u751f\u6210\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u4e5f\u66f4\u5bb9\u6613\u9605\u8bfb\u3002\u4f8b\u5982\uff0c\u8fd4\u56de\u53ef\u80fd\u4e3a\u7d20\u6570\u7684 BigInteger \u7c7b\u7684\u6784\u9020\u51fd\u6570 ",(0,r.kt)("inlineCode",{parentName:"p"},"BigInteger(int, int, Random)")," \u6700\u597d\u8868\u793a\u4e3a\u540d\u4e3a ",(0,r.kt)("inlineCode",{parentName:"p"},"BigInteger.probablePrime")," \u7684\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u3002\uff08\u8fd9\u4e2a\u65b9\u6cd5\u662f\u5728 Java 4 \u4e2d\u6dfb\u52a0\u7684\uff09"),(0,r.kt)("p",null,"A class can have only a single constructor with a given signature. Programmers have been known to get around this restriction by providing two constructors whose parameter lists differ only in the order of their parameter types. This is a really bad idea. The user of such an API will never be able to remember which constructor is which and will end up calling the wrong one by mistake. People reading code that uses these constructors will not know what the code does without referring to the class documentation."),(0,r.kt)("p",null,"\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u5177\u6709\u7ed9\u5b9a\u7b7e\u540d\u7684\u6784\u9020\u51fd\u6570\u3002\u4f17\u6240\u5468\u77e5\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u591a\u4e2a\u6784\u9020\u51fd\u6570\u6765\u7ed5\u8fc7\u8fd9\u4e2a\u9650\u5236\uff0c\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u4ec5\u5728\u53c2\u6570\u7c7b\u578b\u3001\u4e2a\u6570\u6216\u987a\u5e8f\u4e0a\u6709\u6240\u4e0d\u540c\u3002\u8fd9\u771f\u662f\u4e2a\u574f\u4e3b\u610f\u3002\u9762\u5bf9\u8fd9\u6837\u4e00\u4e2a API\uff0c\u7528\u6237\u5c06\u6c38\u8fdc\u65e0\u6cd5\u8bb0\u4f4f\u8be5\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4e14\u6700\u7ec8\u4f1a\u9519\u8bef\u5730\u8c03\u7528\u4e0d\u9002\u5408\u7684\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u4e0d\u53c2\u8003\u7c7b\u6587\u6863\uff0c\u9605\u8bfb\u4f7f\u7528\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u4ee3\u7801\u7684\u4eba\u5c31\u4e0d\u4f1a\u77e5\u9053\u4ee3\u7801\u7684\u4f5c\u7528\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a",(0,r.kt)("inlineCode",{parentName:"strong"},"two")," \u4e0d\u5e94\u662f\u786e\u6570\uff0c\u5e94\u7406\u89e3\u4e3a\u6982\u6570\uff0c\u4e3a\u7ed5\u8fc7\u8fd9\u4e2a\u9650\u5236\u63d0\u4f9b\u7684\u6784\u9020\u53ef\u4ee5\u4e0d\u6b62\u4e24\u4e2a\uff1b\u540e\u534a\u53e5 ",(0,r.kt)("inlineCode",{parentName:"strong"},"...whose parameter lists differ only in the order of their parameter types.")," \u505a\u4e86\u610f\u8bd1\u3002")),(0,r.kt)("p",null,"Because they have names, static factory methods don\u2019t share the restriction discussed in the previous paragraph. In cases where a class seems to require multiple constructors with the same signature, replace the constructors with static factory methods and carefully chosen names to highlight their differences."),(0,r.kt)("p",null,"\u56e0\u4e3a\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u6709\u786e\u5207\u540d\u79f0\uff0c\u6240\u4ee5\u5b83\u4eec\u6ca1\u6709\u524d\u4e00\u6bb5\u8ba8\u8bba\u7684\u5c40\u9650\u3002\u5982\u679c\u4e00\u4e2a\u7c7b\u9700\u8981\u5177\u6709\u76f8\u540c\u7b7e\u540d\u7684\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u7528\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u66ff\u6362\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4ed4\u7ec6\u9009\u62e9\u540d\u79f0\u4ee5\u7a81\u51fa\u5b83\u4eec\u7684\u533a\u522b\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A second advantage of static factory methods is that, unlike constructors,they are not required to create a new object each time they\u2019re invoked.")," This allows immutable classes (Item 17) to use preconstructed instances, or to cache instances as they\u2019re constructed, and dispense them repeatedly to avoid creating unnecessary duplicate objects. The Boolean.valueOf(boolean) method illustrates this technique: it never creates an object. This technique is similar to the Flyweight pattern ","[Gamma95]",". It can greatly improve performance if equivalent objects are requested often, especially if they are expensive to create."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4e0e\u6784\u9020\u51fd\u6570\u76f8\u6bd4\u7684\u7b2c\u4e8c\u4e2a\u4f18\u70b9\uff0c\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4e0d\u9700\u8981\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u521b\u5efa\u65b0\u5bf9\u8c61\u3002")," \u8fd9\u5141\u8bb8\u4e0d\u53ef\u53d8\u7c7b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-4-Item-17-Minimize-mutability"},"Item-17"),"\uff09\u4f7f\u7528\u9884\u5148\u6784\u9020\u7684\u5b9e\u4f8b\uff0c\u6216\u5728\u6784\u9020\u5b9e\u4f8b\u65f6\u7f13\u5b58\u5b9e\u4f8b\uff0c\u5e76\u91cd\u590d\u5206\u914d\u5b83\u4eec\u4ee5\u907f\u514d\u521b\u5efa\u4e0d\u5fc5\u8981\u7684\u91cd\u590d\u5bf9\u8c61\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"Boolean.valueOf(boolean)")," \u65b9\u6cd5\u8bf4\u660e\u4e86\u8fd9\u79cd\u6280\u672f\uff1a\u5b83\u4ece\u4e0d\u521b\u5efa\u5bf9\u8c61\u3002\u8fd9\u79cd\u6280\u672f\u7c7b\u4f3c\u4e8e\u4eab\u5143\u6a21\u5f0f ","[Gamma95]","\u3002\u5982\u679c\u7ecf\u5e38\u8bf7\u6c42\u76f8\u540c\u7684\u5bf9\u8c61\uff0c\u7279\u522b\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u7684\u4ee3\u4ef7\u5f88\u9ad8\u65f6\uff0c\u5b83\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u9ad8\u6027\u80fd\u3002"),(0,r.kt)("p",null,"The ability of static factory methods to return the same object from repeated invocations allows classes to maintain strict control over what instances exist at any time. Classes that do this are said to be instance-controlled. There are several reasons to write instance-controlled classes. Instance control allows a class to guarantee that it is a singleton (Item 3) or noninstantiable (Item 4). Also,it allows an immutable value class (Item 17) to make the guarantee that no two equal instances exist: a.equals(b) if and only if a == b. This is the basis of the Flyweight pattern ","[Gamma95]",". Enum types (Item 34) provide this guarantee."),(0,r.kt)("p",null,"\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u5728\u91cd\u590d\u8c03\u7528\u4e2d\u80fd\u591f\u8fd4\u56de\u76f8\u540c\u5bf9\u8c61\uff0c\u8fd9\u6837\u7684\u80fd\u529b\u5141\u8bb8\u7c7b\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u80fd\u4e25\u683c\u63a7\u5236\u5b58\u5728\u7684\u5b9e\u4f8b\u3002\u8fd9\u6837\u7684\u7c7b\u88ab\u79f0\u4e3a\u5b9e\u4f8b\u53d7\u63a7\u7684\u7c7b\u3002\u7f16\u5199\u5b9e\u4f8b\u53d7\u63a7\u7684\u7c7b\u6709\u51e0\u4e2a\u539f\u56e0\u3002\u5b9e\u4f8b\u63a7\u5236\u5141\u8bb8\u4e00\u4e2a\u7c7b\u6765\u4fdd\u8bc1\u5b83\u662f\u4e00\u4e2a\u5355\u4f8b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"},"Item-3"),"\uff09\u6216\u4e0d\u53ef\u5b9e\u4f8b\u5316\u7684\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-2-Item-4-Enforce-noninstantiability-with-a-private-constructor"},"Item-4"),"\uff09\u3002\u540c\u65f6\uff0c\u5b83\u5141\u8bb8\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u503c\u7c7b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-4-Item-17-Minimize-mutability"},"Item-17"),"\uff09\u4fdd\u8bc1\u4e0d\u5b58\u5728\u4e24\u4e2a\u76f8\u540c\u7684\u5b9e\u4f8b\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"a.equals(b)")," \u5f53\u4e14\u4ec5\u5f53 ",(0,r.kt)("inlineCode",{parentName:"p"},"a==b")," \u4e3a true\u3002\u8fd9\u662f\u4eab\u5143\u6a21\u5f0f\u7684\u57fa\u7840 ","[Gamma95]","\u3002\u679a\u4e3e\u7c7b\u578b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-6-Item-34-Use-enums-instead-of-int-constants"},"Item-34"),"\uff09\u63d0\u4f9b\u4e86\u8fd9\u79cd\u4fdd\u8bc1\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a\u539f\u6587 noninstantiable \u5e94\u4fee\u6539\u4e3a non-instantiable \uff0c\u8bd1\u4e3a\u300c\u4e0d\u53ef\u5b9e\u4f8b\u5316\u7684\u300d")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A third advantage of static factory methods is that, unlike constructors,they can return an object of any subtype of their return type.")," This gives you great flexibility in choosing the class of the returned object."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4e0e\u6784\u9020\u51fd\u6570\u76f8\u6bd4\u7684\u7b2c\u4e09\u4e2a\u4f18\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u83b7\u53d6\u8fd4\u56de\u7c7b\u578b\u7684\u4efb\u4f55\u5b50\u7c7b\u7684\u5bf9\u8c61\u3002")," \u8fd9\u4e3a\u9009\u62e9\u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u63d0\u4f9b\u4e86\u5f88\u5927\u7684\u7075\u6d3b\u6027\u3002"),(0,r.kt)("p",null,"One application of this flexibility is that an API can return objects without making their classes public. Hiding implementation classes in this fashion leads to a very compact API. This technique lends itself to interface-based frameworks (Item 20), where interfaces provide natural return types for static factory methods."),(0,r.kt)("p",null,"\u8fd9\u79cd\u7075\u6d3b\u6027\u7684\u4e00\u4e2a\u5e94\u7528\u662f API \u53ef\u4ee5\u5728\u4e0d\u516c\u5f00\u5176\u7c7b\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de\u5bf9\u8c61\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u9690\u85cf\u5b9e\u73b0\u7c7b\u4f1a\u5f62\u6210\u4e00\u4e2a\u975e\u5e38\u7d27\u51d1\u7684 API\u3002\u8fd9\u79cd\u6280\u672f\u9002\u7528\u4e8e\u57fa\u4e8e\u63a5\u53e3\u7684\u6846\u67b6\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes"},"Item-20"),"\uff09\uff0c\u5176\u4e2d\u63a5\u53e3\u4e3a\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u63d0\u4f9b\u4e86\u81ea\u7136\u7684\u8fd4\u56de\u7c7b\u578b\u3002"),(0,r.kt)("p",null,"Prior to Java 8, interfaces couldn\u2019t have static methods. By convention, static factory methods for an interface named Type were put in a noninstantiable companion class (Item 4) named Types. For example, the Java Collections Framework has forty-five utility implementations of its interfaces, providing unmodifiable collections, synchronized collections, and the like. Nearly all of these implementations are exported via static factory methods in one noninstantiable class (java.util.Collections). The classes of the returned objects are all nonpublic."),(0,r.kt)("p",null,"\u5728 Java 8 \u4e4b\u524d\uff0c\u63a5\u53e3\u4e0d\u80fd\u6709\u9759\u6001\u65b9\u6cd5\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u4e00\u4e2a\u540d\u4e3a Type \u7684\u63a5\u53e3\u7684\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u88ab\u653e\u5728\u4e00\u4e2a\u540d\u4e3a Types \u7684\u4e0d\u53ef\u5b9e\u4f8b\u5316\u7684\u4f34\u968f\u7c7b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-2-Item-4-Enforce-noninstantiability-with-a-private-constructor"},"Item-4"),"\uff09\u4e2d\u3002\u4f8b\u5982\uff0cJava \u7684 Collections \u6846\u67b6\u6709 45 \u4e2a\u63a5\u53e3\u5b9e\u7528\u5de5\u5177\u5b9e\u73b0\uff0c\u63d0\u4f9b\u4e86\u4e0d\u53ef\u4fee\u6539\u7684\u96c6\u5408\u3001\u540c\u6b65\u96c6\u5408\u7b49\u3002\u51e0\u4e4e\u6240\u6709\u8fd9\u4e9b\u5b9e\u73b0\u90fd\u662f\u901a\u8fc7\u4e00\u4e2a\u975e\u5b9e\u4f8b\u5316\u7c7b\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.Collections"),"\uff09\u4e2d\u7684\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u5bfc\u51fa\u7684\u3002\u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u90fd\u662f\u975e\u516c\u5171\u7684\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a\u539f\u6587 noninstantiable \u5e94\u4fee\u6539\u4e3a non-instantiable \uff0c\u8bd1\u4e3a\u300c\u4e0d\u53ef\u5b9e\u4f8b\u5316\u7684\u300d")),(0,r.kt)("p",null,"The Collections Framework API is much smaller than it would have been had it exported forty-five separate public classes, one for each convenience implementation. It is not just the bulk of the API that is reduced but the conceptual weight: the number and difficulty of the concepts that programmers must master in order to use the API. The programmer knows that the returned object has precisely the API specified by its interface, so there is no need to read additional class documentation for the implementation class. Furthermore, using such a static factory method requires the client to refer to the returned object by interface rather than implementation class, which is generally good practice (Item 64)."),(0,r.kt)("p",null,"Collections \u6846\u67b6 API \u6bd4\u5b83\u5bfc\u51fa 45 \u4e2a\u72ec\u7acb\u7684\u516c\u5171\u7c7b\u8981\u5c0f\u5f97\u591a\uff0c\u6bcf\u4e2a\u516c\u5171\u7c7b\u5bf9\u5e94\u4e00\u4e2a\u65b9\u4fbf\u7684\u5b9e\u73b0\u3002\u51cf\u5c11\u7684\u4e0d\u4ec5\u4ec5\u662f API \u7684\u6570\u91cf\uff0c\u8fd8\u6709\u6982\u5ff5\u4e0a\u7684\u51cf\u5c11\uff1a\u7a0b\u5e8f\u5458\u4e3a\u4e86\u4f7f\u7528 API \u5fc5\u987b\u638c\u63e1\u7684\u6982\u5ff5\u7684\u6570\u91cf\u548c\u96be\u5ea6\u3002\u7a0b\u5e8f\u5458\u77e5\u9053\u8fd4\u56de\u7684\u5bf9\u8c61\u662f\u7531\u76f8\u5173\u7684\u63a5\u53e3\u7cbe\u786e\u5730\u6307\u5b9a\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u4e3a\u5b9e\u73b0\u7c7b\u9605\u8bfb\u989d\u5916\u7684\u7c7b\u6587\u6863\u3002\u6b64\u5916\uff0c\u4f7f\u7528\u8fd9\u79cd\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u9700\u8981\u5ba2\u6237\u7aef\u901a\u8fc7\u63a5\u53e3\u800c\u4e0d\u662f\u5b9e\u73b0\u7c7b\u5f15\u7528\u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u8fd9\u901a\u5e38\u662f\u5f88\u597d\u7684\u505a\u6cd5\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-9-Item-64-Refer-to-objects-by-their-interfaces"},"Item-64"),"\uff09\u3002"),(0,r.kt)("p",null,"As of\uff08\u81ea..\u8d77\uff09 Java 8, the restriction that interfaces cannot contain static methods was eliminated, so there is typically little reason to provide a noninstantiable companion class for an interface. Many public static members that would have been at home in such a class should instead be put in the interface itself. Note,however, that it may still be necessary to put the bulk of the implementation code behind these static methods in a separate package-private class. This is because Java 8 requires all static members of an interface to be public. Java 9 allows private static methods, but static fields and static member classes are still required to be public."),(0,r.kt)("p",null,"\u81ea Java 8 \u8d77\uff0c\u6d88\u9664\u4e86\u63a5\u53e3\u4e0d\u80fd\u5305\u542b\u9759\u6001\u65b9\u6cd5\u7684\u9650\u5236\uff0c\u56e0\u6b64\u901a\u5e38\u6ca1\u6709\u7406\u7531\u4e3a\u63a5\u53e3\u63d0\u4f9b\u4e0d\u53ef\u5b9e\u4f8b\u5316\u7684\u4f34\u968f\u7c7b\u3002\u8bb8\u591a\u516c\u5171\u9759\u6001\u6210\u5458\u5e94\u8be5\u653e\u5728\u63a5\u53e3\u672c\u8eab\u4e2d\uff0c\u800c\u4e0d\u662f\u653e\u5728\u7c7b\u4e2d\u3002\u4f46\u662f\uff0c\u8bf7\u6ce8\u610f\uff0c\u4ecd\u7136\u6709\u5fc5\u8981\u5c06\u8fd9\u4e9b\u9759\u6001\u65b9\u6cd5\u80cc\u540e\u7684\u5927\u90e8\u5206\u5b9e\u73b0\u4ee3\u7801\u653e\u5230\u5355\u72ec\u7684\u5305\u79c1\u6709\u7c7b\u4e2d\u3002\u8fd9\u662f\u56e0\u4e3a Java 8 \u8981\u6c42\u63a5\u53e3\u7684\u6240\u6709\u9759\u6001\u6210\u5458\u90fd\u662f\u516c\u5171\u7684\u3002Java 9 \u5141\u8bb8\u79c1\u6709\u9759\u6001\u65b9\u6cd5\uff0c\u4f46\u662f\u9759\u6001\u5b57\u6bb5\u548c\u9759\u6001\u6210\u5458\u7c7b\u4ecd\u7136\u9700\u8981\u662f\u516c\u5171\u7684\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A fourth advantage of static factories is that the class of the returned object can vary from call to call as a function of the input parameters.")," Any subtype of the declared return type is permissible. The class of the returned object can also vary from release to release."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u9759\u6001\u5de5\u5382\u7684\u7b2c\u56db\u4e2a\u4f18\u70b9\u662f\uff0c\u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u53ef\u4ee5\u968f\u8c03\u7528\u7684\u4e0d\u540c\u800c\u53d8\u5316\uff0c\u4f5c\u4e3a\u8f93\u5165\u53c2\u6570\u7684\u51fd\u6570\u3002")," \u58f0\u660e\u7684\u8fd4\u56de\u7c7b\u578b\u7684\u4efb\u4f55\u5b50\u7c7b\u578b\u90fd\u662f\u5141\u8bb8\u7684\u3002\u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u4e5f\u53ef\u4ee5\u56e0\u7248\u672c\u800c\u5f02\u3002"),(0,r.kt)("p",null,"The EnumSet class (Item 36) has no public constructors, only static factories.In the OpenJDK implementation, they return an instance of one of two subclasses, depending on the size of the underlying enum type: if it has sixty-four or fewer elements, as most enum types do, the static factories return a RegularEnumSet instance, which is backed by a single long; if the enum type has sixty-five or more elements, the factories return a JumboEnumSet instance, backed by a long array."),(0,r.kt)("p",null,"EnumSet \u7c7b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-6-Item-36-Use-EnumSet-instead-of-bit-fields"},"Item-36"),"\uff09\u6ca1\u6709\u516c\u5171\u6784\u9020\u51fd\u6570\uff0c\u53ea\u6709\u9759\u6001\u5de5\u5382\u3002\u5728 OpenJDK \u5b9e\u73b0\u4e2d\uff0c\u5b83\u4eec\u8fd4\u56de\u4e24\u4e2a\u5b50\u7c7b\u4e2d\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5e95\u5c42 enum \u7c7b\u578b\u7684\u5927\u5c0f\uff1a\u5982\u679c\u5b83\u6709 64 \u4e2a\u6216\u66f4\u5c11\u7684\u5143\u7d20\uff0c\u5c31\u50cf\u5927\u591a\u6570 enum \u7c7b\u578b\u4e00\u6837\uff0c\u9759\u6001\u5de5\u5382\u8fd4\u56de\u4e00\u4e2a long \u7c7b\u578b\u7684 RegularEnumSet \u5b9e\u4f8b\uff1b\u5982\u679c enum \u7c7b\u578b\u6709 65 \u4e2a\u6216\u66f4\u591a\u7684\u5143\u7d20\uff0c\u5de5\u5382\u5c06\u8fd4\u56de\u4e00\u4e2a\u7531 ",(0,r.kt)("inlineCode",{parentName:"p"},"long[]")," \u7c7b\u578b\u7684 JumboEnumSet \u5b9e\u4f8b\u3002"),(0,r.kt)("p",null,"The existence of these two implementation classes is invisible to clients. If RegularEnumSet ceased to offer performance advantages for small enum types, it could be eliminated from a future release with no ill effects. Similarly, a future release could add a third or fourth implementation of EnumSet if it proved beneficial for performance. Clients neither know nor care about the class of the object they get back from the factory; they care only that it is some subclass of EnumSet."),(0,r.kt)("p",null,"\u5ba2\u6237\u7aef\u770b\u4e0d\u5230\u8fd9\u4e24\u4e2a\u5b9e\u73b0\u7c7b\u7684\u5b58\u5728\u3002\u5982\u679c RegularEnumSet \u4e0d\u518d\u4e3a\u5c0f\u578b enum \u7c7b\u578b\u63d0\u4f9b\u6027\u80fd\u4f18\u52bf\uff0c\u5b83\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u7684\u7248\u672c\u4e2d\u88ab\u6d88\u9664\uff0c\u800c\u4e0d\u4f1a\u4ea7\u751f\u4e0d\u826f\u5f71\u54cd\u3002\u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u4e8b\u5b9e\u8bc1\u660e EnumSet \u6709\u76ca\u4e8e\u6027\u80fd\uff0c\u672a\u6765\u7684\u7248\u672c\u53ef\u4ee5\u6dfb\u52a0\u7b2c\u4e09\u6216\u7b2c\u56db\u4e2a EnumSet \u5b9e\u73b0\u3002\u5ba2\u6237\u7aef\u65e2\u4e0d\u77e5\u9053\u4e5f\u4e0d\u5173\u5fc3\u4ece\u5de5\u5382\u8fd4\u56de\u7684\u5bf9\u8c61\u7684\u7c7b\uff1b\u5b83\u4eec\u53ea\u5173\u5fc3\u5b83\u662f EnumSet \u7684\u67d0\u4e2a\u5b50\u7c7b\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A fifth advantage of static factories is that the class of the returned object need not exist when the class containing the method is written.")," Such flexible static factory methods form the basis of service provider frameworks, like the Java Database Connectivity API (JDBC). A service provider framework is a system in which providers implement a service, and the system makes the implementations available to clients, decoupling the clients from the implementations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u9759\u6001\u5de5\u5382\u7684\u7b2c\u4e94\u4e2a\u4f18\u70b9\u662f\uff0c\u5f53\u7f16\u5199\u5305\u542b\u65b9\u6cd5\u7684\u7c7b\u65f6\uff0c\u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u4e0d\u9700\u8981\u5b58\u5728\u3002")," \u8fd9\u79cd\u7075\u6d3b\u7684\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u6784\u6210\u4e86\u670d\u52a1\u63d0\u4f9b\u8005\u6846\u67b6\u7684\u57fa\u7840\uff0c\u6bd4\u5982 Java \u6570\u636e\u5e93\u8fde\u63a5 API\uff08JDBC\uff09\u3002\u670d\u52a1\u63d0\u4f9b\u8005\u6846\u67b6\u662f\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5176\u4e2d\u63d0\u4f9b\u8005\u5b9e\u73b0\u4e00\u4e2a\u670d\u52a1\uff0c\u7cfb\u7edf\u4f7f\u5ba2\u6237\u7aef\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5b9e\u73b0\uff0c\u4ece\u800c\u5c06\u5ba2\u6237\u7aef\u4e0e\u5b9e\u73b0\u5206\u79bb\u3002"),(0,r.kt)("p",null,"There are three essential components in a service provider framework: a service interface, which represents an implementation; a provider registration API, which providers use to register implementations; and a service access API,which clients use to obtain instances of the service. The service access API may allow clients to specify criteria for choosing an implementation. In the absence of such criteria, the API returns an instance of a default implementation, or allows the client to cycle through all available implementations. The service access API is the flexible static factory that forms the basis of the service provider framework."),(0,r.kt)("p",null,"\u670d\u52a1\u63d0\u4f9b\u8005\u6846\u67b6\u4e2d\u6709\u4e09\u4e2a\u57fa\u672c\u7ec4\u4ef6\uff1a\u4ee3\u8868\u5b9e\u73b0\u7684\u670d\u52a1\u63a5\u53e3\uff1b\u63d0\u4f9b\u8005\u6ce8\u518c API\uff0c\u63d0\u4f9b\u8005\u4f7f\u7528\u5b83\u6765\u6ce8\u518c\u5b9e\u73b0\uff0c\u4ee5\u53ca\u670d\u52a1\u8bbf\u95ee API\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u5b83\u6765\u83b7\u53d6\u670d\u52a1\u7684\u5b9e\u4f8b\u3002\u670d\u52a1\u8bbf\u95ee API \u5141\u8bb8\u5ba2\u6237\u7aef\u6307\u5b9a\u9009\u62e9\u5b9e\u73b0\u7684\u6807\u51c6\u3002\u5728\u6ca1\u6709\u8fd9\u4e9b\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0cAPI \u8fd4\u56de\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\u7684\u5b9e\u4f8b\uff0c\u6216\u8005\u5141\u8bb8\u5ba2\u6237\u7aef\u5faa\u73af\u4f7f\u7528\u6240\u6709\u53ef\u7528\u7684\u5b9e\u73b0\u3002\u670d\u52a1\u8bbf\u95ee API \u662f\u7075\u6d3b\u7684\u9759\u6001\u5de5\u5382\uff0c\u5b83\u6784\u6210\u4e86\u670d\u52a1\u63d0\u4f9b\u8005\u6846\u67b6\u7684\u57fa\u7840\u3002"),(0,r.kt)("p",null,"An optional fourth component of a service provider framework is a service provider interface, which describes a factory object that produce instances of the service interface. In the absence of a service provider interface, implementations must be instantiated reflectively (Item 65). In the case of JDBC, Connection plays the part of the service interface, DriverManager.registerDriver is the provider registration API, DriverManager.getConnection is the service access API, and Driver is the service provider interface."),(0,r.kt)("p",null,"\u670d\u52a1\u63d0\u4f9b\u8005\u6846\u67b6\u7684\u7b2c\u56db\u4e2a\u53ef\u9009\u7ec4\u4ef6\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u63a5\u53e3\uff0c\u5b83\u63cf\u8ff0\u4e86\u4ea7\u751f\u670d\u52a1\u63a5\u53e3\u5b9e\u4f8b\u7684\u5de5\u5382\u5bf9\u8c61\u3002\u5728\u6ca1\u6709\u670d\u52a1\u63d0\u4f9b\u8005\u63a5\u53e3\u7684\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u4ee5\u53cd\u5c04\u7684\u65b9\u5f0f\u5b9e\u4f8b\u5316\u5b9e\u73b0\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-9-Item-65-Prefer-interfaces-to-reflection"},"Item-65"),"\uff09\u3002\u5728 JDBC \u4e2d\uff0c\u8fde\u63a5\u626e\u6f14\u670d\u52a1\u63a5\u53e3 DriverManager \u7684\u89d2\u8272\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"DriverManager.registerDriver")," \u662f\u63d0\u4f9b\u5546\u6ce8\u518c\u7684 API\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"DriverManager.getConnection")," \u662f\u670d\u52a1\u8bbf\u95ee API\uff0c\u9a71\u52a8\u7a0b\u5e8f\u662f\u670d\u52a1\u63d0\u4f9b\u8005\u63a5\u53e3\u3002"),(0,r.kt)("p",null,"There are many variants of the service provider framework pattern. For example, the service access API can return a richer service interface to clients than the one furnished by providers. This is the Bridge pattern ","[Gamma95]",". Dependency injection frameworks (Item 5) can be viewed as powerful service providers. Since Java 6, the platform includes a general-purpose service provider framework, java.util.ServiceLoader, so you needn\u2019t, and generally shouldn\u2019t, write your own (Item 59). JDBC doesn\u2019t use ServiceLoader, as the former predates the latter."),(0,r.kt)("p",null,"\u670d\u52a1\u63d0\u4f9b\u8005\u6846\u67b6\u6a21\u5f0f\u6709\u8bb8\u591a\u53d8\u4f53\u3002\u4f8b\u5982\uff0c\u670d\u52a1\u8bbf\u95ee API \u53ef\u4ee5\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u6bd4\u63d0\u4f9b\u8005\u63d0\u4f9b\u7684\u66f4\u4e30\u5bcc\u7684\u670d\u52a1\u63a5\u53e3\u3002\u8fd9\u662f\u6865\u63a5\u6a21\u5f0f ","[Gamma95]","\u3002\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-2-Item-5-Prefer-dependency-injection-to-hardwiring-resources"},"Item-5"),"\uff09\u53ef\u4ee5\u770b\u4f5c\u662f\u5f3a\u5927\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u3002\u7531\u4e8e\u662f Java 6\uff0c\u8be5\u5e73\u53f0\u5305\u62ec\u4e00\u4e2a\u901a\u7528\u670d\u52a1\u63d0\u4f9b\u8005\u6846\u67b6 ",(0,r.kt)("inlineCode",{parentName:"p"},"Java.util.ServiceLoader"),"\uff0c\u6240\u4ee5\u4f60\u4e0d\u9700\u8981\uff0c\u901a\u5e38\u4e5f\u4e0d\u5e94\u8be5\u81ea\u5df1\u5199\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-9-Item-59-Know-and-use-the-libraries"},"Item-59"),"\uff09\u3002JDBC \u4e0d\u4f7f\u7528 ServiceLoader\uff0c\u56e0\u4e3a\u524d\u8005\u6bd4\u540e\u8005\u8981\u65e9\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The main limitation of providing only static factory methods is that classes without public or protected constructors cannot be subclassed.")," For example, it is impossible to subclass any of the convenience implementation classes in the Collections Framework. Arguably this can be a blessing in disguise because it encourages programmers to use composition instead of inheritance (Item 18), and is required for immutable types (Item 17)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u4ec5\u63d0\u4f9b\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u7684\u4e3b\u8981\u5c40\u9650\u662f\uff0c\u6ca1\u6709\u516c\u5171\u6216\u53d7\u4fdd\u62a4\u6784\u9020\u51fd\u6570\u7684\u7c7b\u4e0d\u80fd\u88ab\u5b50\u7c7b\u5316\u3002")," \u4f8b\u5982\uff0c\u4e0d\u53ef\u80fd\u5728\u96c6\u5408\u6846\u67b6\u4e2d\u5b50\u7c7b\u5316\u4efb\u4f55\u65b9\u4fbf\u7684\u5b9e\u73b0\u7c7b\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u79cd\u56e0\u7978\u5f97\u798f\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u5b83\u9f13\u52b1\u7a0b\u5e8f\u5458\u4f7f\u7528\u7ec4\u5408\u800c\u4e0d\u662f\u7ee7\u627f\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-4-Item-18-Favor-composition-over-inheritance"},"Item-18"),"\uff09\uff0c\u5e76\u4e14\u5bf9\u4e8e\u4e0d\u53ef\u53d8\u7684\u7c7b\u578b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-4-Item-17-Minimize-mutability"},"Item-17"),"\uff09\u662f\u5fc5\u9700\u7684\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A second shortcoming of static factory methods is that they are hard for programmers to find.")," They do not stand out in API documentation in the way that constructors do, so it can be difficult to figure out how to instantiate a class that provides static factory methods instead of constructors. The Javadoc tool may someday draw attention to static factory methods. In the meantime, you can reduce this problem by drawing attention to static factories in class or interface documentation and by adhering to common naming conventions. Here are some common names for static factory methods. This list is far from exhaustive:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u7f3a\u70b9\u662f\u7a0b\u5e8f\u5458\u5f88\u96be\u627e\u5230\u5b83\u4eec\u3002")," \u5b83\u4eec\u5728 API \u6587\u6863\u4e2d\u4e0d\u50cf\u6784\u9020\u51fd\u6570\u90a3\u6837\u5f15\u4eba\u6ce8\u76ee\uff0c\u56e0\u6b64\u5f88\u96be\u5f04\u6e05\u695a\u5982\u4f55\u5b9e\u4f8b\u5316\u4e00\u4e2a\u53ea\u63d0\u4f9b\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u800c\u6ca1\u6709\u6784\u9020\u51fd\u6570\u7684\u7c7b\u3002Javadoc \u5de5\u5177\u603b\u6709\u4e00\u5929\u4f1a\u5173\u6ce8\u5230\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7c7b\u6216\u63a5\u53e3\u6587\u6863\u4e2d\u5bf9\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u591a\u52a0\u7559\u610f\uff0c\u4ee5\u53ca\u9075\u5b88\u901a\u7528\u547d\u540d\u7ea6\u5b9a\u7684\u65b9\u5f0f\u6765\u51cf\u5c11\u8fd9\u4e2a\u56f0\u6270\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u7684\u5e38\u7528\u540d\u79f0\u3002\u8fd9\u4e2a\u5217\u8868\u8fd8\u8fdc\u4e0d\u591f\u8be6\u5c3d\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"from\u2014A type-conversion method that takes a single parameter and returns a corresponding instance of this type, for example:")),(0,r.kt)("p",null,"from\uff0c\u4e00\u79cd\u578b\u8f6c\u6362\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u63a5\u53d7\u5355\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u8be5\u7c7b\u578b\u7684\u76f8\u5e94\u5b9e\u4f8b\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Date d = Date.from(instant);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"of\u2014An aggregation method that takes multiple parameters and returns an instance of this type that incorporates them, for example:")),(0,r.kt)("p",null,"of\uff0c\u4e00\u4e2a\u805a\u5408\u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u591a\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u8fd9\u4e9b\u53c2\u6570\u7684\u5b9e\u4f8b\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Set<Rank> faceCards = EnumSet.of(JACK, QUEEN, KING);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"valueOf\u2014A more verbose alternative to from and of, for example:")),(0,r.kt)("p",null,"valueOf\uff0c\u4e00\u79cd\u66ff\u4ee3 from \u548c of \u4f46\u66f4\u5197\u957f\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"instance or getInstance\u2014Returns an instance that is described by its parameters (if any) but cannot be said to have the same value, for example:")),(0,r.kt)("p",null,"instance \u6216 getInstance\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u7531\u5176\u53c2\u6570\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u63cf\u8ff0\uff0c\u4f46\u4e0d\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"StackWalker luke = StackWalker.getInstance(options);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"create or newInstance\u2014Like instance or getInstance, except that the method guarantees that each call returns a new instance, for example:")),(0,r.kt)("p",null,"create \u6216 newInstance\uff0c\u4e0e instance \u6216 getInstance \u7c7b\u4f3c\uff0c\u53ea\u662f\u8be5\u65b9\u6cd5\u4fdd\u8bc1\u6bcf\u4e2a\u8c03\u7528\u90fd\u8fd4\u56de\u4e00\u4e2a\u65b0\u5b9e\u4f8b\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Object newArray = Array.newInstance(classObject, arrayLen);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"getType\u2014Like getInstance, but used if the factory method is in a different class. Type is the type of object returned by the factory method, for example:")),(0,r.kt)("p",null,"getType\uff0c\u7c7b\u4f3c\u4e8e getInstance\uff0c\u4f46\u5982\u679c\u5de5\u5382\u65b9\u6cd5\u4f4d\u4e8e\u4e0d\u540c\u7684\u7c7b\u4e2d\uff0c\u5219\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002\u5176\u7c7b\u578b\u662f\u5de5\u5382\u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"FileStore fs = Files.getFileStore(path);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"newType\u2014Like newInstance, but used if the factory method is in a different class. Type is the type of object returned by the factory method, for example:")),(0,r.kt)("p",null,"newType\uff0c\u4e0e newInstance \u7c7b\u4f3c\uff0c\u4f46\u662f\u5982\u679c\u5de5\u5382\u65b9\u6cd5\u5728\u4e0d\u540c\u7684\u7c7b\u4e2d\u4f7f\u7528\u3002\u7c7b\u578b\u662f\u5de5\u5382\u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"BufferedReader br = Files.newBufferedReader(path);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type\u2014A concise alternative to getType and newType, for example:")),(0,r.kt)("p",null,"type\uff0c\u4e00\u4e2a\u7528\u6765\u66ff\u4ee3 getType \u548c newType \u7684\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"List<Complaint> litany = Collections.list(legacyLitany);\n")),(0,r.kt)("p",null,"In summary, static factory methods and public constructors both have their uses, and it pays to understand their relative merits. Often static factories are preferable, so avoid the reflex to provide public constructors without first considering static factories."),(0,r.kt)("p",null,"\u603b\u4e4b\uff0c\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u548c\u516c\u5171\u6784\u9020\u5668\u90fd\u6709\u5404\u81ea\u7684\u7528\u9014\uff0c\u7406\u89e3\u5b83\u4eec\u76f8\u6bd4\u800c\u8a00\u7684\u4f18\u70b9\u662f\u503c\u5f97\u7684\u3002\u901a\u5e38\u9759\u6001\u5de5\u5382\u7684\u65b9\u5f0f\u66f4\u53ef\u53d6\uff0c\u56e0\u6b64\u5e94\u907f\u514d\u5728\u6ca1\u6709\u8003\u8651\u9759\u6001\u5de5\u5382\u7684\u60c5\u51b5\u4e0b\u5c31\u63d0\u4f9b\u516c\u5171\u6784\u9020\u51fd\u6570\u3002"),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"./Chapter-2-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters"},"Item 2: Consider a builder when faced with many constructor parameters\uff08\u5728\u9762\u5bf9\u591a\u4e2a\u6784\u9020\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u8bf7\u8003\u8651\u6784\u5efa\u5668\uff09")))))}m.isMDXComponent=!0}}]);