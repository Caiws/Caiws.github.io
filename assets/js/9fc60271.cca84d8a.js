"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3396],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>m});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},h=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=n,d=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return a?o.createElement(d,i(i({ref:t},h),{},{components:a})):o.createElement(d,i({ref:t},h))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<r;c++)i[c]=a[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8821:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=a(7462),n=(a(7294),a(3905));const r={},i=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-8/Chapter-8-Item-49-Check-parameters-for-validity",id:"Books/EffectiveJava3/Chapter-8/Chapter-8-Item-49-Check-parameters-for-validity",title:"Chapter-8-Item-49-Check-parameters-for-validity",description:"Chapter 8. Methods\uff08\u65b9\u6cd5\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-49-Check-parameters-for-validity.md",sourceDirName:"Books/EffectiveJava3/Chapter-8",slug:"/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-49-Check-parameters-for-validity",permalink:"/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-49-Check-parameters-for-validity",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-49-Check-parameters-for-validity.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-8-Introduction",permalink:"/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Introduction"},next:{title:"Chapter-8-Item-50-Make-defensive-copies-when-needed",permalink:"/docs/Books/EffectiveJava3/Chapter-8/Chapter-8-Item-50-Make-defensive-copies-when-needed"}},l={},c=[{value:"Chapter 8. Methods\uff08\u65b9\u6cd5\uff09",id:"chapter-8-methods\u65b9\u6cd5",level:2},{value:"Item 49: Check parameters for validity\uff08\u68c0\u67e5\u53c2\u6570\u7684\u6709\u6548\u6027\uff09",id:"item-49-check-parameters-for-validity\u68c0\u67e5\u53c2\u6570\u7684\u6709\u6548\u6027",level:3}],h={toc:c};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,o.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-8-methods\u65b9\u6cd5"},"Chapter 8. Methods\uff08\u65b9\u6cd5\uff09"),(0,n.kt)("h3",{id:"item-49-check-parameters-for-validity\u68c0\u67e5\u53c2\u6570\u7684\u6709\u6548\u6027"},"Item 49: Check parameters for validity\uff08\u68c0\u67e5\u53c2\u6570\u7684\u6709\u6548\u6027\uff09"),(0,n.kt)("p",null,"Most methods and constructors have some restrictions on what values may be passed into their parameters. For example, it is not uncommon that index values must be non-negative and object references must be non-null. You should clearly document all such restrictions and enforce them with checks at the beginning of the method body. This is a special case of the general principle that you should attempt to detect errors as soon as possible after they occur. Failing to do so makes it less likely that an error will be detected and makes it harder to determine the source of an error once it has been detected."),(0,n.kt)("p",null,"\u5927\u591a\u6570\u65b9\u6cd5\u548c\u6784\u9020\u51fd\u6570\u90fd\u5bf9\u4f20\u9012\u7ed9\u5b83\u4eec\u7684\u53c2\u6570\u503c\u6709\u4e00\u4e9b\u9650\u5236\u3002\u4f8b\u5982\uff0c\u7d22\u5f15\u503c\u5fc5\u987b\u662f\u975e\u8d1f\u7684\uff0c\u5bf9\u8c61\u5f15\u7528\u5fc5\u987b\u662f\u975e\u7a7a\u7684\uff0c\u8fd9\u79cd\u60c5\u51b5\u5e76\u4e0d\u5c11\u89c1\u3002\u4f60\u5e94\u8be5\u6e05\u695a\u5730\u5728\u6587\u6863\u4e2d\u8bb0\u5f55\u6240\u6709\u8fd9\u4e9b\u9650\u5236\uff0c\u5e76\u5728\u65b9\u6cd5\u4e3b\u4f53\u7684\u5f00\u5934\u4f7f\u7528\u68c0\u67e5\u6765\u5b9e\u65bd\u5b83\u4eec\u3002\u4f60\u5e94\u8be5\u5728\u9519\u8bef\u53d1\u751f\u540e\u5c3d\u5feb\u627e\u5230\u5b83\u4eec\uff0c\u8fd9\u662f\u4e00\u822c\u539f\u5219\u3002\u5982\u679c\u4e0d\u8fd9\u6837\u505a\uff0c\u5c31\u4e0d\u592a\u53ef\u80fd\u68c0\u6d4b\u5230\u9519\u8bef\uff0c\u800c\u4e14\u5373\u4f7f\u68c0\u6d4b\u5230\u9519\u8bef\uff0c\u786e\u5b9a\u9519\u8bef\u7684\u6765\u6e90\u4e5f\u5f88\u96be\u3002"),(0,n.kt)("p",null,"If an invalid parameter value is passed to a method and the method checks its parameters before execution, it will fail quickly and cleanly with an appropriate exception. If the method fails to check its parameters, several things could happen. The method could fail with a confusing exception in the midst of processing. Worse, the method could return normally but silently compute the wrong result. Worst of all, the method could return normally but leave some object in a compromised state, causing an error at some unrelated point in the code at some undetermined time in the future. In other words, failure to validate parameters, can result in a violation of failure atomicity (Item 76)."),(0,n.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u65e0\u6548\u7684\u53c2\u6570\u503c\u88ab\u4f20\u9012\u7ed9\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5982\u679c\u8be5\u65b9\u6cd5\u5728\u6267\u884c\u4e4b\u524d\u4f1a\u68c0\u67e5\u5b83\u7684\u53c2\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fc7\u7a0b\u5c06\u8fc5\u901f\u5931\u8d25\uff0c\u5e76\u5f15\u53d1\u9002\u5f53\u7684\u5f02\u5e38\u3002\u5982\u679c\u65b9\u6cd5\u672a\u80fd\u68c0\u67e5\u5176\u53c2\u6570\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u4ee5\u4e0b\u51e0\u4ef6\u4e8b\u3002\u8be5\u65b9\u6cd5\u53ef\u80fd\u4f1a\u5728\u5904\u7406\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u4ee4\u4eba\u56f0\u60d1\u7684\u5f02\u5e38\u800c\u5931\u8d25\u3002\u66f4\u7cdf\u7684\u662f\uff0c\u8be5\u65b9\u6cd5\u53ef\u4ee5\u6b63\u5e38\u8fd4\u56de\uff0c\u4f46\u4f1a\u9759\u9ed8\u8ba1\u7b97\u9519\u8bef\u7684\u7ed3\u679c\u3002\u6700\u7cdf\u7cd5\u7684\u662f\uff0c\u8be5\u65b9\u6cd5\u53ef\u4ee5\u6b63\u5e38\u8fd4\u56de\uff0c\u4f46\u4f1a\u4f7f\u67d0\u4e2a\u5bf9\u8c61\u5904\u4e8e\u9690\u60a3\u72b6\u6001\uff0c\u4ece\u800c\u5728\u5c06\u6765\u67d0\u4e2a\u4e0d\u786e\u5b9a\u7684\u65f6\u95f4\u5728\u4ee3\u7801\u4e2d\u67d0\u4e2a\u4e0d\u76f8\u5173\u7684\u4f4d\u7f6e\u4e0a\u5bfc\u81f4\u9519\u8bef\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u6ca1\u6709\u9a8c\u8bc1\u53c2\u6570\uff0c\u53ef\u80fd\u4f1a\u8fdd\u53cd\u6545\u969c\u539f\u5b50\u6027\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity"},"Item-76"),"\uff09\u3002"),(0,n.kt)("p",null,"For public and protected methods, use the Javadoc @throws tag to document the exception that will be thrown if a restriction on parameter values is violated (Item 74). Typically, the resulting exception will be IllegalArgumentException, IndexOutOfBoundsException, or NullPointerException (Item 72). Once you\u2019ve documented the restrictions on a method\u2019s parameters and you\u2019ve documented the exceptions that will be thrown if these restrictions are violated, it is a simple matter to enforce the restrictions. Here\u2019s a typical example:"),(0,n.kt)("p",null,"\u5bf9\u4e8e\u516c\u5171\u65b9\u6cd5\u548c\u53d7\u4fdd\u62a4\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u5728\u65b9\u6cd5\u8bf4\u660e\u4f7f\u7528 Javadoc \u7684 ",(0,n.kt)("inlineCode",{parentName:"p"},"@throws")," \u6807\u7b7e\u8bb0\u5f55\u5f02\u5e38\uff0c\u8868\u660e\u5982\u679c\u8fdd\u53cd\u4e86\u5bf9\u53c2\u6570\u503c\u7684\u9650\u5236\uff0c\u5c06\u4f1a\u5f15\u53d1\u8be5\u5f02\u5e38\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-74-Document-all-exceptions-thrown-by-each-method"},"Item-74"),"\uff09\u3002\u901a\u5e38\uff0c\u751f\u6210\u7684\u5f02\u5e38\u5c06\u662f IllegalArgumentException\u3001IndexOutOfBoundsException \u6216 NullPointerException\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-72-Favor-the-use-of-standard-exceptions"},"Item-72"),"\uff09\u3002\u4e00\u65e6\u4f60\u5728\u6587\u6863\u4e2d\u8bb0\u5f55\u4e86\u65b9\u6cd5\u53c2\u6570\u4e0a\u7684\u9650\u5236\uff0c\u5e76\u4e14\u8bb0\u5f55\u4e86\u5982\u679c\u8fdd\u53cd\u8fd9\u4e9b\u9650\u5236\u5c06\u5f15\u53d1\u7684\u5f02\u5e38\uff0c\u90a3\u4e48\u5b9e\u65bd\u8fd9\u4e9b\u9650\u5236\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'/**\n* Returns a BigInteger whose value is (this mod m). This method\n* differs from the remainder method in that it always returns a\n* non-negative BigInteger.\n**\n@param m the modulus, which must be positive\n* @return this mod m\n* @throws ArithmeticException if m is less than or equal to 0\n*/\npublic BigInteger mod(BigInteger m) {\n    if (m.signum() <= 0)\n        throw new ArithmeticException("Modulus <= 0: " + m);\n    ... // Do the computation\n}\n')),(0,n.kt)("p",null,"Note that the doc comment does not say \u201cmod throws NullPointerException if m is null,\u201d even though the method does exactly that, as a byproduct of invoking m.signum(). This exception is documented in the class-level doc comment for the enclosing BigInteger class. The classlevel comment applies to all parameters in all of the class\u2019s public methods. This is a good way to avoid the clutter of documenting every NullPointerException on every method individually. It may be combined with the use of @Nullable or a similar annotation to indicate that a particular parameter may be null, but this practice is not standard, and multiple annotations are in use for this purpose."),(0,n.kt)("p",null,"\u6ce8\u610f\uff0c\u6587\u6863\u6ce8\u91ca\u5e76\u6ca1\u6709\u8bf4\u300c\u5982\u679c m \u4e3a\u7a7a\uff0cmod \u5c06\u629b\u51faNullPointerException\u300d\uff0c\u5c3d\u7ba1\u65b9\u6cd5\u786e\u5b9e\u662f\u8fd9\u6837\u505a\u7684\uff0c\u8fd9\u662f\u8c03\u7528 ",(0,n.kt)("inlineCode",{parentName:"p"},"m.signum()")," \u7684\u526f\u4ea7\u54c1\u3002\u8fd9\u4e2a\u5f02\u5e38\u8bb0\u5f55\u5728\u7c7b\u7ea7\u522b\u7684\u6587\u6863\u6ce8\u91ca\u4e2d\uff0c\u7528\u4e8e\u5305\u542b BigInteger \u7c7b\u3002\u7c7b\u7ea7\u522b\u6ce8\u91ca\u9002\u7528\u4e8e\u7c7b\u7684\u6240\u6709\u516c\u5171\u65b9\u6cd5\u4e2d\u7684\u6240\u6709\u53c2\u6570\u3002\u8fd9\u662f\u907f\u514d\u5728\u6bcf\u4e2a\u65b9\u6cd5\u4e0a\u5206\u522b\u8bb0\u5f55\u6bcf\u4e2a NullPointerException \u800c\u9020\u6210\u6df7\u4e71\u7684\u597d\u65b9\u6cd5\u3002\u5b83\u53ef\u4ee5\u4e0e ",(0,n.kt)("inlineCode",{parentName:"p"},"@Nullable")," \u6216\u7c7b\u4f3c\u7684\u6ce8\u91ca\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u6307\u793a\u67d0\u4e2a\u7279\u5b9a\u53c2\u6570\u53ef\u80fd\u4e3a null\uff0c\u4f46\u8fd9\u79cd\u505a\u6cd5\u5e76\u4e0d\u6807\u51c6\uff0c\u4e3a\u6b64\u4f7f\u7528\u4e86\u591a\u4e2a\u6ce8\u91ca\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"The Objects.requireNonNull method, added in Java 7, is flexible and convenient, so there\u2019s no reason to perform null checks manually anymore.")," You can specify your own exception detail message if you wish. The method returns its input, so you can perform a null check at the same time as you use a value:"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5728 Java 7 \u4e2d\u6dfb\u52a0\u7684 ",(0,n.kt)("inlineCode",{parentName:"strong"},"Objects.requireNonNull")," \u65b9\u6cd5\u975e\u5e38\u7075\u6d3b\u548c\u65b9\u4fbf\uff0c\u56e0\u6b64\u4e0d\u518d\u9700\u8981\u624b\u52a8\u6267\u884c\u7a7a\u68c0\u67e5\u3002")," \u5982\u679c\u613f\u610f\uff0c\u53ef\u4ee5\u6307\u5b9a\u81ea\u5df1\u7684\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\u3002\u8be5\u65b9\u6cd5\u8fd4\u56de\u5b83\u7684\u8f93\u5165\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u7a7a\u68c0\u67e5\uff0c\u540c\u65f6\u4f60\u4f7f\u7528\u4e00\u4e2a\u503c\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'// Inline use of Java\'s null-checking facility\nthis.strategy = Objects.requireNonNull(strategy, "strategy");\n')),(0,n.kt)("p",null,"You can also ignore the return value and use Objects.requireNonNull as a freestanding null check where that suits your needs."),(0,n.kt)("p",null,"\u4f60\u8fd8\u53ef\u4ee5\u5ffd\u7565\u8fd4\u56de\u503c\u5e76\u4f7f\u7528 ",(0,n.kt)("inlineCode",{parentName:"p"},"Objects.requireNonNull")," \u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684 null \u68c0\u67e5\u6765\u6ee1\u8db3\u4f60\u7684\u9700\u8981\u3002"),(0,n.kt)("p",null,"In Java 9, a range-checking facility was added to java.util.Objects. This facility consists of three methods: checkFromIndexSize, checkFromToIndex, and checkIndex. This facility is not as flexible as the null-checking method. It doesn\u2019t let you specify your own exception detail message, and it is designed solely for use on list and array indices. It does not handle closed ranges (which contain both of their endpoints). But if it does what you need, it\u2019s a useful convenience."),(0,n.kt)("p",null,"\u5728 Java 9 \u4e2d\uff0c\u8303\u56f4\u68c0\u67e5\u529f\u80fd\u88ab\u6dfb\u52a0\u5230 ",(0,n.kt)("inlineCode",{parentName:"p"},"java.util.Objects")," \u4e2d\u3002\u8fd9\u4e2a\u529f\u80fd\u7531\u4e09\u4e2a\u65b9\u6cd5\u7ec4\u6210\uff1acheckFromIndexSize\u3001checkFromToIndex \u548c checkIndex\u3002\u8fd9\u4e2a\u5de5\u5177\u4e0d\u5982\u7a7a\u68c0\u67e5\u65b9\u6cd5\u7075\u6d3b\u3002\u5b83\u4e0d\u5141\u8bb8\u4f60\u6307\u5b9a\u81ea\u5df1\u7684\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\uff0c\u800c\u4e14\u5b83\u4ec5\u7528\u4e8e List \u548c\u6570\u7ec4\u7d22\u5f15\u3002\u5b83\u4e0d\u5904\u7406\u5c01\u95ed\u8303\u56f4\uff08\u5305\u542b\u4e24\u4e2a\u7aef\u70b9\uff09\u3002\u4f46\u5982\u679c\u5b83\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\uff0c\u5b83\u4ecd\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5de5\u5177\u3002"),(0,n.kt)("p",null,"For an unexported method, you, as the package author, control the circumstances under which the method is called, so you can and should ensure that only valid parameter values are ever passed in. Therefore, nonpublic methods can check their parameters using assertions, as shown below:"),(0,n.kt)("p",null,"\u5bf9\u4e8e\u672a\u5bfc\u51fa\u7684\u65b9\u6cd5\uff0c\u4f5c\u4e3a\u5305\u7684\u4f5c\u8005\uff0c\u4f60\u5e94\u8be5\u5b9a\u5236\u65b9\u6cd5\u8c03\u7528\u7684\u73af\u5883\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u5e76\u4e14\u5e94\u8be5\u786e\u4fdd\u53ea\u4f20\u9012\u6709\u6548\u7684\u53c2\u6570\u503c\u3002\u56e0\u6b64\uff0c\u975e\u516c\u5171\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528\u65ad\u8a00\u68c0\u67e5\u5b83\u4eec\u7684\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Private helper function for a recursive sort\nprivate static void sort(long a[], int offset, int length) {\n    assert a != null;\n    assert offset >= 0 && offset <= a.length;\n    assert length >= 0 && length <= a.length - offset;\n    ... // Do the computation\n}\n")),(0,n.kt)("p",null,"In essence, these assertions are claims that the asserted condition will be true, regardless of how the enclosing package is used by its clients. Unlike normal validity checks, assertions throw AssertionError if they fail. And unlike normal validity checks, they have no effect and essentially no cost unless you enable them, which you do by passing the -ea (or -enableassertions) flag to the java command. For more information on assertions, see the tutorial ","[Asserts]","."),(0,n.kt)("p",null,"\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0c\u8fd9\u4e9b\u65ad\u8a00\u5728\u58f0\u660e\u65f6\uff0c\u6761\u4ef6\u5c06\u4e3a true\uff0c\u800c\u4e0d\u7ba1\u5176\u5ba2\u6237\u7aef\u5982\u4f55\u4f7f\u7528\u6240\u5305\u542b\u7684\u5305\u3002\u4e0e\u666e\u901a\u7684\u6709\u6548\u6027\u68c0\u67e5\u4e0d\u540c\uff0c\u5982\u679c\u65ad\u8a00\u5931\u8d25\uff0c\u5219\u4f1a\u629b\u51fa AssertionError\u3002\u4e0e\u666e\u901a\u7684\u6709\u6548\u6027\u68c0\u67e5\u4e0d\u540c\uff0c\u5982\u679c\u65ad\u8a00\u6ca1\u6709\u8d77\u5230\u4f5c\u7528\uff0c\u672c\u8d28\u4e0a\u4e0d\u5b58\u5728\u6210\u672c\uff0c\u9664\u975e\u4f60\u542f\u7528\u5b83\u4eec\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06 ",(0,n.kt)("inlineCode",{parentName:"p"},"-ea"),"\uff08 \u6216 ",(0,n.kt)("inlineCode",{parentName:"p"},"-enableassertion"),"\uff09\u6807\u5fd7\u4f20\u9012\u7ed9 java \u547d\u4ee4\u6765\u542f\u7528\u5b83\u4eec\u3002\u6709\u5173\u65ad\u8a00\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u6559\u7a0b ","[Asserts]","\u3002"),(0,n.kt)("p",null,"It is particularly important to check the validity of parameters that are not used by a method, but stored for later use. For example, consider the static factory method on page 101, which takes an int array and returns a List view of the array. If a client were to pass in null, the method would throw a NullPointerException because the method has an explicit check (the call to Objects.requireNonNull). Had the check been omitted, the method would return a reference to a newly created List instance that would throw a NullPointerException as soon as a client attempted to use it. By that time, the origin of the List instance might be difficult to determine, which could greatly complicate the task of debugging."),(0,n.kt)("p",null,"\u7279\u522b\u91cd\u8981\u7684\u662f\uff0c\u5e94\u68c0\u67e5\u90a3\u4e9b\u4e0d\u662f\u7531\u65b9\u6cd5\u4f7f\u7528\uff0c\u800c\u662f\u5b58\u50a8\u8d77\u6765\u4f9b\u4ee5\u540e\u4f7f\u7528\u7684\u53c2\u6570\u7684\u6709\u6548\u6027\u3002\u4f8b\u5982\uff0c\u8003\u8651\u7b2c 101 \u9875\u4e2d\u7684\u9759\u6001\u5de5\u5382\u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a int \u6570\u7ec4\u5e76\u8fd4\u56de\u6570\u7ec4\u7684 List \u89c6\u56fe\u3002\u5982\u679c\u5ba2\u6237\u7aef\u4f20\u5165 null\uff0c\u8be5\u65b9\u6cd5\u5c06\u629b\u51fa NullPointerException\uff0c\u56e0\u4e3a\u8be5\u65b9\u6cd5\u5177\u6709\u663e\u5f0f\u68c0\u67e5(\u8c03\u7528 ",(0,n.kt)("inlineCode",{parentName:"p"},"Objects.requireNonNull"),")\u3002\u5982\u679c\u7701\u7565\u4e86\u68c0\u67e5\uff0c\u8be5\u65b9\u6cd5\u5c06\u8fd4\u56de\u5bf9\u65b0\u521b\u5efa\u7684 List \u5b9e\u4f8b\u7684\u5f15\u7528\uff0c\u8be5\u5b9e\u4f8b\u5c06\u5728\u5ba2\u6237\u7aef\u8bd5\u56fe\u4f7f\u7528\u5b83\u65f6\u629b\u51fa NullPointerException\u3002\u5230\u90a3\u65f6\uff0cList \u5b9e\u4f8b\u7684\u8d77\u6e90\u53ef\u80fd\u5f88\u96be\u786e\u5b9a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u8c03\u8bd5\u4efb\u52a1\u53d8\u5f97\u975e\u5e38\u590d\u6742\u3002"),(0,n.kt)("p",null,"Constructors represent a special case of the principle that you should check the validity of parameters that are to be stored away for later use. It is critical to check the validity of constructor parameters to prevent the construction of an object that violates its class invariants."),(0,n.kt)("p",null,"\u6784\u9020\u51fd\u6570\u4ee3\u8868\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u5373\uff0c\u4f60\u5e94\u8be5\u68c0\u67e5\u8981\u5b58\u50a8\u8d77\u6765\u4f9b\u4ee5\u540e\u4f7f\u7528\u7684\u53c2\u6570\u7684\u6709\u6548\u6027\u3002\u68c0\u67e5\u6784\u9020\u51fd\u6570\u53c2\u6570\u7684\u6709\u6548\u6027\u5bf9\u4e8e\u9632\u6b62\u6784\u9020\u751f\u6210\u5b9e\u4f8b\u5bf9\u8c61\u65f6\uff0c\u8fdd\u80cc\u7c7b\u7684\u5bf9\u8c61\u7684\u4e0d\u53d8\u6027\u975e\u5e38\u91cd\u8981\u3002"),(0,n.kt)("p",null,"There are exceptions to the rule that you should explicitly check a method\u2019s parameters before performing its computation. An important exception is the case in which the validity check would be expensive or impractical and the check is performed implicitly in the process of doing the computation. For example, consider a method that sorts a list of objects, such as Collections.sort(List). All of the objects in the list must be mutually comparable. In the process of sorting the list, every object in the list will be compared to some other object in the list. If the objects aren\u2019t mutually comparable, one of these comparisons will throw a ClassCastException, which is exactly what the sort method should do. Therefore, there would be little point in checking ahead of time that the elements in the list were mutually comparable. Note, however, that indiscriminate reliance on implicit validity checks can result in the loss of failure atomicity (Item 76)."),(0,n.kt)("p",null,"\u5728\u6267\u884c\u65b9\u6cd5\u7684\u8ba1\u7b97\u4efb\u52a1\u4e4b\u524d\uff0c\u5e94\u8be5\u663e\u5f0f\u5730\u68c0\u67e5\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u8fd9\u6761\u89c4\u5219\u4e5f\u6709\u4f8b\u5916\u3002\u4e00\u4e2a\u91cd\u8981\u7684\u4f8b\u5916\u662f\u6709\u6548\u6027\u68c0\u67e5\u6210\u672c\u8f83\u9ad8\u6216\u4e0d\u5207\u5b9e\u9645\uff0c\u6216\u8005\u68c0\u67e5\u662f\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u9690\u5f0f\u6267\u884c\u4e86\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u4e3a\u5bf9\u8c61 List \u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 ",(0,n.kt)("inlineCode",{parentName:"p"},"Collections.sort(List)"),"\u3002List \u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u5fc5\u987b\u76f8\u4e92\u6bd4\u8f83\u3002\u5728\u5bf9 List \u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\uff0cList \u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u4f1a\u4e0e\u5217\u8868\u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u5bf9\u8c61\u4e0d\u80fd\u76f8\u4e92\u6bd4\u8f83\uff0c\u5c06\u629b\u51fa ClassCastException\uff0c\u8fd9\u6b63\u662f sort \u65b9\u6cd5\u5e94\u8be5\u505a\u7684\u3002\u56e0\u6b64\uff0c\u6ca1\u6709\u5fc5\u8981\u9884\u5148\u68c0\u67e5\u5217\u8868\u4e2d\u7684\u5143\u7d20\u662f\u5426\u5177\u6709\u53ef\u6bd4\u6027\u3002\u4f46\u662f\uff0c\u8bf7\u6ce8\u610f\uff0c\u4e0d\u52a0\u533a\u522b\u5730\u4f9d\u8d56\u9690\u5f0f\u6709\u6548\u6027\u68c0\u67e5\u53ef\u80fd\u5bfc\u81f4\u5931\u8d25\u539f\u5b50\u6027\u7684\u4e22\u5931\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity"},"Item-76"),"\uff09\u3002"),(0,n.kt)("p",null,"Occasionally, a computation implicitly performs a required validity check but throws the wrong exception if the check fails. In other words, the exception that the computation would naturally throw as the result of an invalid parameter value doesn\u2019t match the exception that the method is documented to throw. Under these circumstances, you should use the exception translation idiom, described in Item 73, to translate the natural exception into the correct one."),(0,n.kt)("p",null,"\u6709\u65f6\uff0c\u8ba1\u7b97\u4efb\u52a1\u4f1a\u9690\u5f0f\u5730\u6267\u884c\u6240\u9700\u7684\u6709\u6548\u6027\u68c0\u67e5\uff0c\u4f46\u5982\u679c\u68c0\u67e5\u5931\u8d25\uff0c\u5219\u629b\u51fa\u9519\u8bef\u7684\u5f02\u5e38\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8ba1\u7b97\u4efb\u52a1\u7531\u4e8e\u65e0\u6548\u53c2\u6570\u503c\u629b\u51fa\u7684\u5f02\u5e38\uff0c\u4e0e\u6587\u6863\u4e2d\u8bb0\u5f55\u7684\u65b9\u6cd5\u8981\u629b\u51fa\u7684\u5f02\u5e38\u4e0d\u5339\u914d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-73-Throw-exceptions-appropriate-to-the-abstraction"},"Item-73")," \u4e2d\u63cf\u8ff0\u7684\u5f02\u5e38\u8f6c\u8bd1\u6280\u672f\u6765\u5c06\u8ba1\u7b97\u4efb\u52a1\u629b\u51fa\u7684\u5f02\u5e38\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u5f02\u5e38\u3002"),(0,n.kt)("p",null,"Do not infer from this item that arbitrary restrictions on parameters are a good thing. On the contrary, you should design methods to be as general as it is practical to make them. The fewer restrictions that you place on parameters, the better, assuming the method can do something reasonable with all of the parameter values that it accepts. Often, however, some restrictions are intrinsic to the abstraction being implemented."),(0,n.kt)("p",null,"\u4e0d\u8981\u4ece\u672c\u6761\u76ee\u63a8\u65ad\u51fa\uff1a\u5bf9\u53c2\u6570\u7684\u4efb\u610f\u9650\u5236\u90fd\u662f\u4e00\u4ef6\u597d\u4e8b\u3002\u76f8\u53cd\uff0c\u4f60\u5e94\u8be5\u628a\u65b9\u6cd5\u8bbe\u8ba1\u5f97\u65e2\u901a\u7528\u53c8\u5b9e\u7528\u3002\u5bf9\u53c2\u6570\u65bd\u52a0\u7684\u9650\u5236\u8d8a\u5c11\u8d8a\u597d\uff0c\u5047\u8bbe\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5bf9\u5b83\u6240\u63a5\u53d7\u7684\u6240\u6709\u53c2\u6570\u503c\u8fdb\u884c\u5408\u7406\u7684\u5904\u7406\u3002\u7136\u800c\uff0c\u4e00\u4e9b\u9650\u5236\u5e38\u5e38\u662f\u5b9e\u73b0\u62bd\u8c61\u7684\u5185\u5728\u9650\u5236\u3002"),(0,n.kt)("p",null,"To summarize, each time you write a method or constructor, you should think about what restrictions exist on its parameters. You should document these restrictions and enforce them with explicit checks at the beginning of the method body. It is important to get into the habit of doing this. The modest work that it entails will be paid back with interest the first time a validity check fails."),(0,n.kt)("p",null,"\u603b\u800c\u8a00\u4e4b\uff0c\u6bcf\u6b21\u7f16\u5199\u65b9\u6cd5\u6216\u6784\u9020\u51fd\u6570\u65f6\uff0c\u90fd\u5e94\u8be5\u8003\u8651\u53c2\u6570\u5b58\u5728\u54ea\u4e9b\u9650\u5236\u3002\u4f60\u5e94\u8be5\u5728\u6587\u6863\u4e2d\u8bb0\u5f55\u8fd9\u4e9b\u9650\u5236\uff0c\u5e76\u5728\u65b9\u6cd5\u4e3b\u4f53\u7684\u5f00\u5934\u663e\u5f0f\u5730\u68c0\u67e5\u3002\u517b\u6210\u8fd9\u6837\u7684\u4e60\u60ef\u662f\u5f88\u91cd\u8981\u7684\u3002\u5b83\u6240\u6d89\u53ca\u7684\u8fd9\u4e00\u5c11\u91cf\u5de5\u4f5c\u53ca\u5176\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u5c06\u5728\u6709\u6548\u6027\u68c0\u67e5\u51fa\u73b0\u7b2c\u4e00\u6b21\u5931\u8d25\u65f6\u8fde\u672c\u5e26\u5229\u5730\u507f\u8fd8\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-8-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-8-Item-50-Make-defensive-copies-when-needed"},"Item 50: Make defensive copies when needed\uff08\u5728\u9700\u8981\u65f6\u5236\u4f5c\u9632\u5fa1\u6027\u526f\u672c\uff09")))))}p.isMDXComponent=!0}}]);