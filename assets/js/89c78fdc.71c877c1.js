"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8500],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8977:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={},o=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces",id:"Books/EffectiveJava3/Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces",title:"Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces",description:"Chapter 7. Lambdas and Streams\uff08\u03bb \u8868\u8fbe\u5f0f\u548c\u6d41\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces.md",sourceDirName:"Books/EffectiveJava3/Chapter-7",slug:"/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces",permalink:"/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-7-Item-43-Prefer-method-references-to-lambdas",permalink:"/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-43-Prefer-method-references-to-lambdas"},next:{title:"Chapter-7-Item-45-Use-streams-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-7/Chapter-7-Item-45-Use-streams-judiciously"}},l={},p=[{value:"Chapter 7. Lambdas and Streams\uff08\u03bb \u8868\u8fbe\u5f0f\u548c\u6d41\uff09",id:"chapter-7-lambdas-and-streams\u03bb-\u8868\u8fbe\u5f0f\u548c\u6d41",level:2},{value:"Item 44: Favor the use of standard functional interfaces\uff08\u4f18\u5148\u4f7f\u7528\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3\uff09",id:"item-44-favor-the-use-of-standard-functional-interfaces\u4f18\u5148\u4f7f\u7528\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"chapter-7-lambdas-and-streams\u03bb-\u8868\u8fbe\u5f0f\u548c\u6d41"},"Chapter 7. Lambdas and Streams\uff08\u03bb \u8868\u8fbe\u5f0f\u548c\u6d41\uff09"),(0,r.kt)("h3",{id:"item-44-favor-the-use-of-standard-functional-interfaces\u4f18\u5148\u4f7f\u7528\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3"},"Item 44: Favor the use of standard functional interfaces\uff08\u4f18\u5148\u4f7f\u7528\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3\uff09"),(0,r.kt)("p",null,"Now that Java has lambdas, best practices for writing APIs have changed considerably. For example, the Template Method pattern ","[Gamma95]",", wherein a subclass overrides a primitive method to specialize the behavior of its superclass, is far less attractive. The modern alternative is to provide a static factory or constructor that accepts a function object to achieve the same effect. More generally, you\u2019ll be writing more constructors and methods that take function objects as parameters. Choosing the right functional parameter type demands care."),(0,r.kt)("p",null,"\u73b0\u5728 Java \u5df2\u7ecf\u6709\u4e86 lambda \u8868\u8fbe\u5f0f\uff0c\u7f16\u5199 API \u7684\u6700\u4f73\u5b9e\u8df5\u5df2\u7ecf\u53d1\u751f\u4e86\u5f88\u5927\u7684\u53d8\u5316\u3002\u4f8b\u5982\uff0c\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f ","[Gamma95]","\uff0c\u5176\u4e2d\u5b50\u7c7b\u8986\u76d6\u57fa\u7c7b\u65b9\u6cd5\u4ee5\u4e13\u95e8\u5316\u5176\u8d85\u7c7b\u7684\u884c\u4e3a\uff0c\u5c31\u6ca1\u6709\u90a3\u4e48\u6709\u5438\u5f15\u529b\u4e86\u3002\u73b0\u4ee3\u7684\u66ff\u4ee3\u65b9\u6cd5\u662f\u63d0\u4f9b\u4e00\u4e2a\u9759\u6001\u5de5\u5382\u6216\u6784\u9020\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u6765\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\u3002\u66f4\u4e00\u822c\u5730\uff0c\u4f60\u5c06\u7f16\u5199\u66f4\u591a\u4ee5\u51fd\u6570\u5bf9\u8c61\u4e3a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u548c\u65b9\u6cd5\u3002\u9009\u62e9\u6b63\u786e\u7684\u51fd\u6570\u53c2\u6570\u7c7b\u578b\u9700\u8981\u8c28\u614e\u3002"),(0,r.kt)("p",null,"Consider LinkedHashMap. You can use this class as a cache by overriding its protected removeEldestEntry method, which is invoked by put each time a new key is added to the map. When this method returns true, the map removes its eldest entry, which is passed to the method. The following override allows the map to grow to one hundred entries and then deletes the eldest entry each time a new key is added, maintaining the hundred most recent entries:"),(0,r.kt)("p",null,"\u8003\u8651 LinkedHashMap\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8986\u76d6\u53d7\u4fdd\u62a4\u7684 removeEldestEntry \u65b9\u6cd5\u5c06\u8be5\u7c7b\u7528\u4f5c\u7f13\u5b58\uff0c\u6bcf\u5f53\u5411\u6620\u5c04\u6dfb\u52a0\u65b0\u952e\u65f6\uff0cput \u90fd\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\u3002\u5f53\u8be5\u65b9\u6cd5\u8fd4\u56de true \u65f6\uff0c\u6620\u5c04\u5c06\u5220\u9664\u4f20\u9012\u7ed9\u8be5\u65b9\u6cd5\u7684\u6700\u8001\u6761\u76ee\u3002\u4e0b\u9762\u7684\u8986\u76d6\u5141\u8bb8\u6620\u5c04\u589e\u957f\u5230 100 \u4e2a\u6761\u76ee\uff0c\u7136\u540e\u5728\u6bcf\u6b21\u6dfb\u52a0\u65b0\u952e\u65f6\u5220\u9664\u6700\u8001\u7684\u6761\u76ee\uff0c\u7ef4\u62a4 100 \u4e2a\u6700\u8fd1\u7684\u6761\u76ee\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"protected boolean removeEldestEntry(Map.Entry<K,V> eldest) {\n    return size() > 100;\n}\n")),(0,r.kt)("p",null,"This technique works fine, but you can do much better with lambdas. If LinkedHashMap were written today, it would have a static factory or constructor that took a function object. Looking at the declaration for removeEldestEntry, you might think that the function object should take a ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.Entry<K,V>")," and return a boolean, but that wouldn\u2019t quite do it: The removeEldestEntry method calls size() to get the number of entries in the map, which works because removeEldestEntry is an instance method on the map. The function object that you pass to the constructor is not an instance method on the map and can\u2019t capture it because the map doesn\u2019t exist yet when its factory or constructor is invoked. Thus, the map must pass itself to the function object, which must therefore take the map on input as well as its eldest entry. If you were to declare such a functional interface, it would look something like this:"),(0,r.kt)("p",null,"\u8fd9\u79cd\u6280\u672f\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u662f\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002\u5982\u679c LinkedHashMap \u662f\u73b0\u5728\u7f16\u5199\u7684\uff0c\u5b83\u5c06\u6709\u4e00\u4e2a\u9759\u6001\u5de5\u5382\u6216\u6784\u9020\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u3002\u770b\u7740 removeEldestEntry \u7684\u5b9a\u4e49,\u4f60\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8fd9\u4e2a\u51fd\u6570\u5bf9\u8c61\u5e94\u8be5 ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.Entry<K,V>")," \u548c\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u4f46\u4e0d\u4f1a\u5b8c\u5168\u505a\u5230\uff1aremoveEldestEntry \u65b9\u6cd5\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"size()")," \u5730\u56fe\u4e2d\u7684\u6761\u76ee\u7684\u6570\u91cf\uff0c\u8fd9\u5de5\u4f5c\uff0c\u56e0\u4e3a removeEldestEntry \u5728 Map \u4e0a\u662f\u4e00\u4e2a\u5b9e\u4f8b\u65b9\u6cd5\u3002\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u7684\u51fd\u6570\u5bf9\u8c61\u4e0d\u662f Map \u4e0a\u7684\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u65e0\u6cd5\u6355\u83b7\u5b83\uff0c\u56e0\u4e3a\u5728\u8c03\u7528 Map \u7684\u5de5\u5382\u6216\u6784\u9020\u51fd\u6570\u65f6\uff0cMap \u8fd8\u4e0d\u5b58\u5728\u3002\u56e0\u6b64\uff0cMap \u5fc5\u987b\u5c06\u81ea\u8eab\u4f20\u9012\u7ed9\u51fd\u6570\u5bf9\u8c61\uff0c\u51fd\u6570\u5bf9\u8c61\u56e0\u6b64\u5fc5\u987b\u5728\u8f93\u5165\u7aef\u53ca\u5176\u6700\u8001\u7684\u6761\u76ee\u4e0a\u63a5\u53d7 Map\u3002\u5982\u679c\u8981\u58f0\u660e\u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u5b83\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Unnecessary functional interface; use a standard one instead.\n@FunctionalInterface interface EldestEntryRemovalFunction<K,V>{\n    boolean remove(Map<K,V> map, Map.Entry<K,V> eldest);\n}\n")),(0,r.kt)("p",null,"This interface would work fine, but you shouldn\u2019t use it, because you don\u2019t need to declare a new interface for this purpose. The java.util.function package provides a large collection of standard functional interfaces for your use. ",(0,r.kt)("strong",{parentName:"p"},"If one of the standard functional interfaces does the job, you should generally use it in preference to a purpose-built functional interface.")," This will make your API easier to learn, by reducing its conceptual surface area, and will provide significant interoperability benefits, as many of the standard functional interfaces provide useful default methods. The Predicate interface, for instance, provides methods to combine predicates. In the case of our LinkedHashMap example, the standard ",(0,r.kt)("inlineCode",{parentName:"p"},"BiPredicate<Map<K,V>"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Map.Entry<K,V>>")," interface should be used in preference to a custom EldestEntryRemovalFunction interface."),(0,r.kt)("p",null,"\u8fd9\u4e2a\u63a5\u53e3\u53ef\u4ee5\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u4f46\u662f\u4f60\u4e0d\u5e94\u8be5\u4f7f\u7528\u5b83\uff0c\u56e0\u4e3a\u4f60\u4e0d\u9700\u8981\u4e3a\u6b64\u58f0\u660e\u4e00\u4e2a\u65b0\u63a5\u53e3\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.function")," \u5305\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u6807\u51c6\u51fd\u6570\u63a5\u53e3\u4f9b\u4f60\u4f7f\u7528\u3002",(0,r.kt)("strong",{parentName:"p"},"\u5982\u679c\u4e00\u4e2a\u6807\u51c6\u7684\u51fd\u6570\u5f0f\u63a5\u53e3\u53ef\u4ee5\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\uff0c\u90a3\u4e48\u4f60\u901a\u5e38\u5e94\u8be5\u4f18\u5148\u4f7f\u7528\u5b83\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u4e13\u95e8\u6784\u5efa\u7684\u51fd\u6570\u5f0f\u63a5\u53e3\u3002")," \u901a\u8fc7\u51cf\u5c11 API \u7684\u6982\u5ff5\u8868\u9762\u79ef\uff0c\u8fd9\u5c06\u4f7f\u4f60\u7684 API \u66f4\u5bb9\u6613\u5b66\u4e60\uff0c\u5e76\u5c06\u63d0\u4f9b\u663e\u8457\u7684\u4e92\u64cd\u4f5c\u6027\u4f18\u52bf\uff0c\u56e0\u4e3a\u8bb8\u591a\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3\u63d0\u4f9b\u4e86\u6709\u7528\u7684\u9ed8\u8ba4\u65b9\u6cd5\u3002\u4f8b\u5982\uff0cPredicate \u63a5\u53e3\u63d0\u4f9b\u4e86\u7ec4\u5408\u8c13\u8bcd\u7684\u65b9\u6cd5\u3002\u5728\u6211\u4eec\u7684 LinkedHashMap \u793a\u4f8b\u4e2d\uff0c\u5e94\u8be5\u4f18\u5148\u4f7f\u7528\u6807\u51c6\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"BiPredicate<Map<K,V>"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"Map.Entry<K,V>>")," \u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u5b9a\u5236\u7684 EldestEntryRemovalFunction \u63a5\u53e3\u3002"),(0,r.kt)("p",null,"There are forty-three interfaces in java.util.Function. You can\u2019t be expected to remember them all, but if you remember six basic interfaces, you can derive the rest when you need them. The basic interfaces operate on object reference types. The Operator interfaces represent functions whose result and argument types are the same. The Predicate interface represents a function that takes an argument and returns a boolean. The Function interface represents a function whose argument and return types differ. The Supplier interface represents a function that takes no arguments and returns (or \u201csupplies\u201d) a value. Finally, Consumer represents a function that takes an argument and returns nothing, essentially consuming its argument. The six basic functional interfaces are summarized below:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a\u539f\u6587\u7b14\u8bef\uff0c\u5e94\u4e3a ",(0,r.kt)("inlineCode",{parentName:"strong"},"java.util.function"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"java.util.function")," \u4e2d\u6709 43 \u4e2a\u63a5\u53e3\u3002\u4e0d\u80fd\u671f\u671b\u4f60\u8bb0\u4f4f\u6240\u6709\u7684\u63a5\u53e3\uff0c\u4f46\u662f\u5982\u679c\u4f60\u8bb0\u4f4f\u4e86 6 \u4e2a\u57fa\u672c\u63a5\u53e3\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u9700\u8981\u65f6\u6d3e\u751f\u51fa\u5176\u4f59\u7684\u63a5\u53e3\u3002\u57fa\u672c\u63a5\u53e3\u64cd\u4f5c\u5bf9\u8c61\u5f15\u7528\u7c7b\u578b\u3002Operator \u63a5\u53e3\u8868\u793a\u7ed3\u679c\u548c\u53c2\u6570\u7c7b\u578b\u76f8\u540c\u7684\u51fd\u6570\u3002Predicate \u63a5\u53e3\u8868\u793a\u63a5\u53d7\u53c2\u6570\u5e76\u8fd4\u56de\u5e03\u5c14\u503c\u7684\u51fd\u6570\u3002Function \u63a5\u53e3\u8868\u793a\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u7684\u51fd\u6570\u3002Supplier \u63a5\u53e3\u8868\u793a\u4e00\u4e2a\u4e0d\u63a5\u53d7\u53c2\u6570\u5e76\u8fd4\u56de\uff08\u6216\u300c\u4f9b\u5e94\u300d\uff09\u503c\u7684\u51fd\u6570\u3002\u6700\u540e\uff0cConsumer \u8868\u793a\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u4f46\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u672c\u8d28\u4e0a\u662f\u4f7f\u7528\u5b83\u7684\u53c2\u6570\u3002\u516d\u4e2a\u57fa\u672c\u7684\u51fd\u6570\u5f0f\u63a5\u53e3\u603b\u7ed3\u5982\u4e0b\uff1a"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Interface"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Function Signature"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"UnaryOperator<T>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"T apply(T t)")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"String::toLowerCase"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"BinaryOperator<T>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"T apply(T t1, T t2)")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"BigInteger::add"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Predicate<T>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean test(T t)")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Collection::isEmpty"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Function<T,R>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"R apply(T t)")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Arrays::asList"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Supplier<T>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"T get()")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Instant::now"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"Consumer<T>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"void accept(T t)")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"System.out::println"))))),(0,r.kt)("p",null,"There are also three variants of each of the six basic interfaces to operate on the primitive types int, long, and double. Their names are derived from the basic interfaces by prefixing them with a primitive type. So, for example, a predicate that takes an int is an IntPredicate, and a binary operator that takes two long values and returns a long is a LongBinaryOperator. None of these variant types is parameterized except for the Function variants, which are parameterized by return type. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"LongFunction<int[]>")," takes a long and returns an int[]."),(0,r.kt)("p",null,"\u8fd8\u6709 6 \u4e2a\u57fa\u672c\u63a5\u53e3\u7684 3 \u4e2a\u53d8\u4f53\uff0c\u7528\u4e8e\u64cd\u4f5c\u57fa\u672c\u7c7b\u578b int\u3001long \u548c double\u3002\u5b83\u4eec\u7684\u540d\u79f0\u662f\u901a\u8fc7\u5728\u57fa\u672c\u63a5\u53e3\u524d\u9762\u52a0\u4e0a\u57fa\u672c\u7c7b\u578b\u524d\u7f00\u800c\u6d3e\u751f\u51fa\u6765\u7684\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u63a5\u53d7 int \u7684 Predicate \u5c31\u662f\u4e00\u4e2a IntPredicate\uff0c\u4e00\u4e2a\u63a5\u53d7\u4e24\u4e2a long \u503c\u5e76\u8fd4\u56de\u4e00\u4e2a long \u7684\u4e8c\u5143\u64cd\u4f5c\u7b26\u5c31\u662f\u4e00\u4e2a LongBinaryOperator\u3002\u9664\u4e86\u7531\u8fd4\u56de\u7c7b\u578b\u53c2\u6570\u5316\u7684\u51fd\u6570\u53d8\u91cf\u5916\uff0c\u8fd9\u4e9b\u53d8\u91cf\u7c7b\u578b\u90fd\u4e0d\u662f\u53c2\u6570\u5316\u7684\u3002\u4f8b\u5982\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"LongFunction<int[]>")," \u4f7f\u7528 long \u5e76\u8fd4\u56de\u4e00\u4e2a int[]\u3002"),(0,r.kt)("p",null,"There are nine additional variants of the Function interface, for use when the result type is primitive. The source and result types always differ, because a function from a type to itself is a UnaryOperator. If both the source and result types are primitive, prefix Function with SrcToResult, for example LongToIntFunction (six variants). If the source is a primitive and the result is an object reference, prefix Function with ",(0,r.kt)("inlineCode",{parentName:"p"},"<Src>ToObj"),", for example DoubleToObjFunction (three variants)."),(0,r.kt)("p",null,"Function \u63a5\u53e3\u8fd8\u6709 9 \u4e2a\u989d\u5916\u7684\u53d8\u4f53\uff0c\u5728\u7ed3\u679c\u7c7b\u578b\u4e3a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u65f6\u4f7f\u7528\u3002\u6e90\u7c7b\u578b\u548c\u7ed3\u679c\u7c7b\u578b\u603b\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u51fd\u6570\u672c\u8eab\u90fd\u662f UnaryOperator\u3002\u5982\u679c\u6e90\u7c7b\u578b\u548c\u7ed3\u679c\u7c7b\u578b\u90fd\u662f\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5219\u4f7f\u7528\u5e26\u6709 SrcToResult \u7684\u524d\u7f00\u51fd\u6570\uff0c\u4f8b\u5982 LongToIntFunction\uff08\u516d\u4e2a\u53d8\u4f53\uff09\u3002\u5982\u679c\u6e90\u662f\u4e00\u4e2a\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u800c\u7ed3\u679c\u662f\u4e00\u4e2a\u5bf9\u8c61\u5f15\u7528\uff0c\u5219\u4f7f\u7528\u5e26\u524d\u7f00 ",(0,r.kt)("inlineCode",{parentName:"p"},"<Src>ToObj")," \u7684 Function \u63a5\u53e3\uff0c\u4f8b\u5982 DoubleToObjFunction\uff08\u4e09\u4e2a\u53d8\u4f53\uff09\u3002"),(0,r.kt)("p",null,"There are two-argument versions of the three basic functional interfaces for which it makes sense to have them: ",(0,r.kt)("inlineCode",{parentName:"p"},"BiPredicate<T,U>"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"BiFunction<T,U,R>"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"BiConsumer<T,U>"),". There are also BiFunction variants returning the three relevant primitive types: ",(0,r.kt)("inlineCode",{parentName:"p"},"ToIntBiFunction<T,U>"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ToLongBiFunction<T,U>"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"ToDoubleBiFunction<T,U>"),". There are two-argument variants of Consumer that take one object reference and one primitive type: ",(0,r.kt)("inlineCode",{parentName:"p"},"ObjDoubleConsumer<T>"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ObjIntConsumer<T>"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"ObjLongConsumer<T>"),". In total, there are nine two-argument versions of the basic interfaces."),(0,r.kt)("p",null,"\u4e09\u4e2a\u57fa\u672c\u51fd\u6570\u5f0f\u63a5\u53e3\u6709\u4e24\u4e2a\u53c2\u6570\u7248\u672c\uff0c\u4f7f\u7528\u5b83\u4eec\u662f\u6709\u610f\u4e49\u7684\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"BiPredicate<T,U>"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"BiFunction<T,U,R>"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"BiConsumer<T,U>"),"\u3002\u4e5f\u6709 BiFunction \u53d8\u4f53\u8fd4\u56de\u4e09\u4e2a\u76f8\u5173\u7684\u57fa\u672c\u7c7b\u578b\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"ToIntBiFunction<T,U>"),"\u3001 ",(0,r.kt)("inlineCode",{parentName:"p"},"ToLongBiFunction<T,U>"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"ToDoubleBiFunction<T,U>"),"\u3002Consumer \u6709\u4e24\u4e2a\u53c2\u6570\u53d8\u4f53\uff0c\u5b83\u4eec\u63a5\u53d7\u4e00\u4e2a\u5bf9\u8c61\u5f15\u7528\u548c\u4e00\u4e2a\u57fa\u672c\u7c7b\u578b\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"ObjDoubleConsumer<T>"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"ObjIntConsumer<T>"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"ObjLongConsumer<T>"),"\u3002\u603b\u5171\u67099\u4e2a\u57fa\u672c\u63a5\u53e3\u7684\u53cc\u53c2\u6570\u7248\u672c\u3002"),(0,r.kt)("p",null,"Finally, there is the BooleanSupplier interface, a variant of Supplier that returns boolean values. This is the only explicit mention of the boolean type in any of the standard functional interface names, but boolean return values are supported via Predicate and its four variant forms. The BooleanSupplier interface and the forty-two interfaces described in the previous paragraphs account for all forty-three standard functional interfaces. Admittedly, this is a lot to swallow, and not terribly orthogonal. On the other hand, the bulk of the functional interfaces that you\u2019ll need have been written for you and their names are regular enough that you shouldn\u2019t have too much trouble coming up with one when you need it."),(0,r.kt)("p",null,"\u6700\u540e\u662f BooleanSupplier \u63a5\u53e3\uff0c\u5b83\u662f Supplier \u7684\u4e00\u4e2a\u53d8\u4f53\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u3002\u8fd9\u662f\u5728\u4efb\u4f55\u6807\u51c6\u51fd\u6570\u63a5\u53e3\u540d\u79f0\u4e2d\u552f\u4e00\u663e\u5f0f\u63d0\u5230\u5e03\u5c14\u7c7b\u578b\u7684\u5730\u65b9\uff0c\u4f46\u662f\u901a\u8fc7 Predicate \u53ca\u5176\u56db\u79cd\u53d8\u4f53\u5f62\u5f0f\u652f\u6301\u5e03\u5c14\u8fd4\u56de\u503c\u3002\u524d\u9762\u63cf\u8ff0\u7684 BooleanSupplier \u63a5\u53e3\u548c 42 \u4e2a\u63a5\u53e3\u5360\u4e86\u5168\u90e8 43 \u4e2a\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3\u3002\u4e0d\u53ef\u5426\u8ba4\uff0c\u8fd9\u6709\u5f88\u591a\u4e1c\u897f\u9700\u8981\u6d88\u5316\uff0c\u800c\u4e14\u4e0d\u662f\u975e\u5e38\u76f4\u89c2\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u5c06\u9700\u8981\u7684\u5927\u90e8\u5206\u51fd\u6570\u5f0f\u63a5\u53e3\u90fd\u662f\u4e3a\u4f60\u7f16\u5199\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u540d\u79f0\u8db3\u591f\u5e38\u89c4\uff0c\u56e0\u6b64\u5728\u9700\u8981\u65f6\u4f60\u5e94\u8be5\u4e0d\u4f1a\u9047\u5230\u592a\u591a\u9ebb\u70e6\u3002"),(0,r.kt)("p",null,"Most of the standard functional interfaces exist only to provide support for primitive types. ",(0,r.kt)("strong",{parentName:"p"},"Don\u2019t be tempted to use basic functional interfaces with boxed primitives instead of primitive functional interfaces.")," While it works, it violates the advice of Item 61, \u201cprefer primitive types to boxed primitives.\u201d The performance consequences of using boxed primitives for bulk operations can be deadly."),(0,r.kt)("p",null,"\u5927\u591a\u6570\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3\u7684\u5b58\u5728\u53ea\u662f\u4e3a\u4e86\u63d0\u4f9b\u5bf9\u57fa\u672c\u7c7b\u578b\u7684\u652f\u6301\u3002",(0,r.kt)("strong",{parentName:"p"},"\u4e0d\u8981\u5c1d\u8bd5\u4f7f\u7528\u5e26\u6709\u5305\u88c5\u7c7b\u7684\u57fa\u672c\u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u57fa\u672c\u7c7b\u578b\u51fd\u6570\u5f0f\u63a5\u53e3\u3002")," \u5f53\u5b83\u5de5\u4f5c\u65f6\uff0c\u5b83\u8fdd\u53cd\u4e86 ",(0,r.kt)("a",{parentName:"p",href:"./Chapter-9-Item-61-Prefer-primitive-types-to-boxed-primitives"},"Item-61")," \u7684\u5efa\u8bae\uff0c\u201c\u4e0e\u76d2\u88c5\u539f\u8bed\u76f8\u6bd4\uff0c\u66f4\u559c\u6b22\u539f\u8bed\u7c7b\u578b\u201d\u3002\u5728\u6279\u91cf\u64cd\u4f5c\u4e2d\u4f7f\u7528\u88c5\u7bb1\u539f\u8bed\u7684\u6027\u80fd\u540e\u679c\u53ef\u80fd\u662f\u81f4\u547d\u7684\u3002"),(0,r.kt)("p",null,"Now you know that you should typically use standard functional interfaces in preference to writing your own. But when should you write your own? Of course you need to write your own if none of the standard ones does what you need, for example if you require a predicate that takes three parameters, or one that throws a checked exception. But there are times you should write your own functional interface even when one of the standard ones is structurally identical."),(0,r.kt)("p",null,"\u73b0\u5728\u4f60\u77e5\u9053\uff0c\u4e0e\u7f16\u5199\u81ea\u5df1\u7684\u63a5\u53e3\u76f8\u6bd4\uff0c\u901a\u5e38\u5e94\u8be5\u4f7f\u7528\u6807\u51c6\u7684\u51fd\u6570\u5f0f\u63a5\u53e3\u3002\u4f46\u662f\u4f60\u5e94\u8be5\u4ec0\u4e48\u65f6\u5019\u5199\u4f60\u81ea\u5df1\u7684\u5462\uff1f\u5f53\u7136\uff0c\u5982\u679c\u6807\u51c6\u7684\u51fd\u6570\u5f0f\u63a5\u53e3\u90fd\u4e0d\u80fd\u6ee1\u8db3\u4f60\u7684\u9700\u8981\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u81ea\u884c\u7f16\u5199\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\u7684 Predicate\uff0c\u6216\u8005\u4e00\u4e2a\u629b\u51fa\u5df2\u68c0\u67e5\u5f02\u5e38\u7684 Predicate\u3002\u4f46\u662f\u6709\u65f6\u5019\u4f60\u5e94\u8be5\u7f16\u5199\u81ea\u5df1\u7684\u51fd\u6570\u63a5\u53e3\uff0c\u5373\u4f7f\u5176\u4e2d\u4e00\u4e2a\u6807\u51c6\u63a5\u53e3\u5728\u7ed3\u6784\u4e0a\u662f\u76f8\u540c\u7684\u3002"),(0,r.kt)("p",null,"Consider our old friend ",(0,r.kt)("inlineCode",{parentName:"p"},"Comparator<T>"),", which is structurally identical to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ToIntBiFunction<T,T>")," interface. Even if the latter interface had existed when the former was added to the libraries, it would have been wrong to use it. There are several reasons that Comparator deserves its own interface. First, its name provides excellent documentation every time it is used in an API, and it\u2019s used a lot. Second, the Comparator interface has strong requirements on what constitutes a valid instance, which comprise its general contract. By implementing the interface, you are pledging to adhere to its contract. Third, the interface is heavily outfitted with useful default methods to transform and combine comparators."),(0,r.kt)("p",null,"\u8003\u8651\u6211\u4eec\u7684\u8001\u670b\u53cb ",(0,r.kt)("inlineCode",{parentName:"p"},"Comparator<T>"),"\uff0c\u5b83\u5728\u7ed3\u6784\u4e0a\u4e0e ",(0,r.kt)("inlineCode",{parentName:"p"},"ToIntBiFunction<T,T>")," \u63a5\u53e3\u76f8\u540c\u3002\u5373\u4f7f\u540e\u8005\u63a5\u53e3\u5728\u5c06\u524d\u8005\u6dfb\u52a0\u5230\u5e93\u65f6\u5df2\u7ecf\u5b58\u5728\uff0c\u4f7f\u7528\u5b83\u4e5f\u662f\u9519\u8bef\u7684\u3002\u6709\u51e0\u4e2a\u539f\u56e0\u8bf4\u660e\u6bd4\u8f83\u5668\u5e94\u8be5\u6709\u81ea\u5df1\u7684\u63a5\u53e3\u3002\u9996\u5148\uff0c\u6bcf\u6b21\u5728 API \u4e2d\u4f7f\u7528 Comparator \u65f6\uff0c\u5b83\u7684\u540d\u79f0\u90fd\u63d0\u4f9b\u4e86\u4f18\u79c0\u7684\u6587\u6863\uff0c\u800c\u4e14\u5b83\u7684\u4f7f\u7528\u975e\u5e38\u9891\u7e41\u3002\u901a\u8fc7\u5b9e\u73b0\u63a5\u53e3\uff0c\u4f60\u4fdd\u8bc1\u9075\u5b88\u5176\u5951\u7ea6\u3002\u7b2c\u4e09\uff0c\u8be5\u63a5\u53e3\u5927\u91cf\u914d\u5907\u4e86\u7528\u4e8e\u8f6c\u6362\u548c\u7ec4\u5408\u6bd4\u8f83\u5668\u7684\u6709\u7528\u9ed8\u8ba4\u65b9\u6cd5\u3002"),(0,r.kt)("p",null,"You should seriously consider writing a purpose-built functional interface in preference to using a standard one if you need a functional interface that shares one or more of the following characteristics with Comparator:"),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u9700\u8981\u4e0e Comparator \u5171\u4eab\u4ee5\u4e0b\u4e00\u4e2a\u6216\u591a\u4e2a\u7279\u6027\u7684\u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u8ba4\u771f\u8003\u8651\u7f16\u5199\u4e00\u4e2a\u4e13\u7528\u7684\u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6807\u51c6\u63a5\u53e3\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It will be commonly used and could benefit from a descriptive name.")),(0,r.kt)("p",null,"\u5b83\u5c06\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ece\u63cf\u8ff0\u6027\u540d\u79f0\u4e2d\u83b7\u76ca\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It has a strong contract associated with it.")),(0,r.kt)("p",null,"\u5b83\u6709\u4e00\u4e2a\u5f3a\u6709\u529b\u7684\u7ea6\u5b9a\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It would benefit from custom default methods.")),(0,r.kt)("p",null,"\u5b83\u5c06\u53d7\u76ca\u4e8e\u81ea\u5b9a\u4e49\u9ed8\u8ba4\u65b9\u6cd5\u3002"),(0,r.kt)("p",null,"If you elect to write your own functional interface, remember that it\u2019s an interface and hence should be designed with great care (Item 21)."),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u9009\u62e9\u7f16\u5199\u81ea\u5df1\u7684\u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u8bf7\u8bb0\u4f4f\u8fd9\u662f\u4e00\u4e2a\u63a5\u53e3\uff0c\u56e0\u6b64\u5e94\u8be5\u975e\u5e38\u5c0f\u5fc3\u5730\u8bbe\u8ba1\u5b83\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-4-Item-21-Design-interfaces-for-posterity"},"Item-21"),"\uff09\u3002"),(0,r.kt)("p",null,"Notice that the EldestEntryRemovalFunction interface (page 199) is labeled with the @FunctionalInterface annotation. This annotation type is similar in spirit to @Override. It is a statement of programmer intent that serves three purposes: it tells readers of the class and its documentation that the interface was designed to enable lambdas; it keeps you honest because the interface won\u2019t compile unless it has exactly one abstract method; and it prevents maintainers from accidentally adding abstract methods to the interface as it evolves. ",(0,r.kt)("strong",{parentName:"p"},"Always annotate your functional interfaces with the @FunctionalInterface annotation.")),(0,r.kt)("p",null,"\u6ce8\u610f EldestEntryRemovalFunction \u63a5\u53e3(\u7b2c199\u9875)\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"@FunctionalInterface")," \u6ce8\u91ca\u8fdb\u884c\u6807\u8bb0\u3002\u8fd9\u79cd\u6ce8\u91ca\u7c7b\u578b\u5728\u672c\u8d28\u4e0a\u7c7b\u4f3c\u4e8e ",(0,r.kt)("inlineCode",{parentName:"p"},"@Override"),"\u3002\u5b83\u662f\u7a0b\u5e8f\u5458\u610f\u56fe\u7684\u58f0\u660e\uff0c\u6709\u4e09\u4e2a\u76ee\u7684\uff1a\u5b83\u544a\u8bc9\u7c7b\u53ca\u5176\u6587\u6863\u7684\u8bfb\u8005\uff0c\u63a5\u53e3\u7684\u8bbe\u8ba1\u662f\u4e3a\u4e86\u542f\u7528 lambda \u8868\u8fbe\u5f0f\uff1b\u5b83\u4f7f\u4f60\u4fdd\u6301\u8bda\u5b9e\uff0c\u56e0\u4e3a\u63a5\u53e3\u4e0d\u4f1a\u7f16\u8bd1\uff0c\u9664\u975e\u5b83\u53ea\u6709\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff1b\u5b83\u8fd8\u53ef\u4ee5\u9632\u6b62\u7ef4\u62a4\u8005\u5728\u63a5\u53e3\u53d1\u5c55\u8fc7\u7a0b\u4e2d\u610f\u5916\u5730\u5411\u63a5\u53e3\u6dfb\u52a0\u62bd\u8c61\u65b9\u6cd5\u3002",(0,r.kt)("strong",{parentName:"p"},"\u603b\u662f\u7528 ",(0,r.kt)("inlineCode",{parentName:"strong"},"@FunctionalInterface")," \u6ce8\u91ca\u4f60\u7684\u51fd\u6570\u63a5\u53e3\u3002")),(0,r.kt)("p",null,"A final point should be made concerning the use of functional interfaces in APIs. Do not provide a method with multiple overloadings that take different functional interfaces in the same argument position if it could create a possible ambiguity in the client. This is not just a theoretical problem. The submit method of ExecutorService can take either a ",(0,r.kt)("inlineCode",{parentName:"p"},"Callable<T>")," or a Runnable, and it is possible to write a client program that requires a cast to indicate the correct overloading (Item 52). The easiest way to avoid this problem is not to write overloadings that take different functional interfaces in the same argument position. This is a special case of the advice in Item 52, \u201cuse overloading judiciously.\u201d"),(0,r.kt)("p",null,"\u6700\u540e\u4e00\u70b9\u5e94\u8be5\u662f\u5173\u4e8e API \u4e2d\u51fd\u6570\u5f0f\u63a5\u53e3\u7684\u4f7f\u7528\u3002\u4e0d\u8981\u63d0\u4f9b\u5177\u6709\u591a\u4e2a\u91cd\u8f7d\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u91c7\u7528\u76f8\u540c\u53c2\u6570\u4f4d\u7f6e\u7684\u4e0d\u540c\u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u5426\u5219\u4f1a\u5728\u5ba2\u6237\u673a\u4e2d\u9020\u6210\u53ef\u80fd\u7684\u6b67\u4e49\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u7406\u8bba\u95ee\u9898\u3002ExecutorService \u7684 submit \u65b9\u6cd5\u53ef\u4ee5\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"Callable<T>")," \u7ea7\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f Runnable \u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u5ba2\u6237\u7aef\u7a0b\u5e8f\uff0c\u5b83\u9700\u8981\u4e00\u4e2a\u7c7b\u578b\u8f6c\u6362\u6765\u6307\u793a\u6b63\u786e\u7684\u91cd\u8f7d(Item 52)\u3002\u907f\u514d\u6b64\u95ee\u9898\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4e0d\u8981\u7f16\u5199\u5c06\u4e0d\u540c\u51fd\u6570\u5f0f\u63a5\u53e3\u653e\u5728\u76f8\u540c\u53c2\u6570\u4f4d\u7f6e\u7684\u91cd\u8f7d\u3002\u8fd9\u662f ",(0,r.kt)("a",{parentName:"p",href:"./Chapter-8-Item-52-Use-overloading-judiciously"},"Item-52")," \u300c\u660e\u667a\u5730\u4f7f\u7528\u8fc7\u8f7d\u300d\u5efa\u8bae\u7684\u4e00\u4e2a\u7279\u4f8b\u3002"),(0,r.kt)("p",null,"In summary, now that Java has lambdas, it is imperative that you design your APIs with lambdas in mind. Accept functional interface types on input and return them on output. It is generally best to use the standard interfaces provided in java.util.function.Function, but keep your eyes open for the relatively rare cases where you would be better off writing your own functional interface."),(0,r.kt)("p",null,"\u603b\u4e4b\uff0c\u65e2\u7136 Java \u5df2\u7ecf\u6709\u4e86 lambda \u8868\u8fbe\u5f0f\uff0c\u4f60\u5fc5\u987b\u5728\u8bbe\u8ba1 API \u65f6\u8003\u8651 lambda \u8868\u8fbe\u5f0f\u3002\u5728\u8f93\u5165\u65f6\u63a5\u53d7\u51fd\u6570\u5f0f\u63a5\u53e3\u7c7b\u578b\uff0c\u5728\u8f93\u51fa\u65f6\u8fd4\u56de\u5b83\u4eec\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.function")," \u4e2d\u63d0\u4f9b\u7684\u6807\u51c6\u51fd\u6570\u5f0f\u63a5\u53e3\uff0c\u4f46\u8bf7\u6ce8\u610f\u6bd4\u8f83\u5c11\u89c1\u7684\u4e00\u4e9b\u60c5\u51b5\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u6700\u597d\u7f16\u5199\u81ea\u5df1\u7684\u51fd\u6570\u5f0f\u63a5\u53e3\u3002"),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"./Chapter-7-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-7-Item-43-Prefer-method-references-to-lambdas"},"Item 43: Prefer method references to lambdas\uff08\u65b9\u6cd5\u5f15\u7528\u4f18\u4e8e \u03bb \u8868\u8fbe\u5f0f\uff09"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-7-Item-45-Use-streams-judiciously"},"Item 45: Use streams judiciously\uff08\u660e\u667a\u5730\u4f7f\u7528\u6d41\uff09")))))}u.isMDXComponent=!0}}]);