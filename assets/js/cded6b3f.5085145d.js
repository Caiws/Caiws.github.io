"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7812],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>p});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),p=i,f=d["".concat(l,".").concat(p)]||d[p]||h[p]||n;return a?r.createElement(f,o(o({ref:t},u),{},{components:a})):r.createElement(f,o({ref:t},u))}));function p(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,o=new Array(n);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<n;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1165:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>c});var r=a(7462),i=(a(7294),a(3905));const n={},o=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-12/Chapter-12-Item-85-Prefer-alternatives-to-Java-serialization",id:"Books/EffectiveJava3/Chapter-12/Chapter-12-Item-85-Prefer-alternatives-to-Java-serialization",title:"Chapter-12-Item-85-Prefer-alternatives-to-Java-serialization",description:"Chapter 12. Serialization\uff08\u5e8f\u5217\u5316\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-85-Prefer-alternatives-to-Java-serialization.md",sourceDirName:"Books/EffectiveJava3/Chapter-12",slug:"/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-85-Prefer-alternatives-to-Java-serialization",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-85-Prefer-alternatives-to-Java-serialization",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-85-Prefer-alternatives-to-Java-serialization.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-12-Introduction",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Introduction"},next:{title:"Chapter-12-Item-86-Implement-Serializable-with-great-caution",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-86-Implement-Serializable-with-great-caution"}},l={},c=[{value:"Chapter 12. Serialization\uff08\u5e8f\u5217\u5316\uff09",id:"chapter-12-serialization\u5e8f\u5217\u5316",level:2},{value:"Item 85: Prefer alternatives to Java serialization\uff08\u4f18\u5148\u9009\u62e9 Java \u5e8f\u5217\u5316\u7684\u66ff\u4ee3\u65b9\u6848\uff09",id:"item-85-prefer-alternatives-to-java-serialization\u4f18\u5148\u9009\u62e9-java-\u5e8f\u5217\u5316\u7684\u66ff\u4ee3\u65b9\u6848",level:3}],u={toc:c};function h(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"chapter-12-serialization\u5e8f\u5217\u5316"},"Chapter 12. Serialization\uff08\u5e8f\u5217\u5316\uff09"),(0,i.kt)("h3",{id:"item-85-prefer-alternatives-to-java-serialization\u4f18\u5148\u9009\u62e9-java-\u5e8f\u5217\u5316\u7684\u66ff\u4ee3\u65b9\u6848"},"Item 85: Prefer alternatives to Java serialization\uff08\u4f18\u5148\u9009\u62e9 Java \u5e8f\u5217\u5316\u7684\u66ff\u4ee3\u65b9\u6848\uff09"),(0,i.kt)("p",null,"When serialization was added to Java in 1997, it was known to be somewhat risky. The approach had been tried in a research language (Modula-3) but never in a production language. While the promise of distributed objects with little effort on the part of the programmer was appealing, the price was invisible constructors and blurred lines between API and implementation, with the potential for problems with correctness, performance, security, and maintenance. Proponents believed the benefits outweighed the risks, but history has shown otherwise."),(0,i.kt)("p",null,"\u5f53\u5e8f\u5217\u5316\u5728 1997 \u5e74\u6dfb\u52a0\u5230 Java \u4e2d\u65f6\uff0c\u5b83\u88ab\u8ba4\u4e3a\u6709\u4e00\u5b9a\u7684\u98ce\u9669\u3002\u8fd9\u79cd\u65b9\u6cd5\u66fe\u5728\u7814\u7a76\u8bed\u8a00\uff08Modula-3\uff09\u4e2d\u5c1d\u8bd5\u8fc7\uff0c\u4f46\u4ece\u672a\u5728\u751f\u4ea7\u8bed\u8a00\u4e2d\u4f7f\u7528\u8fc7\u3002\u867d\u7136\u7a0b\u5e8f\u5458\u4e0d\u8d39\u4ec0\u4e48\u529b\u6c14\u5c31\u80fd\u5b9e\u73b0\u5206\u5e03\u5f0f\u5bf9\u8c61\uff0c\u8fd9\u4e00\u70b9\u5f88\u5438\u5f15\u4eba\uff0c\u4f46\u4ee3\u4ef7\u4e5f\u4e0d\u5c0f\uff0c\u5982\uff1a\u4e0d\u53ef\u89c1\u7684\u6784\u9020\u51fd\u6570\u3001API \u4e0e\u5b9e\u73b0\u4e4b\u95f4\u6a21\u7cca\u7684\u754c\u7ebf\uff0c\u8fd8\u53ef\u80fd\u4f1a\u51fa\u73b0\u6b63\u786e\u6027\u3001\u6027\u80fd\u3001\u5b89\u5168\u6027\u548c\u7ef4\u62a4\u65b9\u9762\u7684\u95ee\u9898\u3002\u652f\u6301\u8005\u8ba4\u4e3a\u6536\u76ca\u5927\u4e8e\u98ce\u9669\uff0c\u4f46\u5386\u53f2\u8bc1\u660e\u5e76\u975e\u5982\u6b64\u3002"),(0,i.kt)("p",null,"The security issues described in previous editions of this book turned out to be every bit as serious as some had feared. The vulnerabilities discussed in the early 2000s were transformed into serious exploits over the next decade, famously including a ransomware attack on the San Francisco Metropolitan Transit Agency Municipal Railway (SFMTA Muni) that shut down the entire fare collection system for two days in November 2016 ","[Gallagher16]","."),(0,i.kt)("p",null,"\u5728\u672c\u4e66\u4e4b\u524d\u7684\u7248\u672c\u4e2d\u63cf\u8ff0\u7684\u5b89\u5168\u95ee\u9898\uff0c\u548c\u4eba\u4eec\u62c5\u5fc3\u7684\u4e00\u6837\u4e25\u91cd\u300221 \u4e16\u7eaa\u521d\u4ec5\u505c\u7559\u5728\u8ba8\u8bba\u7684\u6f0f\u6d1e\u5728\u63a5\u4e0b\u6765\u7684 10 \u5e74\u95f4\u53d8\u6210\u4e86\u771f\u5b9e\u4e25\u91cd\u7684\u6f0f\u6d1e\uff0c\u5176\u4e2d\u6700\u8457\u540d\u7684\u5305\u62ec 2016 \u5e74 11 \u6708\u5bf9\u65e7\u91d1\u5c71\u5927\u90fd\u4f1a\u8fd0\u8f93\u7f72\u5e02\u653f\u94c1\u8def\uff08SFMTA Muni\uff09\u7684\u52d2\u7d22\u8f6f\u4ef6\u653b\u51fb\uff0c\u5bfc\u81f4\u6574\u4e2a\u6536\u8d39\u7cfb\u7edf\u5173\u95ed\u4e86\u4e24\u5929 ","[Gallagher16]","\u3002"),(0,i.kt)("p",null,"A fundamental problem with serialization is that its attack surface is too big to protect, and constantly growing: Object graphs are deserialized by invoking the readObject method on an ObjectInputStream. This method is essentially a magic constructor that can be made to instantiate objects of almost any type on the class path, so long as the type implements the Serializable interface. In the process of deserializing a byte stream, this method can execute code from any of these types, so the code for all of these types is part of the attack surface."),(0,i.kt)("p",null,"\u5e8f\u5217\u5316\u7684\u4e00\u4e2a\u6839\u672c\u95ee\u9898\u662f\u5b83\u7684\u53ef\u653b\u51fb\u8303\u56f4\u592a\u5927\uff0c\u4e14\u96be\u4ee5\u4fdd\u62a4\uff0c\u800c\u4e14\u95ee\u9898\u8fd8\u5728\u4e0d\u65ad\u589e\u591a\uff1a\u901a\u8fc7\u8c03\u7528 ObjectInputStream \u4e0a\u7684 readObject \u65b9\u6cd5\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u56fe\u3002\u8fd9\u4e2a\u65b9\u6cd5\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u795e\u5947\u7684\u6784\u9020\u51fd\u6570\uff0c\u53ef\u4ee5\u7528\u6765\u5b9e\u4f8b\u5316\u7c7b\u8def\u5f84\u4e0a\u51e0\u4e4e\u4efb\u4f55\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u53ea\u8981\u8be5\u7c7b\u578b\u5b9e\u73b0 Serializable \u63a5\u53e3\u3002\u5728\u53cd\u5e8f\u5217\u5316\u5b57\u8282\u6d41\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6b64\u65b9\u6cd5\u53ef\u4ee5\u6267\u884c\u6765\u81ea\u4efb\u4f55\u8fd9\u4e9b\u7c7b\u578b\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u6240\u6709\u8fd9\u4e9b\u7c7b\u578b\u7684\u4ee3\u7801\u90fd\u5728\u653b\u51fb\u8303\u56f4\u5185\u3002"),(0,i.kt)("p",null,"The attack surface includes classes in the Java platform libraries, in third-party libraries such as Apache Commons Collections, and in the application itself. Even if you adhere to all of the relevant best practices and succeed in writing serializable classes that are invulnerable to attack, your application may still be vulnerable. To quote Robert Seacord, technical manager of the CERT Coordination Center:"),(0,i.kt)("p",null,"\u653b\u51fb\u53ef\u6d89\u53ca Java \u5e73\u53f0\u5e93\u3001\u7b2c\u4e09\u65b9\u5e93\uff08\u5982 Apache Commons collection\uff09\u548c\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u4e2d\u7684\u7c7b\u3002\u5373\u4f7f\u575a\u6301\u5c65\u884c\u5b9e\u8df5\u4e86\u6240\u6709\u76f8\u5173\u7684\u6700\u4f73\u5efa\u8bae\uff0c\u5e76\u6210\u529f\u5730\u7f16\u5199\u4e86\u4e0d\u53d7\u653b\u51fb\u7684\u53ef\u5e8f\u5217\u5316\u7c7b\uff0c\u5e94\u7528\u7a0b\u5e8f\u4ecd\u7136\u53ef\u80fd\u662f\u8106\u5f31\u7684\u3002\u5f15\u7528 CERT \u534f\u8c03\u4e2d\u5fc3\u6280\u672f\u7ecf\u7406 Robert Seacord \u7684\u8bdd\uff1a"),(0,i.kt)("p",null,"Java deserialization is a clear and present danger as it is widely used both directly by applications and indirectly by Java subsystems such as RMI (Remote Method Invocation), JMX (Java Management Extension), and JMS (Java Messaging System). Deserialization of untrusted streams can result in remote code execution (RCE), denial-of-service (DoS), and a range of other exploits. Applications can be vulnerable to these attacks even if they did nothing wrong. ","[Seacord17]"),(0,i.kt)("p",null,"Java \u53cd\u5e8f\u5217\u5316\u662f\u4e00\u4e2a\u660e\u663e\u4e14\u771f\u5b9e\u7684\u5371\u9669\u6e90\uff0c\u56e0\u4e3a\u5b83\u88ab\u5e94\u7528\u7a0b\u5e8f\u76f4\u63a5\u548c\u95f4\u63a5\u5730\u5e7f\u6cdb\u4f7f\u7528\uff0c\u6bd4\u5982 RMI\uff08\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff09\u3001JMX\uff08Java \u7ba1\u7406\u6269\u5c55\uff09\u548c JMS\uff08Java \u6d88\u606f\u4f20\u9012\u7cfb\u7edf\uff09\u3002\u4e0d\u53ef\u4fe1\u6d41\u7684\u53cd\u5e8f\u5217\u5316\u53ef\u80fd\u5bfc\u81f4\u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\uff08RCE\uff09\u3001\u62d2\u7edd\u670d\u52a1\uff08DoS\uff09\u548c\u4e00\u7cfb\u5217\u5176\u4ed6\u653b\u51fb\u3002\u5e94\u7528\u7a0b\u5e8f\u5f88\u5bb9\u6613\u53d7\u5230\u8fd9\u4e9b\u653b\u51fb\uff0c\u5373\u4f7f\u5b83\u4eec\u672c\u8eab\u6ca1\u6709\u9519\u8bef\u3002","[Seacord17]"),(0,i.kt)("p",null,"Attackers and security researchers study the serializable types in the Java libraries and in commonly used third-party libraries, looking for methods invoked during deserialization that perform potentially dangerous activities. Such methods are known as gadgets. Multiple gadgets can be used in concert, to form a gadget chain. From time to time, a gadget chain is discovered that is sufficiently powerful to allow an attacker to execute arbitrary native code on the underlying hardware, given only the opportunity to submit a carefully crafted byte stream for deserialization. This is exactly what happened in the SFMTA Muni attack. This attack was not isolated. There have been others, and there will be more."),(0,i.kt)("p",null,"\u653b\u51fb\u8005\u548c\u5b89\u5168\u7814\u7a76\u4eba\u5458\u7814\u7a76 Java \u5e93\u548c\u5e38\u7528\u7684\u7b2c\u4e09\u65b9\u5e93\u4e2d\u7684\u53ef\u5e8f\u5217\u5316\u7c7b\u578b\uff0c\u5bfb\u627e\u5728\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b\u4e2d\u8c03\u7528\u7684\u6f5c\u5728\u5371\u9669\u6d3b\u52a8\u7684\u65b9\u6cd5\u79f0\u4e3a gadget\u3002\u591a\u4e2a\u5c0f\u5de5\u5177\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\uff0c\u5f62\u6210\u4e00\u4e2a\u5c0f\u5de5\u5177\u94fe\u3002\u5076\u5c14\u4f1a\u53d1\u73b0\u4e00\u4e2a\u5c0f\u90e8\u4ef6\u94fe\uff0c\u5b83\u7684\u529f\u80fd\u8db3\u591f\u5f3a\u5927\uff0c\u5141\u8bb8\u653b\u51fb\u8005\u5728\u5e95\u5c42\u786c\u4ef6\u4e0a\u6267\u884c\u4efb\u610f\u7684\u672c\u673a\u4ee3\u7801\uff0c\u5141\u8bb8\u63d0\u4ea4\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u5b57\u8282\u6d41\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u6b63\u662f SFMTA Muni \u88ad\u51fb\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u8fd9\u6b21\u88ad\u51fb\u5e76\u4e0d\u662f\u5b64\u7acb\u7684\u3002\u4e0d\u4ec5\u5df2\u7ecf\u5b58\u5728\uff0c\u800c\u4e14\u8fd8\u4f1a\u6709\u66f4\u591a\u3002"),(0,i.kt)("p",null,"Without using any gadgets, you can easily mount a denial-of-service attack by causing the deserialization of a short stream that requires a long time to deserialize. Such streams are known as deserialization bombs ","[Svoboda16]",". Here\u2019s an example by Wouter Coekaerts that uses only hash sets and a string ","[Coekaerts15]",":"),(0,i.kt)("p",null,"\u4e0d\u4f7f\u7528\u4efb\u4f55 gadget\uff0c\u4f60\u90fd\u53ef\u4ee5\u901a\u8fc7\u5bf9\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u53cd\u5e8f\u5217\u5316\u7684\u77ed\u6d41\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\uff0c\u8f7b\u677e\u5730\u53d1\u8d77\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002\u8fd9\u79cd\u6d41\u88ab\u79f0\u4e3a\u53cd\u5e8f\u5217\u5316\u70b8\u5f39 ","[Svoboda16]","\u3002\u4e0b\u9762\u662f Wouter Coekaerts \u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u53ea\u4f7f\u7528\u54c8\u5e0c\u96c6\u548c\u5b57\u7b26\u4e32 ","[Coekaerts15]","\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Deserialization bomb - deserializing this stream takes forever\nstatic byte[] bomb() {\n    Set<Object> root = new HashSet<>();\n    Set<Object> s1 = root;\n    Set<Object> s2 = new HashSet<>();\n    for (int i = 0; i < 100; i++) {\n        Set<Object> t1 = new HashSet<>();\n        Set<Object> t2 = new HashSet<>();\n        t1.add("foo"); // Make t1 unequal to t2\n        s1.add(t1); s1.add(t2);\n        s2.add(t1); s2.add(t2);\n        s1 = t1;\n        s2 = t2;\n    }\n    return serialize(root); // Method omitted for brevity\n}\n')),(0,i.kt)("p",null,"The object graph consists of 201 HashSet instances, each of which contains 3 or fewer object references. The entire stream is 5,744 bytes long, yet the sun would burn out long before you could deserialize it. The problem is that deserializing a HashSet instance requires computing the hash codes of its elements. The 2 elements of the root hash set are themselves hash sets containing 2 hash-set elements, each of which contains 2 hash-set elements, and so on, 100 levels deep. Therefore, deserializing the set causes the hashCode method to be invoked over 2100 times. Other than the fact that the deserialization is taking forever, the deserializer has no indication that anything is amiss. Few objects are produced, and the stack depth is bounded."),(0,i.kt)("p",null,"\u5bf9\u8c61\u56fe\u7531 201 \u4e2a HashSet \u5b9e\u4f8b\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u5305\u542b 3 \u4e2a\u6216\u66f4\u5c11\u7684\u5bf9\u8c61\u5f15\u7528\u3002\u6574\u4e2a\u6d41\u7684\u957f\u5ea6\u4e3a 5744 \u5b57\u8282\uff0c\u4f46\u662f\u5728\u4f60\u5bf9\u5176\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u4e4b\u524d\uff0c\u8d44\u6e90\u5c31\u5df2\u7ecf\u8017\u5c3d\u4e86\u3002\u95ee\u9898\u5728\u4e8e\uff0c\u53cd\u5e8f\u5217\u5316 HashSet \u5b9e\u4f8b\u9700\u8981\u8ba1\u7b97\u5176\u5143\u7d20\u7684\u54c8\u5e0c\u7801\u3002\u6839\u54c8\u5e0c\u96c6\u7684 2 \u4e2a\u5143\u7d20\u672c\u8eab\u5c31\u662f\u5305\u542b 2 \u4e2a\u54c8\u5e0c\u96c6\u5143\u7d20\u7684\u54c8\u5e0c\u96c6\uff0c\u6bcf\u4e2a\u54c8\u5e0c\u96c6\u5143\u7d20\u5305\u542b 2 \u4e2a\u54c8\u5e0c\u96c6\u5143\u7d20\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6df1\u5ea6\u4e3a 100\u3002\u56e0\u6b64\uff0c\u53cd\u5e8f\u5217\u5316 Set \u4f1a\u5bfc\u81f4 hashCode \u65b9\u6cd5\u88ab\u8c03\u7528\u8d85\u8fc7 2100 \u6b21\u3002\u9664\u4e86\u53cd\u5e8f\u5217\u5316\u4f1a\u6301\u7eed\u5f88\u957f\u65f6\u95f4\u4e4b\u5916\uff0c\u53cd\u5e8f\u5217\u5316\u5668\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u7684\u8ff9\u8c61\u3002\u751f\u6210\u7684\u5bf9\u8c61\u5f88\u5c11\uff0c\u5e76\u4e14\u5806\u6808\u6df1\u5ea6\u662f\u6709\u754c\u7684\u3002"),(0,i.kt)("p",null,"So what can you do defend against these problems? You open yourself up to attack whenever you deserialize a byte stream that you don\u2019t trust. ",(0,i.kt)("strong",{parentName:"p"},"The best way to avoid serialization exploits is never to deserialize anything.")," In the words of the computer named Joshua in the 1983 movie WarGames, \u201cthe only winning move is not to play.\u201d ",(0,i.kt)("strong",{parentName:"p"},"There is no reason to use Java serialization in any new system you write.")," There are other mechanisms for translating between objects and byte sequences that avoid many of the dangers of Java serialization, while offering numerous advantages, such as cross-platform support, high performance, a large ecosystem of tools, and a broad community of expertise. In this book, we refer to these mechanisms as cross-platform structured-data representations. While others sometimes refer to them as serialization systems, this book avoids that usage to prevent confusion with Java serialization."),(0,i.kt)("p",null,"\u90a3\u4e48\u4f60\u80fd\u505a\u4e9b\u4ec0\u4e48\u6765\u62b5\u5fa1\u8fd9\u4e9b\u95ee\u9898\u5462\uff1f\u5f53\u4f60\u53cd\u5e8f\u5217\u5316\u4e00\u4e2a\u4f60\u4e0d\u4fe1\u4efb\u7684\u5b57\u8282\u6d41\u65f6\uff0c\u4f60\u5c31\u4f1a\u53d7\u5230\u653b\u51fb\u3002",(0,i.kt)("strong",{parentName:"p"},"\u907f\u514d\u5e8f\u5217\u5316\u5229\u7528\u7684\u6700\u597d\u65b9\u6cd5\u662f\u6c38\u8fdc\u4e0d\u8981\u53cd\u5e8f\u5217\u5316\u4efb\u4f55\u4e1c\u897f\u3002")," \u7528 1983 \u5e74\u7535\u5f71\u300a\u6218\u4e89\u6e38\u620f\u300b\uff08WarGames\uff09\u4e2d\u540d\u4e3a\u7ea6\u4e66\u4e9a\uff08Joshua\uff09\u7684\u7535\u8111\u7684\u8bdd\u6765\u8bf4\uff0c\u300c\u552f\u4e00\u7684\u5236\u80dc\u7edd\u62db\u5c31\u662f\u4e0d\u73a9\u3002\u300d",(0,i.kt)("strong",{parentName:"p"},"\u6ca1\u6709\u7406\u7531\u5728\u4f60\u7f16\u5199\u7684\u4efb\u4f55\u65b0\u7cfb\u7edf\u4e2d\u4f7f\u7528 Java \u5e8f\u5217\u5316\u3002")," \u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u673a\u5236\u53ef\u4ee5\u5728\u5bf9\u8c61\u548c\u5b57\u8282\u5e8f\u5217\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\uff0c\u4ece\u800c\u907f\u514d\u4e86 Java \u5e8f\u5217\u5316\u7684\u8bb8\u591a\u5371\u9669\uff0c\u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u8bb8\u591a\u4f18\u52bf\uff0c\u6bd4\u5982\u8de8\u5e73\u53f0\u652f\u6301\u3001\u9ad8\u6027\u80fd\u3001\u5927\u91cf\u5de5\u5177\u548c\u5e7f\u6cdb\u7684\u4e13\u5bb6\u793e\u533a\u3002\u5728\u672c\u4e66\u4e2d\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u673a\u5236\u79f0\u4e3a\u8de8\u5e73\u53f0\u7ed3\u6784\u6570\u636e\u8868\u793a\u3002\u867d\u7136\u5176\u4ed6\u4eba\u6709\u65f6\u5c06\u5b83\u4eec\u79f0\u4e3a\u5e8f\u5217\u5316\u7cfb\u7edf\uff0c\u4f46\u672c\u4e66\u907f\u514d\u4f7f\u7528\u8fd9\u79cd\u8bf4\u6cd5\uff0c\u4ee5\u514d\u4e0e Java \u5e8f\u5217\u5316\u6df7\u6dc6\u3002"),(0,i.kt)("p",null,"What these representations have in common is that they\u2019re far simpler than Java serialization. They don\u2019t support automatic serialization and deserialization of arbitrary object graphs. Instead, they support simple, structured data-objects consisting of a collection of attribute-value pairs. Only a few primitive and array data types are supported. This simple abstraction turns out to be sufficient for building extremely powerful distributed systems and simple enough to avoid the serious problems that have plagued Java serialization since its inception."),(0,i.kt)("p",null,"\u4ee5\u4e0a\u6240\u8ff0\u6280\u672f\u7684\u5171\u540c\u70b9\u662f\u5b83\u4eec\u6bd4 Java \u5e8f\u5217\u5316\u7b80\u5355\u5f97\u591a\u3002\u5b83\u4eec\u4e0d\u652f\u6301\u4efb\u610f\u5bf9\u8c61\u56fe\u7684\u81ea\u52a8\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u652f\u6301\u7b80\u5355\u7684\u7ed3\u6784\u5316\u6570\u636e\u5bf9\u8c61\uff0c\u7531\u4e00\u7ec4\u300c\u5c5e\u6027-\u503c\u300d\u5bf9\u7ec4\u6210\u3002\u53ea\u6709\u5c11\u6570\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548c\u6570\u7ec4\u6570\u636e\u7c7b\u578b\u5f97\u5230\u652f\u6301\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e2a\u7b80\u5355\u7684\u62bd\u8c61\u8db3\u4ee5\u6784\u5efa\u529f\u80fd\u6781\u5176\u5f3a\u5927\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u800c\u4e14\u8db3\u591f\u7b80\u5355\uff0c\u53ef\u4ee5\u907f\u514d Java \u5e8f\u5217\u5316\u4ece\u4e00\u5f00\u59cb\u5c31\u5b58\u5728\u7684\u4e25\u91cd\u95ee\u9898\u3002"),(0,i.kt)("p",null,"The leading cross-platform structured data representations are JSON ","[JSON]"," and Protocol Buffers, also known as protobuf ","[Protobuf]",". JSON was designed by Douglas Crockford for browser-server communication, and protocol buffers were designed by Google for storing and interchanging structured data among its servers. Even though these representations are sometimes called languageneutral, JSON was originally developed for JavaScript and protobuf for C++; both representations retain vestiges of their origins."),(0,i.kt)("p",null,"\u9886\u5148\u7684\u8de8\u5e73\u53f0\u7ed3\u6784\u5316\u6570\u636e\u8868\u793a\u662f JSON \u548c Protocol Buffers\uff0c\u4e5f\u79f0\u4e3a protobuf\u3002JSON \u7531 Douglas Crockford \u8bbe\u8ba1\u7528\u4e8e\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668\u901a\u4fe1\uff0cProtocol Buffers \u7531\u8c37\u6b4c\u8bbe\u8ba1\u7528\u4e8e\u5728\u5176\u670d\u52a1\u5668\u4e4b\u95f4\u5b58\u50a8\u548c\u4ea4\u6362\u7ed3\u6784\u5316\u6570\u636e\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u6280\u672f\u6709\u65f6\u88ab\u79f0\u4e3a\u300c\u4e2d\u6027\u8bed\u8a00\u300d\uff0c\u4f46 JSON \u6700\u521d\u662f\u4e3a JavaScript \u5f00\u53d1\u7684\uff0c\u800c protobuf \u662f\u4e3a c++ \u5f00\u53d1\u7684\uff1b\u8fd9\u4e24\u79cd\u6280\u672f\u90fd\u4fdd\u7559\u4e86\u5176\u8d77\u6e90\u7684\u75d5\u8ff9\u3002"),(0,i.kt)("p",null,"The most significant differences between JSON and protobuf are that JSON is text-based and human-readable, whereas protobuf is binary and substantially more efficient; and that JSON is exclusively a data representation, whereas protobuf offers schemas (types) to document and enforce appropriate usage. Although protobuf is more efficient than JSON, JSON is extremely efficient for a text-based representation. And while protobuf is a binary representation, it does provide an alternative text representation for use where human-readability is desired (pbtxt)."),(0,i.kt)("p",null,"JSON \u548c protobuf \u4e4b\u95f4\u6700\u663e\u8457\u7684\u533a\u522b\u662f JSON \u662f\u57fa\u4e8e\u6587\u672c\u7684\uff0c\u5e76\u4e14\u662f\u4eba\u7c7b\u53ef\u8bfb\u7684\uff0c\u800c protobuf \u662f\u4e8c\u8fdb\u5236\u7684\uff0c\u4f46\u6548\u7387\u66f4\u9ad8\uff1bJSON \u662f\u4e00\u79cd\u4e13\u95e8\u7684\u6570\u636e\u8868\u793a\uff0c\u800c protobuf \u63d0\u4f9b\u6a21\u5f0f\uff08\u7c7b\u578b\uff09\u6765\u8bb0\u5f55\u548c\u6267\u884c\u9002\u5f53\u7684\u7528\u6cd5\u3002\u867d\u7136 protobuf \u6bd4 JSON \u66f4\u6709\u6548\uff0c\u4f46\u662f JSON \u5bf9\u4e8e\u57fa\u4e8e\u6587\u672c\u7684\u8868\u793a\u975e\u5e38\u6709\u6548\u3002\u867d\u7136 protobuf \u662f\u4e00\u79cd\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u4f46\u5b83\u786e\u5b9e\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u6587\u672c\u8868\u793a\uff0c\u53ef\u7528\u4e8e\u9700\u8981\u5177\u5907\u4eba\u7c7b\u53ef\u8bfb\u6027\u7684\u573a\u666f\uff08pbtxt\uff09\u3002"),(0,i.kt)("p",null,"If you can\u2019t avoid Java serialization entirely, perhaps because you\u2019re working in the context of a legacy system that requires it, your next best alternative is to ",(0,i.kt)("strong",{parentName:"p"},"never deserialize untrusted data.")," In particular, you should never accept RMI traffic from untrusted sources. The official secure coding guidelines for Java say \u201cDeserialization of untrusted data is inherently dangerous and should be avoided.\u201d This sentence is set in large, bold, italic, red type, and it is the only text in the entire document that gets this treatment ","[Java-secure]","."),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u4e0d\u80fd\u5b8c\u5168\u907f\u514d Java \u5e8f\u5217\u5316\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4f60\u9700\u8981\u5728\u9057\u7559\u7cfb\u7edf\u73af\u5883\u4e2d\u5de5\u4f5c\uff0c\u90a3\u4e48\u4f60\u7684\u4e0b\u4e00\u4e2a\u6700\u4f73\u9009\u62e9\u662f ",(0,i.kt)("strong",{parentName:"p"},"\u6c38\u8fdc\u4e0d\u8981\u53cd\u5e8f\u5217\u5316\u4e0d\u53ef\u4fe1\u7684\u6570\u636e\u3002")," \u7279\u522b\u8981\u6ce8\u610f\uff0c\u4f60\u4e0d\u5e94\u8be5\u63a5\u53d7\u6765\u81ea\u4e0d\u53ef\u4fe1\u6765\u6e90\u7684 RMI \u6d41\u91cf\u3002Java \u7684\u5b98\u65b9\u5b89\u5168\u7f16\u7801\u6307\u5357\u8bf4\uff1a\u300c\u53cd\u5e8f\u5217\u5316\u4e0d\u53ef\u4fe1\u7684\u6570\u636e\u672c\u8d28\u4e0a\u662f\u5371\u9669\u7684\uff0c\u5e94\u8be5\u907f\u514d\u3002\u300d\u8fd9\u53e5\u8bdd\u662f\u7528\u5927\u53f7\u3001\u7c97\u4f53\u3001\u659c\u4f53\u548c\u7ea2\u8272\u5b57\u4f53\u8bbe\u7f6e\u7684\uff0c\u5b83\u662f\u6574\u4e2a\u6587\u6863\u4e2d\u552f\u4e00\u5f97\u5230\u8fd9\u79cd\u683c\u5f0f\u5904\u7406\u7684\u6587\u672c\u3002","[Java-secure]"),(0,i.kt)("p",null,"If you can\u2019t avoid serialization and you aren\u2019t absolutely certain of the safety of the data you\u2019re deserializing, use the object deserialization filtering added in Java 9 and backported to earlier releases (java.io.ObjectInputFilter). This facility lets you specify a filter that is applied to data streams before they\u2019re deserialized. It operates at the class granularity, letting you accept or reject certain classes. Accepting classes by default and rejecting a list of potentially dangerous ones is known as blacklisting; rejecting classes by default and accepting a list of those that are presumed safe is known as whitelisting. ",(0,i.kt)("strong",{parentName:"p"},"Prefer whitelisting to blacklisting,")," as blacklisting only protects you against known threats. A tool called Serial Whitelist Application Trainer (SWAT) can be used to automatically prepare a whitelist for your application ","[Schneider16]",". The filtering facility will also protect you against excessive memory usage, and excessively deep object graphs, but it will not protect you against serialization bombs like the one shown above."),(0,i.kt)("p",null,"\u5982\u679c\u65e0\u6cd5\u907f\u514d\u5e8f\u5217\u5316\uff0c\u5e76\u4e14\u4e0d\u80fd\u7edd\u5bf9\u786e\u5b9a\u53cd\u5e8f\u5217\u5316\u6570\u636e\u7684\u5b89\u5168\u6027\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 Java 9 \u4e2d\u6dfb\u52a0\u7684\u5bf9\u8c61\u53cd\u5e8f\u5217\u5316\u7b5b\u9009\uff0c\u5e76\u5c06\u5176\u79fb\u690d\u5230\u65e9\u671f\u7248\u672c\uff08java.io.ObjectInputFilter\uff09\u3002\u8be5\u5de5\u5177\u5141\u8bb8\u4f60\u6307\u5b9a\u4e00\u4e2a\u8fc7\u6ee4\u5668\uff0c\u8be5\u8fc7\u6ee4\u5668\u5728\u53cd\u5e8f\u5217\u5316\u6570\u636e\u6d41\u4e4b\u524d\u5e94\u7528\u4e8e\u6570\u636e\u6d41\u3002\u5b83\u5728\u7c7b\u7c92\u5ea6\u4e0a\u8fd0\u884c\uff0c\u5141\u8bb8\u4f60\u63a5\u53d7\u6216\u62d2\u7edd\u67d0\u4e9b\u7c7b\u3002\u9ed8\u8ba4\u63a5\u53d7\u6240\u6709\u7c7b\uff0c\u5e76\u62d2\u7edd\u5df2\u77e5\u6f5c\u5728\u5371\u9669\u7c7b\u7684\u5217\u8868\u79f0\u4e3a\u9ed1\u540d\u5355\uff1b\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u62d2\u7edd\u5176\u4ed6\u7c7b\uff0c\u5e76\u63a5\u53d7\u5047\u5b9a\u5b89\u5168\u7684\u7c7b\u7684\u5217\u8868\u79f0\u4e3a\u767d\u540d\u5355\u3002",(0,i.kt)("strong",{parentName:"p"},"\u4f18\u5148\u9009\u62e9\u767d\u540d\u5355\u800c\u4e0d\u662f\u9ed1\u540d\u5355\uff0c")," \u56e0\u4e3a\u9ed1\u540d\u5355\u53ea\u4fdd\u62a4\u4f60\u514d\u53d7\u5df2\u77e5\u7684\u5a01\u80c1\u3002\u4e00\u4e2a\u540d\u4e3a Serial Whitelist Application Trainer\uff08SWAT\uff09\u7684\u5de5\u5177\u53ef\u7528\u4e8e\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u81ea\u52a8\u51c6\u5907\u4e00\u4e2a\u767d\u540d\u5355 ","[Schneider16]","\u3002\u8fc7\u6ee4\u5de5\u5177\u8fd8\u5c06\u4fdd\u62a4\u4f60\u514d\u53d7\u8fc7\u5ea6\u5185\u5b58\u4f7f\u7528\u548c\u8fc7\u4e8e\u6df1\u5165\u7684\u5bf9\u8c61\u56fe\u7684\u5f71\u54cd\uff0c\u4f46\u5b83\u4e0d\u80fd\u4fdd\u62a4\u4f60\u514d\u53d7\u5982\u4e0a\u9762\u6240\u793a\u7684\u5e8f\u5217\u5316\u70b8\u5f39\u7684\u5f71\u54cd\u3002"),(0,i.kt)("p",null,"Unfortunately, serialization is still pervasive in the Java ecosystem. If you are maintaining a system that is based on Java serialization, seriously consider migrating to a cross-platform structured-data representation, even though this may be a time-consuming endeavor. Realistically, you may still find yourself having to write or maintain a serializable class. It requires great care to write a serializable class that is correct, safe, and efficient. The remainder of this chapter provides advice on when and how to do this."),(0,i.kt)("p",null,"\u4e0d\u5e78\u7684\u662f\uff0c\u5e8f\u5217\u5316\u5728 Java \u751f\u6001\u7cfb\u7edf\u4e2d\u4ecd\u7136\u5f88\u666e\u904d\u3002\u5982\u679c\u4f60\u6b63\u5728\u7ef4\u62a4\u4e00\u4e2a\u57fa\u4e8e Java \u5e8f\u5217\u5316\u7684\u7cfb\u7edf\uff0c\u8bf7\u8ba4\u771f\u8003\u8651\u8fc1\u79fb\u5230\u8de8\u5e73\u53f0\u7684\u7ed3\u6784\u5316\u6570\u636e\uff0c\u5c3d\u7ba1\u8fd9\u53ef\u80fd\u662f\u4e00\u9879\u8017\u65f6\u7684\u5de5\u4f5c\u3002\u5b9e\u9645\u4e0a\uff0c\u4f60\u53ef\u80fd\u4ecd\u7136\u9700\u8981\u7f16\u5199\u6216\u7ef4\u62a4\u4e00\u4e2a\u53ef\u5e8f\u5217\u5316\u7684\u7c7b\u3002\u7f16\u5199\u4e00\u4e2a\u6b63\u786e\u3001\u5b89\u5168\u3001\u9ad8\u6548\u7684\u53ef\u5e8f\u5217\u5316\u7c7b\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u3002\u672c\u7ae0\u7684\u5176\u4f59\u90e8\u5206\u5c06\u63d0\u4f9b\u4f55\u65f6\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u6b64\u64cd\u4f5c\u7684\u5efa\u8bae\u3002"),(0,i.kt)("p",null,"In summary, serialization is dangerous and should be avoided. If you are designing a system from scratch, use a cross-platform structured-data representation such as JSON or protobuf instead. Do not deserialize untrusted data. If you must do so, use object deserialization filtering, but be aware that it is not guaranteed to thwart all attacks. Avoid writing serializable classes. If you must do so, exercise great caution."),(0,i.kt)("p",null,"\u603b\u4e4b\uff0c\u5e8f\u5217\u5316\u662f\u5371\u9669\u7684\uff0c\u5e94\u8be5\u907f\u514d\u3002\u5982\u679c\u4f60\u4ece\u5934\u5f00\u59cb\u8bbe\u8ba1\u4e00\u4e2a\u7cfb\u7edf\uff0c\u53ef\u4ee5\u4f7f\u7528\u8de8\u5e73\u53f0\u7684\u7ed3\u6784\u5316\u6570\u636e\uff0c\u5982 JSON \u6216 protobuf\u3002\u4e0d\u8981\u53cd\u5e8f\u5217\u5316\u4e0d\u53ef\u4fe1\u7684\u6570\u636e\u3002\u5982\u679c\u5fc5\u987b\u8fd9\u6837\u505a\uff0c\u8bf7\u4f7f\u7528\u5bf9\u8c61\u53cd\u5e8f\u5217\u5316\u8fc7\u6ee4\uff0c\u4f46\u8981\u6ce8\u610f\uff0c\u5b83\u4e0d\u80fd\u4fdd\u8bc1\u963b\u6b62\u6240\u6709\u653b\u51fb\u3002\u907f\u514d\u7f16\u5199\u53ef\u5e8f\u5217\u5316\u7684\u7c7b\u3002\u5982\u679c\u4f60\u5fc5\u987b\u8fd9\u6837\u505a\uff0c\u4e00\u5b9a\u8981\u975e\u5e38\u5c0f\u5fc3\u3002"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"./Chapter-12/Chapter-12-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,i.kt)("a",{parentName:"strong",href:"./Chapter-11/Chapter-11-Item-84-Don%E2%80%99t-depend-on-the-thread-scheduler"},"Item 84: Don\u2019t depend on the thread scheduler\uff08\u4e0d\u8981\u4f9d\u8d56\u7ebf\u7a0b\u8c03\u5ea6\u5668\uff09"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,i.kt)("a",{parentName:"strong",href:"./Chapter-12/Chapter-12-Item-86-Implement-Serializable-with-great-caution"},"Item 86: Implement Serializable with great caution\uff08\u975e\u5e38\u8c28\u614e\u5730\u5b9e\u73b0 Serializable\uff09")))))}h.isMDXComponent=!0}}]);