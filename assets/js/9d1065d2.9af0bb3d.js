"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8773],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=o.createContext({}),p=function(e){var t=o.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(a),u=n,d=h["".concat(l,".").concat(u)]||h[u]||m[u]||r;return a?o.createElement(d,i(i({ref:t},c),{},{components:a})):o.createElement(d,i({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<r;p++)i[p]=a[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}h.displayName="MDXCreateElement"},7182:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=a(7462),n=(a(7294),a(3905));const r={},i=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-3/Chapter-3-Item-14-Consider-implementing-Comparable",id:"Books/EffectiveJava3/Chapter-3/Chapter-3-Item-14-Consider-implementing-Comparable",title:"Chapter-3-Item-14-Consider-implementing-Comparable",description:"Chapter 3. Methods Common to All Objects\uff08\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-14-Consider-implementing-Comparable.md",sourceDirName:"Books/EffectiveJava3/Chapter-3",slug:"/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-14-Consider-implementing-Comparable",permalink:"/docs/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-14-Consider-implementing-Comparable",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-14-Consider-implementing-Comparable.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-3-Item-13-Override-clone-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-3/Chapter-3-Item-13-Override-clone-judiciously"},next:{title:"Chapter-4-Introduction",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Introduction"}},l={},p=[{value:"Chapter 3. Methods Common to All Objects\uff08\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5\uff09",id:"chapter-3-methods-common-to-all-objects\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5",level:2},{value:"Item 14: Consider implementing Comparable\uff08\u8003\u8651\u5b9e\u73b0 Comparable \u63a5\u53e3\uff09",id:"item-14-consider-implementing-comparable\u8003\u8651\u5b9e\u73b0-comparable-\u63a5\u53e3",level:3}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,o.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-3-methods-common-to-all-objects\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5"},"Chapter 3. Methods Common to All Objects\uff08\u5bf9\u8c61\u7684\u901a\u7528\u65b9\u6cd5\uff09"),(0,n.kt)("h3",{id:"item-14-consider-implementing-comparable\u8003\u8651\u5b9e\u73b0-comparable-\u63a5\u53e3"},"Item 14: Consider implementing Comparable\uff08\u8003\u8651\u5b9e\u73b0 Comparable \u63a5\u53e3\uff09"),(0,n.kt)("p",null,"Unlike the other methods discussed in this chapter, the compareTo method is not declared in Object. Rather, it is the sole method in the Comparable interface. It is similar in character to Object\u2019s equals method, except that it permits order comparisons in addition to simple equality comparisons, and it is generic. By implementing Comparable, a class indicates that its instances have a natural ordering. Sorting an array of objects that implement Comparable is as simple as this:"),(0,n.kt)("p",null,"\u4e0e\u672c\u7ae0\u8ba8\u8bba\u7684\u5176\u4ed6\u65b9\u6cd5\u4e0d\u540c\uff0ccompareTo \u65b9\u6cd5\u4e0d\u662f\u5728 Object \u4e2d\u58f0\u660e\u7684\u3002\u76f8\u53cd\uff0c\u5b83\u662f Comparable \u63a5\u53e3\u4e2d\u7684\u552f\u4e00\u65b9\u6cd5\u3002\u5b83\u5728\u6027\u8d28\u4e0a\u7c7b\u4f3c\u4e8e Object \u7684 equals \u65b9\u6cd5\uff0c\u9664\u4e86\u7b80\u5355\u7684\u76f8\u7b49\u6bd4\u8f83\u4e4b\u5916\uff0c\u5b83\u8fd8\u5141\u8bb8\u987a\u5e8f\u6bd4\u8f83\uff0c\u800c\u4e14\u5b83\u662f\u901a\u7528\u7684\u3002\u4e00\u4e2a\u7c7b\u5b9e\u73b0 Comparable\uff0c\u8868\u660e\u5b9e\u4f8b\u5177\u6709\u81ea\u7136\u987a\u5e8f\u3002\u5bf9\u5b9e\u73b0 Comparable \u7684\u5bf9\u8c61\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u975e\u5e38\u7b80\u5355\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Arrays.sort(a);\n")),(0,n.kt)("p",null,"It is similarly easy to search, compute extreme values, and maintain automatically sorted collections of Comparable objects. For example, the following program, which relies on the fact that String implements Comparable, prints an alphabetized list of its command-line arguments with duplicates eliminated:"),(0,n.kt)("p",null,"\u7c7b\u4f3c\u5730\uff0c\u641c\u7d22\u3001\u8ba1\u7b97\u6781\u503c\u548c\u7ef4\u62a4 Comparable \u5bf9\u8c61\u7684\u81ea\u52a8\u6392\u5e8f\u96c6\u5408\u4e5f\u5f88\u5bb9\u6613\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u7a0b\u5e8f\u4f9d\u8d56\u4e8e String \u5b9e\u73b0 Comparable \u8fd9\u4e00\u4e8b\u5b9e\uff0c\u5c06\u547d\u4ee4\u884c\u53c2\u6570\u5217\u8868\u6309\u5b57\u6bcd\u987a\u5e8f\u6253\u5370\u51fa\u6765\uff0c\u5e76\u6d88\u9664\u91cd\u590d\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"public class WordList {\n    public static void main(String[] args) {\n        Set<String> s = new TreeSet<>();\n        Collections.addAll(s, args);\n        System.out.println(s);\n    }\n}\n")),(0,n.kt)("p",null,"By implementing Comparable, you allow your class to interoperate with all of the many generic algorithms and collection implementations that depend on this interface. You gain a tremendous amount of power for a small amount of effort. Virtually all of the value classes in the Java platform libraries, as well as all enum types (Item 34), implement Comparable. If you are writing a value class with an obvious natural ordering, such as alphabetical order, numerical order, or chronological order, you should implement the Comparable interface:"),(0,n.kt)("p",null,"\u901a\u8fc7\u8ba9\u7c7b\u5b9e\u73b0 Comparable\uff0c\u5c31\u53ef\u4e0e\u4f9d\u8d56\u4e8e\u6b64\u63a5\u53e3\u7684\u6240\u6709\u901a\u7528\u7b97\u6cd5\u548c\u96c6\u5408\u5b9e\u73b0\u8fdb\u884c\u4e92\u64cd\u4f5c\u3002\u4f60\u53ea\u9700\u4ed8\u51fa\u4e00\u70b9\u70b9\u52aa\u529b\u5c31\u80fd\u83b7\u5f97\u5f3a\u5927\u7684\u529f\u80fd\u3002\u5b9e\u9645\u4e0a\uff0cJava \u5e93\u4e2d\u7684\u6240\u6709\u503c\u7c7b\u4ee5\u53ca\u6240\u6709\u679a\u4e3e\u7c7b\u578b\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-6-Item-34-Use-enums-instead-of-int-constants"},"Item-34"),"\uff09\u90fd\u5b9e\u73b0\u4e86 Comparable\u3002\u5982\u679c\u7f16\u5199\u7684\u503c\u7c7b\u5177\u6709\u660e\u663e\u7684\u81ea\u7136\u987a\u5e8f\uff0c\u5982\u5b57\u6bcd\u987a\u5e8f\u3001\u6570\u5b57\u987a\u5e8f\u6216\u65f6\u95f4\u987a\u5e8f\uff0c\u5219\u5e94\u5b9e\u73b0 Comparable \u63a5\u53e3\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"public interface Comparable<T> {\n    int compareTo(T t);\n}\n")),(0,n.kt)("p",null,"The general contract of the compareTo method is similar to that of equals:"),(0,n.kt)("p",null,"compareTo \u65b9\u6cd5\u7684\u4e00\u822c\u7ea6\u5b9a\u7c7b\u4f3c\u4e8e equals \u65b9\u6cd5\uff1a"),(0,n.kt)("p",null,"Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. Throws ClassCastException if the specified object\u2019s type prevents it from being compared to this object."),(0,n.kt)("p",null,"\u5c06\u4e00\u4e2a\u5bf9\u8c61\u4e0e\u6307\u5b9a\u7684\u5bf9\u8c61\u8fdb\u884c\u987a\u5e8f\u6bd4\u8f83\u3002\u5f53\u8be5\u5bf9\u8c61\u5c0f\u4e8e\u3001\u7b49\u4e8e\u6216\u5927\u4e8e\u6307\u5b9a\u5bf9\u8c61\u65f6\uff0c\u5bf9\u5e94\u8fd4\u56de\u4e00\u4e2a\u8d1f\u6574\u6570\u3001\u96f6\u6216\u6b63\u6574\u6570\u3002\u5982\u679c\u6307\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u963b\u6b62\u5b83\u4e0e\u8be5\u5bf9\u8c61\u8fdb\u884c\u6bd4\u8f83\uff0c\u5219\u629b\u51fa ClassCastException\u3002"),(0,n.kt)("p",null,"In the following description, the notation sgn(expression) designates the mathematical signum function, which is defined to return -1, 0, or 1,according to whether the value of expression is negative, zero, or positive."),(0,n.kt)("p",null,"\u5728\u4e0b\u9762\u7684\u63cf\u8ff0\u4e2d\uff0c",(0,n.kt)("inlineCode",{parentName:"p"},"sgn(expression)")," \u8868\u793a\u6570\u5b66\u4e2d\u7684\u7b26\u53f7\u51fd\u6570\uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a\uff1a\u6839\u636e\u4f20\u5165\u8868\u8fbe\u5f0f\u7684\u503c\u662f\u8d1f\u6570\u3001\u96f6\u6216\u6b63\u6570\uff0c\u5bf9\u5e94\u8fd4\u56de -1\u30010 \u6216 1\u3002"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The implementor must ensure that sgn(x.compareTo(y)) == -sgn(y.compareTo(x)) for all x and y. (This implies that x.compareTo(y) must throw an exception if and only if y.compareTo(x) throws an exception.)")),(0,n.kt)("p",null,"\u5b9e\u73b0\u8005\u5fc5\u987b\u786e\u4fdd\u6240\u6709 x \u548c y \u6ee1\u8db3 ",(0,n.kt)("inlineCode",{parentName:"p"},"sgn(x.compareTo(y)) == -sgn(y.compareTo(x))"),"\uff08\u8fd9\u610f\u5473\u7740 ",(0,n.kt)("inlineCode",{parentName:"p"},"x.compareTo(y)")," \u5f53\u4e14\u4ec5\u5f53 ",(0,n.kt)("inlineCode",{parentName:"p"},"y.compareTo(x)")," \u629b\u51fa\u5f02\u5e38\u65f6\u624d\u629b\u51fa\u5f02\u5e38\uff09\u3002"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The implementor must also ensure that the relation is transitive: (x.compareTo(y) > 0 && y.compareTo(z) > 0) implies x.compareTo(z) > 0.")),(0,n.kt)("p",null,"\u5b9e\u73b0\u8005\u8fd8\u5fc5\u987b\u786e\u4fdd\u5173\u7cfb\u662f\u53ef\u4f20\u9012\u7684\uff1a",(0,n.kt)("inlineCode",{parentName:"p"},"(x.compareTo(y) > 0 && y.compareTo(z) > 0)")," \u610f\u5473\u7740 ",(0,n.kt)("inlineCode",{parentName:"p"},"x.compareTo(z) > 0"),"\u3002"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Finally, the implementor must ensure that x.compareTo(y) == 0 implies that sgn(x.compareTo(z)) == sgn(y.compareTo(z)),for all z.")),(0,n.kt)("p",null,"\u6700\u540e\uff0c\u5b9e\u73b0\u8005\u5fc5\u987b\u786e\u4fdd ",(0,n.kt)("inlineCode",{parentName:"p"},"x.compareTo(y) == 0")," \u65f6\uff0c\u6240\u6709\u7684 z \u6ee1\u8db3 ",(0,n.kt)("inlineCode",{parentName:"p"},"sgn(x.compareTo(z)) == sgn(y.compareTo(z))"),"\u3002"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"It is strongly recommended, but not required, that (x.compareTo(y)== 0) == (x.equals(y)). Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact. The recommended language is \u201cNote: This class has a natural ordering that is inconsistent with equals.\u201d")),(0,n.kt)("p",null,"\u5f3a\u70c8\u5efa\u8bae ",(0,n.kt)("inlineCode",{parentName:"p"},"(x.compareTo(y)== 0) == (x.equals(y))")," \u6210\u7acb\uff0c\u4f46\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4efb\u4f55\u5b9e\u73b0 Comparable \u63a5\u53e3\u5e76\u8fdd\u53cd\u6b64\u6761\u4ef6\u7684\u7c7b\u90fd\u5e94\u8be5\u6e05\u695a\u5730\u6ce8\u660e\u8fd9\u4e00\u4e8b\u5b9e\u3002\u63a8\u8350\u4f7f\u7528\u7684\u8868\u8ff0\u662f\u300c\u6ce8\u610f\uff1a\u8be5\u7c7b\u7684\u81ea\u7136\u987a\u5e8f\u4e0e equals \u4e0d\u4e00\u81f4\u3002\u300d"),(0,n.kt)("p",null,"Don\u2019t be put off by the mathematical nature of this contract. Like the equals contract (Item 10), this contract isn\u2019t as complicated as it looks. Unlike the equals method, which imposes a global equivalence relation on all objects,compareTo doesn\u2019t have to work across objects of different types: when confronted with objects of different types, compareTo is permitted to throw ClassCastException. Usually, that is exactly what it does. The contract does permit intertype comparisons, which are typically defined in an interface implemented by the objects being compared."),(0,n.kt)("p",null,"\u4e0d\u8981\u88ab\u8fd9\u4e9b\u7ea6\u5b9a\u7684\u6570\u5b66\u6027\u8d28\u6240\u5f71\u54cd\u3002\u5c31\u50cf equals \u7ea6\u5b9a\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-10-Obey-the-general-contract-when-overriding-equals"},"Item-10"),"\uff09\u4e00\u6837\uff0c\u8fd9\u4e2a\u7ea6\u5b9a\u5e76\u4e0d\u50cf\u770b\u8d77\u6765\u90a3\u4e48\u590d\u6742\u3002\u4e0e equals \u65b9\u6cd5\u4e0d\u540c\uff0cequals \u65b9\u6cd5\u5bf9\u6240\u6709\u5bf9\u8c61\u90fd\u65bd\u52a0\u4e86\u5168\u5c40\u7b49\u4ef7\u5173\u7cfb\uff0ccompareTo \u4e0d\u9700\u8981\u8de8\u8d8a\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u5de5\u4f5c\uff1a\u5f53\u9047\u5230\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u65f6\uff0ccompareTo \u5141\u8bb8\u629b\u51fa ClassCastException\u3002\u901a\u5e38\uff0c\u5b83\u5c31\u662f\u8fd9\u4e48\u505a\u7684\u3002\u8be5\u7ea6\u5b9a\u786e\u5b9e\u5141\u8bb8\u7c7b\u578b\u95f4\u6bd4\u8f83\uff0c\u8fd9\u79cd\u6bd4\u8f83\u901a\u5e38\u5728\u88ab\u6bd4\u8f83\u5bf9\u8c61\u5b9e\u73b0\u7684\u63a5\u53e3\u4e2d\u5b9a\u4e49\u3002"),(0,n.kt)("p",null,"Just as a class that violates the hashCode contract can break other classes that depend on hashing, a class that violates the compareTo contract can break other classes that depend on comparison. Classes that depend on comparison include the sorted collections TreeSet and TreeMap and the utility classes Collections and Arrays, which contain searching and sorting algorithms."),(0,n.kt)("p",null,"\u5c31\u50cf\u8fdd\u53cd hashCode \u7ea6\u5b9a\u7684\u7c7b\u53ef\u4ee5\u7834\u574f\u4f9d\u8d56 hash \u7684\u5176\u4ed6\u7c7b\u4e00\u6837\uff0c\u8fdd\u53cd compareTo \u7ea6\u5b9a\u7684\u7c7b\u4e5f\u53ef\u4ee5\u7834\u574f\u4f9d\u8d56 Comparable \u7684\u5176\u4ed6\u7c7b\u3002\u4f9d\u8d56 Comparable \u7684\u7c7b\u5305\u62ec\u6392\u5e8f\u96c6\u5408 TreeSet \u548c TreeMap\uff0c\u4ee5\u53ca\u5b9e\u7528\u5de5\u5177\u7c7b Collections \u548c Arrays\uff0c\u5b83\u4eec\u90fd\u5305\u542b\u641c\u7d22\u548c\u6392\u5e8f\u7b97\u6cd5\u3002"),(0,n.kt)("p",null,"Let\u2019s go over the provisions of the compareTo contract. The first provision says that if you reverse the direction of a comparison between two object references, the expected thing happens: if the first object is less than the second,then the second must be greater than the first; if the first object is equal to the second, then the second must be equal to the first; and if the first object is greater than the second, then the second must be less than the first. The second provision says that if one object is greater than a second and the second is greater than a third, then the first must be greater than the third. The final provision says that all objects that compare as equal must yield the same results when compared to any other object."),(0,n.kt)("p",null,"\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b compareTo \u7ea6\u5b9a\u7684\u7ec6\u8282\u3002\u7b2c\u4e00\u4e2a\u89c4\u5b9a\u6307\u51fa\uff0c\u5982\u679c\u4f60\u98a0\u5012\u4e24\u4e2a\u5bf9\u8c61\u5f15\u7528\u4e4b\u95f4\u7684\u6bd4\u8f83\u7684\u65b9\u5411\uff0c\u5c31\u5e94\u5f53\u53d1\u751f\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u5982\u679c\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\u5fc5\u987b\u5927\u4e8e\u7b2c\u4e00\u4e2a\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\u4e00\u5b9a\u7b49\u4e8e\u7b2c\u4e00\u4e2a\u5bf9\u8c61\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u5927\u4e8e\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\u4e00\u5b9a\u5c0f\u4e8e\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u3002\u7b2c\u4e8c\u4e2a\u89c4\u5b9a\u6307\u51fa\uff0c\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u5927\u4e8e\u7b2c\u4e8c\u4e2a\uff0c\u7b2c\u4e8c\u4e2a\u5927\u4e8e\u7b2c\u4e09\u4e2a\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u4e00\u5b9a\u5927\u4e8e\u7b2c\u4e09\u4e2a\u5bf9\u8c61\u3002\u6700\u540e\u4e00\u4e2a\u89c4\u5b9a\u6307\u51fa\uff0c\u6240\u6709 compareTo \u7ed3\u679c\u4e3a\u76f8\u7b49\u7684\u5bf9\u8c61\u5206\u522b\u4e0e\u4efb\u4f55\u5176\u4ed6\u5bf9\u8c61\u76f8\u6bd4\uff0c\u5fc5\u987b\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u3002"),(0,n.kt)("p",null,"One consequence of these three provisions is that the equality test imposed by a compareTo method must obey the same restrictions imposed by the equals con-tract: reflexivity, symmetry, and transitivity. Therefore, the same caveat applies: there is no way to extend an instantiable class with a new value component while preserving the compareTo contract, unless you are willing to forgo the benefits of object-oriented abstraction (Item 10). The same workaround applies, too. If you want to add a value component to a class that implements Comparable, don\u2019t extend it; write an unrelated class containing an instance of the first class. Then provide a \u201cview\u201d method that returns the contained instance. This frees you to implement whatever compareTo method you like on the containing class, while allowing its client to view an instance of the containing class as an instance of the contained class when needed."),(0,n.kt)("p",null,"\u8fd9\u4e09\u79cd\u89c4\u5b9a\u7684\u4e00\u4e2a\u7ed3\u679c\u662f\uff0c\u7531 compareTo \u65b9\u6cd5\u8fdb\u884c\u7684\u76f8\u7b49\u6027\u68c0\u9a8c\u5fc5\u987b\u9075\u5b88\u7531 equals \u7ea6\u5b9a\u8fdb\u884c\u7684\u76f8\u540c\u7684\u9650\u5236\uff1a\u53cd\u8eab\u6027\u3001\u5bf9\u79f0\u6027\u548c\u4f20\u9012\u6027\u3002\u56e0\u6b64\uff0c\u540c\u6837\u7684\u8b66\u544a\u4e5f\u9002\u7528\u4e8e\u6b64\uff1a\u9664\u975e\u4f60\u613f\u610f\u653e\u5f03\u9762\u5411\u5bf9\u8c61\u7684\u62bd\u8c61\u4f18\u70b9\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-10-Obey-the-general-contract-when-overriding-equals"},"Item-10"),"\uff09\uff0c\u5426\u5219\u65e0\u6cd5\u5728\u4fdd\u7559 compareTo \u7ea6\u5b9a\u7684\u540c\u65f6\u4f7f\u7528\u65b0\u503c\u7ec4\u4ef6\u6269\u5c55\u53ef\u5b9e\u4f8b\u5316\u7c7b\u3002\u540c\u6837\u7684\u89e3\u51b3\u65b9\u6848\u4e5f\u9002\u7528\u3002\u5982\u679c\u8981\u5411\u5b9e\u73b0 Comparable \u7684\u7c7b\u4e2d\u6dfb\u52a0\u503c\u7ec4\u4ef6\uff0c\u4e0d\u8981\u7ee7\u627f\u5b83\uff1b\u7f16\u5199\u4e00\u4e2a\u4e0d\u76f8\u5173\u7684\u7c7b\uff0c\u5176\u4e2d\u5305\u542b\u7b2c\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002\u7136\u540e\u63d0\u4f9b\u8fd4\u56de\u6240\u5305\u542b\u5b9e\u4f8b\u7684\u300c\u89c6\u56fe\u300d\u65b9\u6cd5\u3002\u8fd9\u4f7f\u4f60\u53ef\u4ee5\u81ea\u7531\u5730\u5728\u5305\u542b\u7c7b\u4e0a\u5b9e\u73b0\u4f60\u559c\u6b22\u7684\u4efb\u4f55 compareTo \u65b9\u6cd5\uff0c\u540c\u65f6\u5141\u8bb8\u5b83\u7684\u5ba2\u6237\u7aef\u5728\u9700\u8981\u65f6\u5c06\u5305\u542b\u7c7b\u7684\u5b9e\u4f8b\u89c6\u4e3a\u5305\u542b\u7c7b\u7684\u5b9e\u4f8b\u3002"),(0,n.kt)("p",null,"The final paragraph of the compareTo contract, which is a strong suggestion rather than a true requirement, simply states that the equality test imposed by the compareTo method should generally return the same results as the equals method. If this provision is obeyed, the ordering imposed by the compareTo method is said to be consistent with equals. If it\u2019s violated, the ordering is said to be inconsistent with equals. A class whose compareTo method imposes an order that is inconsistent with equals will still work, but sorted collections containing elements of the class may not obey the general contract of the appropriate collection interfaces (Collection, Set, or Map). This is because the general contracts for these interfaces are defined in terms of the equals method, but sorted collections use the equality test imposed by compareTo in place of equals. It is not a catastrophe if this happens, but it\u2019s something to be aware of."),(0,n.kt)("p",null,"compareTo \u7ea6\u5b9a\u7684\u6700\u540e\u4e00\u6bb5\u662f\u4e00\u4e2a\u5f3a\u70c8\u7684\u5efa\u8bae\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u8981\u6c42\uff0c\u5b83\u53ea\u662f\u7b80\u5355\u5730\u8bf4\u660e\u4e86 compareTo \u65b9\u6cd5\u6240\u65bd\u52a0\u7684\u540c\u7b49\u6027\u68c0\u9a8c\u901a\u5e38\u5e94\u8be5\u4e0e equals \u65b9\u6cd5\u8fd4\u56de\u76f8\u540c\u7684\u7ed3\u679c\u3002\u5982\u679c\u9075\u5b88\u4e86\u8fd9\u4e00\u89c4\u5b9a\uff0c\u5219 compareTo \u65b9\u6cd5\u6240\u65bd\u52a0\u7684\u6392\u5e8f\u4e0e equals \u65b9\u6cd5\u4e00\u81f4\u3002\u5982\u679c\u8fdd\u53cd\u8fd9\u6761\u5efa\u8bae\uff0c\u90a3\u4e48\u5b83\u7684\u987a\u5e8f\u5c31\u4e0e equals \u4e0d\u4e00\u81f4\u3002\u5982\u679c\u4e00\u4e2a\u7c7b\u7684 compareTo \u65b9\u6cd5\u5f3a\u52a0\u4e86\u4e00\u4e2a\u4e0e equals \u4e0d\u4e00\u81f4\u7684\u987a\u5e8f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7c7b\u4ecd\u7136\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u662f\u5305\u542b\u8be5\u7c7b\u5143\u7d20\u7684\u6709\u5e8f\u96c6\u5408\u53ef\u80fd\u65e0\u6cd5\u9075\u5b88\u96c6\u5408\u63a5\u53e3\uff08Collection\u3001Set \u6216 Map\uff09\u7684\u4e00\u822c\u7ea6\u5b9a\u3002\u8fd9\u662f\u56e0\u4e3a\u8fd9\u4e9b\u63a5\u53e3\u7684\u4e00\u822c\u7ea6\u5b9a\u662f\u6839\u636e equals \u65b9\u6cd5\u5b9a\u4e49\u7684\uff0c\u4f46\u662f\u6709\u5e8f\u96c6\u5408\u4f7f\u7528 compareTo \u4ee3\u66ff\u4e86 equals \u5b9e\u65bd\u540c\u7b49\u6027\u68c0\u9a8c\u3002\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u4e0d\u662f\u4e00\u573a\u707e\u96be\uff0c\u4f46\u8fd9\u662f\u9700\u8981\u6ce8\u610f\u7684\u3002"),(0,n.kt)("p",null,'For example, consider the BigDecimal class, whose compareTo method is inconsistent with equals. If you create an empty HashSet instance and then add new BigDecimal("1.0") and new BigDecimal("1.00"),the set will contain two elements because the two BigDecimal instances added to the set are unequal when compared using the equals method. If,however, you perform the same procedure using a TreeSet instead of a HashSet, the set will contain only one element because the two BigDecimal instances are equal when compared using the compareTo method. (See the BigDecimal documentation for details.)'),(0,n.kt)("p",null,"\u4f8b\u5982\uff0c\u8003\u8651 BigDecimal \u7c7b\uff0c\u5b83\u7684 compareTo \u65b9\u6cd5\u4e0e equals \u4e0d\u4e00\u81f4\u3002\u5982\u679c\u4f60\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 HashSet \u5b9e\u4f8b\uff0c\u7136\u540e\u6dfb\u52a0 ",(0,n.kt)("inlineCode",{parentName:"p"},'new BigDecimal("1.0")')," \u548c ",(0,n.kt)("inlineCode",{parentName:"p"},'new BigDecimal("1.00")'),"\uff0c\u90a3\u4e48\u8be5 HashSet \u5c06\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff0c\u56e0\u4e3a\u6dfb\u52a0\u5230\u8be5\u96c6\u5408\u7684\u4e24\u4e2a BigDecimal \u5b9e\u4f8b\u5728\u4f7f\u7528 equals \u65b9\u6cd5\u8fdb\u884c\u6bd4\u8f83\u65f6\u7ed3\u679c\u662f\u4e0d\u76f8\u7b49\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u4f7f\u7528 TreeSet \u800c\u4e0d\u662f HashSet \u6267\u884c\u76f8\u540c\u7684\u8fc7\u7a0b\uff0c\u90a3\u4e48\u8be5\u96c6\u5408\u5c06\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u4e3a\u4f7f\u7528 compareTo \u65b9\u6cd5\u6bd4\u8f83\u4e24\u4e2a BigDecimal \u5b9e\u4f8b\u65f6\u7ed3\u679c\u662f\u76f8\u7b49\u7684\u3002\uff08\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 BigDecimal \u6587\u6863\u3002\uff09"),(0,n.kt)("p",null,"Writing a compareTo method is similar to writing an equals method, but there are a few key differences. Because the Comparable interface is parameterized, the compareTo method is statically typed, so you don\u2019t need to type check or cast its argument. If the argument is of the wrong type, the invocation won\u2019t even compile. If the argument is null, the invocation should throw a NullPointerException, and it will, as soon as the method attempts to access its members."),(0,n.kt)("p",null,"\u7f16\u5199 compareTo \u65b9\u6cd5\u7c7b\u4f3c\u4e8e\u7f16\u5199 equals \u65b9\u6cd5\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u5173\u952e\u7684\u533a\u522b\u3002\u56e0\u4e3a Comparable \u63a5\u53e3\u662f\u53c2\u6570\u5316\u7684\uff0ccompareTo \u65b9\u6cd5\u662f\u9759\u6001\u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u6216\u5f3a\u5236\u8f6c\u6362\u5b83\u7684\u53c2\u6570\u3002\u5982\u679c\u53c2\u6570\u7c7b\u578b\u9519\u8bef\uff0c\u5219\u8be5\u8c03\u7528\u5c06\u4e0d\u80fd\u7f16\u8bd1\u3002\u5982\u679c\u53c2\u6570\u4e3a null\uff0c\u5219\u8c03\u7528\u5e94\u8be5\u629b\u51fa NullPointerException\uff0c\u5e76\u4e14\u5728\u65b9\u6cd5\u5c1d\u8bd5\u8bbf\u95ee\u5176\u6210\u5458\u65f6\u629b\u51fa\u8be5\u5f02\u5e38\u3002"),(0,n.kt)("p",null,"In a compareTo method, fields are compared for order rather than equality.To compare object reference fields, invoke the compareTo method recursively. If a field does not implement Comparable or you need a nonstandard ordering, use a Comparator instead. You can write your own comparator or use an existing one, as in this compareTo method for CaseInsensitiveString in Item 10:"),(0,n.kt)("p",null,"\u5728 compareTo \u65b9\u6cd5\u4e2d\uff0c\u5b57\u6bb5\u662f\u6309\u987a\u5e8f\u800c\u4e0d\u662f\u6309\u540c\u7b49\u6027\u6765\u6bd4\u8f83\u7684\u3002\u8981\u6bd4\u8f83\u5bf9\u8c61\u5f15\u7528\u5b57\u6bb5\uff0c\u8981\u9012\u5f52\u8c03\u7528 compareTo \u65b9\u6cd5\u3002\u5982\u679c\u4e00\u4e2a\u5b57\u6bb5\u6ca1\u6709\u5b9e\u73b0 Comparable\uff0c\u6216\u8005\u9700\u8981\u4e00\u4e2a\u975e\u6807\u51c6\u7684\u6392\u5e8f\uff0c\u90a3\u4e48\u5e94\u4f7f\u7528 Comparator\u3002\u53ef\u4ee5\u7f16\u5199\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u5668\uff0c\u6216\u4f7f\u7528\u73b0\u6709\u7684\u6bd4\u8f83\u5668\uff0c\u5982 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-10-Obey-the-general-contract-when-overriding-equals"},"Item-10")," \u4e2d CaseInsensitiveString \u7684 compareTo \u65b9\u6cd5\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Single-field Comparable with object reference field\npublic final class CaseInsensitiveString implements Comparable<CaseInsensitiveString> {\n    public int compareTo(CaseInsensitiveString cis) {\n        return String.CASE_INSENSITIVE_ORDER.compare(s, cis.s);\n    } ... // Remainder omitted\n}\n")),(0,n.kt)("p",null,"Note that CaseInsensitiveString implements ",(0,n.kt)("inlineCode",{parentName:"p"},"Comparable<CaseInsensitiveString>"),". This means that a CaseInsensitiveString reference can be compared only to another CaseInsensitiveString reference. This is the normal pattern to follow when declaring a class to implement Comparable."),(0,n.kt)("p",null,"\u6ce8\u610f CaseInsensitiveString \u5b9e\u73b0\u4e86 ",(0,n.kt)("inlineCode",{parentName:"p"},"Comparable<CaseInsensitiveString>"),"\u3002\u8fd9\u610f\u5473\u7740 CaseInsensitiveString \u5f15\u7528\u53ea\u80fd\u4e0e\u53e6\u4e00\u4e2a CaseInsensitiveString \u5f15\u7528\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u662f\u5728\u58f0\u660e\u5b9e\u73b0 Comparable \u7684\u7c7b\u65f6\u8981\u9075\u5faa\u7684\u5e38\u89c4\u6a21\u5f0f\u3002"),(0,n.kt)("p",null,"Prior editions of this book recommended that compareTo methods compare integral primitive fields using the relational operators < and >, and floating point primitive fields using the static methods Double.compare and Float.compare. In Java 7, static compare methods were added to all of Java\u2019s boxed primitive classes. ",(0,n.kt)("strong",{parentName:"p"},"Use of the relational operators < and > in compareTo methods is verbose and error-prone and no longer recommended.")),(0,n.kt)("p",null,"\u672c\u4e66\u7684\u65e7\u7248\u672c\u5efa\u8bae compareTo \u65b9\u6cd5\u4f7f\u7528\u5173\u7cfb\u8fd0\u7b97\u7b26 < \u548c > \u6765\u6bd4\u8f83\u6574\u6570\u57fa\u672c\u7c7b\u578b\u5b57\u6bb5\uff0c\u4f7f\u7528\u9759\u6001\u65b9\u6cd5 ",(0,n.kt)("inlineCode",{parentName:"p"},"Double.compare")," \u548c ",(0,n.kt)("inlineCode",{parentName:"p"},"Float.compare")," \u6765\u6bd4\u8f83\u6d6e\u70b9\u57fa\u672c\u7c7b\u578b\u5b57\u6bb5\u3002\u5728 Java 7 \u4e2d\uff0c\u9759\u6001\u6bd4\u8f83\u65b9\u6cd5\u88ab\u6dfb\u52a0\u5230\u6240\u6709 Java \u7684\u5305\u88c5\u7c7b\u4e2d\u3002",(0,n.kt)("strong",{parentName:"p"},"\u5728 compareTo \u65b9\u6cd5\u4e2d\u4f7f\u7528\u5173\u7cfb\u8fd0\u7b97\u7b26 < \u548c > \u5197\u957f\u4e14\u5bb9\u6613\u51fa\u9519\uff0c\u56e0\u6b64\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\u3002")),(0,n.kt)("p",null,"If a class has multiple significant fields, the order in which you compare them is critical. Start with the most significant field and work your way down. If a comparison results in anything other than zero (which represents equality),you\u2019re done; just return the result. If the most significant field is equal, compare the next-most-significant field, and so on, until you find an unequal field or compare the least significant field. Here is a compareTo method for the PhoneNumber class in Item 11 demonstrating this technique:"),(0,n.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u7c7b\u6709\u591a\u4e2a\u91cd\u8981\u5b57\u6bb5\uff0c\u90a3\u4e48\u6bd4\u8f83\u5b83\u4eec\u7684\u987a\u5e8f\u975e\u5e38\u5173\u952e\u3002\u4ece\u6700\u91cd\u8981\u7684\u5b57\u6bb5\u5f00\u59cb\uff0c\u4e00\u6b65\u6b65\u5f80\u4e0b\u3002\u5982\u679c\u6bd4\u8f83\u7684\u7ed3\u679c\u4e0d\u662f 0\uff08\u7528 0 \u8868\u793a\u76f8\u7b49\uff09\uff0c\u90a3\u4e48\u5c31\u5b8c\u6210\u4e86\uff1b\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\u3002\u5982\u679c\u6700\u91cd\u8981\u7684\u5b57\u6bb5\u662f\u76f8\u7b49\u7684\uff0c\u5c31\u6bd4\u8f83\u4e0b\u4e00\u4e2a\u6700\u91cd\u8981\u7684\u5b57\u6bb5\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u4e0d\u76f8\u7b49\u7684\u5b57\u6bb5\u6216\u6bd4\u8f83\u5230\u6700\u4e0d\u91cd\u8981\u7684\u5b57\u6bb5\u4e3a\u6b62\u3002\u4e0b\u9762\u662f ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals"},"Item-11")," \u4e2d PhoneNumber \u7c7b\u7684 compareTo \u65b9\u6cd5\uff0c\u6f14\u793a\u4e86\u8fd9\u79cd\u6280\u672f\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Multiple-field Comparable with primitive fields\npublic int compareTo(PhoneNumber pn) {\n    int result = Short.compare(areaCode, pn.areaCode);\n    if (result == 0) {\n        result = Short.compare(prefix, pn.prefix);\n        if (result == 0)\n            result = Short.compare(lineNum, pn.lineNum);\n    }\n    return result;\n}\n")),(0,n.kt)("p",null,"In Java 8, the Comparator interface was outfitted with a set of comparator construction methods, which enable fluent construction of comparators. These comparators can then be used to implement a compareTo method, as required by the Comparable interface. Many programmers prefer the conciseness of this approach, though it does come at a modest performance cost: sorting arrays of PhoneNumber instances is about 10% slower on my machine. When using this approach, consider using Java\u2019s static import facility so you can refer to static comparator construction methods by their simple names for clarity and brevity. Here\u2019s how the compareTo method for PhoneNumber looks using this approach:"),(0,n.kt)("p",null,"\u5728 Java 8 \u4e2d\uff0cComparator \u63a5\u53e3\u914d\u5907\u4e86\u4e00\u7ec4\u6bd4\u8f83\u5668\u6784\u9020\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6d41\u7545\u5730\u6784\u9020\u6bd4\u8f83\u5668\u3002\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6bd4\u8f83\u5668\u6765\u5b9e\u73b0 Comparator \u63a5\u53e3\u6240\u8981\u6c42\u7684 compareTo \u65b9\u6cd5\u3002\u8bb8\u591a\u7a0b\u5e8f\u5458\u66f4\u559c\u6b22\u8fd9\u79cd\u65b9\u6cd5\u7684\u7b80\u660e\uff0c\u5c3d\u7ba1\u5b83\u5b58\u5728\u4e00\u4e9b\u6027\u80fd\u6210\u672c\uff1a\u5728\u6211\u7684\u673a\u5668\u4e0a\uff0cPhoneNumber \u5b9e\u4f8b\u7684\u6570\u7ec4\u6392\u5e8f\u8981\u6162 10% \u5de6\u53f3\u3002\u5728\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u65f6\uff0c\u8bf7\u8003\u8651\u4f7f\u7528 Java \u7684\u9759\u6001\u5bfc\u5165\u529f\u80fd\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u9759\u6001\u6bd4\u8f83\u5668\u6784\u9020\u65b9\u6cd5\u7684\u7b80\u5355\u540d\u79f0\u6765\u5f15\u7528\u5b83\u4eec\uff0c\u4ee5\u83b7\u5f97\u6e05\u6670\u548c\u7b80\u6d01\u3002\u4e0b\u9762\u662f PhoneNumber \u7c7b\u7684 compareTo \u65b9\u6cd5\u6539\u8fdb\u540e\u7684\u6837\u5b50\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Comparable with comparator construction methods\nprivate static final Comparator<PhoneNumber> COMPARATOR = comparingInt((PhoneNumber pn) -> pn.areaCode)\n    .thenComparingInt(pn -> pn.prefix)\n    .thenComparingInt(pn -> pn.lineNum);\n\npublic int compareTo(PhoneNumber pn) {\n    return COMPARATOR.compare(this, pn);\n}\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8 1\uff1a\u793a\u4f8b\u4ee3\u7801\u9ed8\u8ba4\u4f7f\u7528\u4e86\u9759\u6001\u5bfc\u5165\uff1a",(0,n.kt)("inlineCode",{parentName:"strong"},"import static java.util.Comparator.comparingInt;"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8 2\uff1acomparingInt \u53ca thenComparingInt \u7684\u6587\u6863\u63cf\u8ff0")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor)\n\nAccepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.\nThe returned comparator is serializable if the specified function is also serializable.\n\n\u63a5\u53d7\u4ece\u7c7b\u578b T \u4e2d\u63d0\u53d6 int \u6392\u5e8f key \u7684\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e0e\u8be5\u6392\u5e8f key \u8fdb\u884c\u6bd4\u8f83\u7684 Comparator<T>\u3002\n\u5982\u679c\u6307\u5b9a\u7684\u51fd\u6570\u662f\u53ef\u5e8f\u5217\u5316\u7684\uff0c\u5219\u8fd4\u56de\u7684\u6bd4\u8f83\u5668\u4e5f\u662f\u53ef\u5e8f\u5217\u5316\u7684\u3002\n\nType Parameters:\n    T - the type of element to be compared\nParameters:\n    keyExtractor - the function used to extract the integer sort key\nReturns:\n    a comparator that compares by an extracted key\nThrows:\n    NullPointerException - if the argument is null\nSince:\n    1.8\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor)\n\nReturns a lexicographic-order comparator with a function that extracts a int sort key.\nImplementation Requirements:\nThis default implementation behaves as if thenComparing(comparingInt(keyExtractor)).\n\n\u8fd4\u56de\u5177\u6709\u63d0\u53d6 int \u6392\u5e8f key \u7684\u51fd\u6570\u7684\u5b57\u5178\u987a\u5e8f\u6bd4\u8f83\u5668\u3002\n\u5b9e\u73b0\u8981\u6c42\uff1a\n\u6b64\u9ed8\u8ba4\u5b9e\u73b0\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e thenComparing(comparingInt(keyExtractor))\u3002\n\nParameters:\n    keyExtractor - the function used to extract the integer sort key\nReturns:\n    a lexicographic-order comparator composed of this and then the int sort key\nThrows:\n    NullPointerException - if the argument is null.\nSince:\n    1.8\n")),(0,n.kt)("p",null,"This implementation builds a comparator at class initialization time, using two comparator construction methods. The first is comparingInt. It is a static method that takes a key extractor function that maps an object reference to a key of type int and returns a comparator that orders instances according to that key.In the previous example, comparingInt takes a lambda () that extracts the area code from a PhoneNumber and returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Comparator<PhoneNumber>")," that orders phone numbers according to their area codes. Note that the lambda explicitly specifies the type of its input parameter (PhoneNumber pn). It turns out that in this situation, Java\u2019s type inference isn\u2019t powerful enough to figure the type out for itself, so we\u2019re forced to help it in order to make the program compile."),(0,n.kt)("p",null,"\u8fd9\u4e2a\u5b9e\u73b0\u5728\u7c7b\u521d\u59cb\u5316\u65f6\u4f7f\u7528\u4e24\u4e2a\u6bd4\u8f83\u5668\u6784\u9020\u65b9\u6cd5\u6784\u5efa\u4e00\u4e2a\u6bd4\u8f83\u5668\u3002\u7b2c\u4e00\u4e2a\u662f comparingInt\u3002\u5b83\u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u63a5\u53d7\u4e00\u4e2a key \u63d0\u53d6\u5668\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u5bf9\u8c61\u5f15\u7528\u6620\u5c04\u5230 int \u7c7b\u578b\u7684 key \uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6bd4\u8f83\u5668\uff0c\u6bd4\u8f83\u5668\u6839\u636e\u8be5 key \u5bf9\u5b9e\u4f8b\u8fdb\u884c\u6392\u5e8f\u3002\u5728\u4e0a\u8ff0\u7684\u793a\u4f8b\u4e2d\uff0ccomparingInt \u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u4ece PhoneNumber \u4e2d\u63d0\u53d6 areaCode\uff0c\u5e76\u8fd4\u56de ",(0,n.kt)("inlineCode",{parentName:"p"},"Comparator<PhoneNumber>"),"\uff0c\u6309\u533a\u53f7\u6765\u6392\u5e8f\u7535\u8bdd\u53f7\u7801\u3002\u6ce8\u610f\uff0clambda \u8868\u8fbe\u5f0f\u663e\u5f0f\u5730\u6307\u5b9a\u5176\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\u4e3a PhoneNumber\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cJava \u7684\u7c7b\u578b\u63a8\u65ad\u5e76\u6ca1\u6709\u5f3a\u5927\u5230\u8db3\u4ee5\u81ea\u5df1\u5224\u65ad\u7c7b\u578b\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u5f97\u4e0d\u5e2e\u52a9\u5b83\u6765\u7f16\u8bd1\u7a0b\u5e8f\u3002"),(0,n.kt)("p",null,"If two phone numbers have the same area code, we need to further refine the comparison, and that\u2019s exactly what the second comparator construction method,thenComparingInt, does. It is an instance method on Comparator that takes an int key extractor function, and returns a comparator that first applies the original comparator and then uses the extracted key to break ties. You can stack up as many calls to thenComparingInt as you like, resulting in a lexicographic ordering. In the example above, we stack up two calls to thenComparingInt, resulting in an ordering whose secondary key is the prefix and whose tertiary key is the line number. Note that we did not have to specify the parameter type of the key extractor function passed to either of the calls to thenComparingInt: Java\u2019s type inference was smart enough to figure this one out for itself."),(0,n.kt)("p",null,"\u5982\u679c\u4e24\u4e2a\u7535\u8bdd\u53f7\u7801\u6709\u76f8\u540c\u7684\u533a\u53f7\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u4e00\u6b65\u6539\u8fdb\u6bd4\u8f83\uff0c\u8fd9\u6b63\u662f\u7b2c\u4e8c\u4e2a comparator \u6784\u9020\u65b9\u6cd5 thenComparingInt \u6240\u505a\u7684\u3002\u5b83\u662f Comparator \u4e0a\u7684\u4e00\u4e2a\u5b9e\u4f8b\u65b9\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a int \u7c7b\u578b\u7684 key \u63d0\u53d6\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6bd4\u8f83\u5668\uff0c\u8be5\u6bd4\u8f83\u5668\u9996\u5148\u5e94\u7528\u539f\u59cb\u6bd4\u8f83\u5668\uff0c\u7136\u540e\u4f7f\u7528\u63d0\u53d6\u7684 key \u6765\u65ad\u5f00\u8fde\u63a5\u3002\u4f60\u53ef\u4ee5\u4efb\u610f\u5806\u53e0\u5bf9 thenComparingInt \u7684\u8c03\u7528\uff0c\u4ece\u800c\u5f62\u6210\u5b57\u5178\u987a\u5e8f\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u4e24\u4e2a\u5bf9 thenComparingInt \u7684\u8c03\u7528\u53e0\u52a0\u8d77\u6765\uff0c\u5f97\u5230\u4e00\u4e2a\u6392\u5e8f\uff0c\u5b83\u7684\u7b2c\u4e8c\u4e2a key \u662f prefix\uff0c\u800c\u7b2c\u4e09\u4e2a key \u662f lineNum\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u5fc5\u6307\u5b9a\u4f20\u9012\u7ed9\u4e24\u4e2a\u8c03\u7528 thenComparingInt \u7684 key \u63d0\u53d6\u5668\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\uff1aJava \u7684\u7c7b\u578b\u63a8\u65ad\u8db3\u591f\u667a\u80fd\uff0c\u53ef\u4ee5\u81ea\u884c\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002"),(0,n.kt)("p",null,"The Comparator class has a full complement of construction methods.There are analogues to comparingInt and thenComparingInt for the primitive types long and double. The int versions can also be used for narrower integral types, such as short, as in our PhoneNumber example. The double versions can also be used for float. This provides coverage of all of Java\u2019s numerical primitive types."),(0,n.kt)("p",null,"Comparator \u7c7b\u5177\u6709\u5b8c\u6574\u7684\u6784\u9020\u65b9\u6cd5\u3002\u5bf9\u4e8e long \u548c double \u7684\u57fa\u672c\u7c7b\u578b\uff0c\u6709\u7c7b\u4f3c comparingInt \u548c thenComparingInt \u7684\u65b9\u6cd5\u3002int \u7248\u672c\u8fd8\u53ef\u4ee5\u7528\u4e8e\u8303\u56f4\u66f4\u5c0f\u7684\u6574\u6570\u7c7b\u578b\uff0c\u5982 PhoneNumber \u793a\u4f8b\u4e2d\u7684 short\u3002double \u7248\u672c\u4e5f\u53ef\u4ee5\u7528\u4e8e float\u3002Comparator \u7c7b\u63d0\u4f9b\u7684\u6784\u9020\u65b9\u6cd5\u8986\u76d6\u4e86\u6240\u6709 Java \u6570\u503c\u57fa\u672c\u7c7b\u578b\u3002"),(0,n.kt)("p",null,"There are also comparator construction methods for object reference types.The static method, named comparing, has two overloadings. One takes a key extractor and uses the keys\u2019 natural order. The second takes both a key extractor and a comparator to be used on the extracted keys. There are three overloadings of the instance method, which is named thenComparing. One overloading takes only a comparator and uses it to provide a secondary order. A second overloading takes only a key extractor and uses the key\u2019s natural order as a secondary order. The final overloading takes both a key extractor and a comparator to be used on the extracted keys."),(0,n.kt)("p",null,"\u4e5f\u6709\u5bf9\u8c61\u5f15\u7528\u7c7b\u578b\u7684\u6bd4\u8f83\u5668\u6784\u9020\u65b9\u6cd5\u3002\u9759\u6001\u65b9\u6cd5\u540d\u4e3a compare\uff0c\u5b83\u6709\u4e24\u4e2a\u91cd\u8f7d\u3002\u4e00\u4e2a\u662f\u4f7f\u7528 key \u63d0\u53d6\u5668\u5e76\u4f7f\u7528 key \u7684\u81ea\u7136\u987a\u5e8f\u3002\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u540c\u65f6\u4f7f\u7528 key \u63d0\u53d6\u5668\u548c\u6bd4\u8f83\u5668\u5bf9\u63d0\u53d6\u7684 key \u8fdb\u884c\u6bd4\u8f83\u3002\u5b9e\u4f8b\u65b9\u6cd5\u6709\u4e09\u79cd\u91cd\u8f7d\uff0c\u79f0\u4e3a thenComparing\u3002\u4e00\u4e2a\u91cd\u8f7d\u53ea\u9700\u8981\u4e00\u4e2a\u6bd4\u8f83\u5668\u5e76\u4f7f\u7528\u5b83\u6765\u63d0\u4f9b\u4e00\u4e2a\u4e8c\u7ea7\u987a\u5e8f\u3002\u7b2c\u4e8c\u4e2a\u91cd\u8f7d\u53ea\u63a5\u53d7\u4e00\u4e2a key \u63d0\u53d6\u5668\uff0c\u5e76\u5c06 key \u7684\u81ea\u7136\u987a\u5e8f\u7528\u4f5c\u4e8c\u7ea7\u987a\u5e8f\u3002\u6700\u540e\u7684\u91cd\u8f7d\u9700\u8981\u4e00\u4e2a key \u63d0\u53d6\u5668\u548c\u4e00\u4e2a\u6bd4\u8f83\u5668\u6765\u5bf9\u63d0\u53d6\u7684 key \u8fdb\u884c\u6bd4\u8f83\u3002"),(0,n.kt)("p",null,"Occasionally you may see compareTo or compare methods that rely on the fact that the difference between two values is negative if the first value is less than the second, zero if the two values are equal, and positive if the first value is greater. Here is an example:"),(0,n.kt)("p",null,"\u6709\u65f6\u5019\uff0c\u4f60\u53ef\u80fd\u4f1a\u770b\u5230 compareTo \u6216 compare \u65b9\u6cd5\uff0c\u5b83\u4eec\u4f9d\u8d56\u4e8e\u4ee5\u4e0b\u4e8b\u5b9e\uff1a\u5982\u679c\u7b2c\u4e00\u4e2a\u503c\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u503c\uff0c\u5219\u4e24\u4e2a\u503c\u4e4b\u95f4\u7684\u5dee\u4e3a\u8d1f\uff1b\u5982\u679c\u4e24\u4e2a\u503c\u76f8\u7b49\uff0c\u5219\u4e3a\u96f6\uff1b\u5982\u679c\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u96f6\uff0c\u5219\u4e3a\u6b63\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// BROKEN difference-based comparator - violates transitivity!\nstatic Comparator<Object> hashCodeOrder = new Comparator<>() {\n    public int compare(Object o1, Object o2) {\n        return o1.hashCode() - o2.hashCode();\n    }\n};\n")),(0,n.kt)("p",null,"Do not use this technique. It is fraught with danger from integer overflow and IEEE 754 floating point arithmetic artifacts ","[JLS 15.20.1, 15.21.1]",". Furthermore,the resulting methods are unlikely to be significantly faster than those written using the techniques described in this item. Use either a static compare method:"),(0,n.kt)("p",null,"\u4e0d\u8981\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u3002\u5b83\u5145\u6ee1\u4e86\u6765\u81ea\u6574\u6570\u6ea2\u51fa\u548c IEEE 754 \u6d6e\u70b9\u8fd0\u7b97\u6784\u4ef6\u7684\u5371\u9669 ","[JLS 15.20.1, 15.21.1]","\u3002\u6b64\u5916\uff0c\u751f\u6210\u7684\u65b9\u6cd5\u4e0d\u592a\u53ef\u80fd\u6bd4\u4f7f\u7528\u672c\u9879\u76ee\u4e2d\u63cf\u8ff0\u7684\u6280\u672f\u7f16\u5199\u7684\u65b9\u6cd5\u5feb\u5f97\u591a\u3002\u5e94\u4f7f\u7528\u9759\u6001\u6bd4\u8f83\u65b9\u6cd5\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Comparator based on static compare method\nstatic Comparator<Object> hashCodeOrder = new Comparator<>() {\n    public int compare(Object o1, Object o2) {\n        return Integer.compare(o1.hashCode(), o2.hashCode());\n    }\n};\n")),(0,n.kt)("p",null,"or a comparator construction method:"),(0,n.kt)("p",null,"\u6216\u6bd4\u8f83\u5668\u6784\u9020\u65b9\u6cd5\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Comparator based on Comparator construction method\nstatic Comparator<Object> hashCodeOrder = Comparator\n    .comparingInt(o -> o.hashCode());\n")),(0,n.kt)("p",null,"In summary, whenever you implement a value class that has a sensible ordering, you should have the class implement the Comparable interface so that its instances can be easily sorted, searched, and used in comparison-based collections. When comparing field values in the implementations of the compareTo methods, avoid the use of the < and > operators. Instead, use the static compare methods in the boxed primitive classes or the comparator construction methods in the Comparator interface."),(0,n.kt)("p",null,"\u603b\u4e4b\uff0c\u65e0\u8bba\u4f55\u65f6\u5b9e\u73b0\u5177\u6709\u6392\u5e8f\u6027\u8d28\u7684\u503c\u7c7b\uff0c\u90fd\u5e94\u8be5\u8ba9\u7c7b\u5b9e\u73b0 Comparable \u63a5\u53e3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u6392\u5e8f\u3001\u641c\u7d22\uff0c\u5e76\u4e0e\u4f9d\u8d56\u4e8e\u6b64\u63a5\u53e3\u7684\u96c6\u5408\u5b9e\u73b0\u8fdb\u884c\u4e92\u64cd\u4f5c\u3002\u5728 compareTo \u65b9\u6cd5\u7684\u5b9e\u73b0\u4e2d\u6bd4\u8f83\u5b57\u6bb5\u503c\u65f6\uff0c\u907f\u514d\u4f7f\u7528 < \u548c > \u64cd\u4f5c\u7b26\uff0c\u5e94\u4f7f\u7528\u5305\u88c5\u7c7b\u4e2d\u7684\u9759\u6001\u6bd4\u8f83\u65b9\u6cd5\u6216 Comparator \u63a5\u53e3\u4e2d\u7684 comparator \u6784\u9020\u65b9\u6cd5\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-3-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-3-Item-13-Override-clone-judiciously"},"Item 13: Override clone judiciously\uff08\u660e\u667a\u5730\u8986\u76d6 clone \u65b9\u6cd5\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-4-Introduction"},"Chapter 4 Introduction\uff08\u7ae0\u8282\u4ecb\u7ecd\uff09")))))}m.isMDXComponent=!0}}]);