"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4898],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={},o=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-5/Chapter-5-Item-26-Do-not-use-raw-types",id:"Books/EffectiveJava3/Chapter-5/Chapter-5-Item-26-Do-not-use-raw-types",title:"Chapter-5-Item-26-Do-not-use-raw-types",description:"Chapter 5. Generics\uff08\u6cdb\u578b\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-26-Do-not-use-raw-types.md",sourceDirName:"Books/EffectiveJava3/Chapter-5",slug:"/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-26-Do-not-use-raw-types",permalink:"/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-26-Do-not-use-raw-types",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-26-Do-not-use-raw-types.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-5-Introduction",permalink:"/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Introduction"},next:{title:"Chapter-5-Item-27-Eliminate-unchecked-warnings",permalink:"/docs/Books/EffectiveJava3/Chapter-5/Chapter-5-Item-27-Eliminate-unchecked-warnings"}},p={},l=[{value:"Chapter 5. Generics\uff08\u6cdb\u578b\uff09",id:"chapter-5-generics\u6cdb\u578b",level:2},{value:"Item 26: Don\u2019t use raw types\uff08\u4e0d\u8981\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\uff09",id:"item-26-dont-use-raw-types\u4e0d\u8981\u4f7f\u7528\u539f\u59cb\u7c7b\u578b",level:3}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"chapter-5-generics\u6cdb\u578b"},"Chapter 5. Generics\uff08\u6cdb\u578b\uff09"),(0,r.kt)("h3",{id:"item-26-dont-use-raw-types\u4e0d\u8981\u4f7f\u7528\u539f\u59cb\u7c7b\u578b"},"Item 26: Don\u2019t use raw types\uff08\u4e0d\u8981\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\uff09"),(0,r.kt)("p",null,"First, a few terms. A class or interface whose declaration has one or more type parameters is a generic class or interface ","[JLS, 8.1.2, 9.1.2]",". For example, the List interface has a single type parameter, E, representing its element type. The full name of the interface is ",(0,r.kt)("inlineCode",{parentName:"p"},"List<E>")," (read \u201clist of E\u201d), but people often call it List for short. Generic classes and interfaces are collectively known as generic types."),(0,r.kt)("p",null,"\u9996\u5148\uff0c\u4ecb\u7ecd\u4e00\u4e9b\u672f\u8bed\u3002\u58f0\u660e\u4e2d\u5177\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u53c2\u6570\u7684\u7c7b\u6216\u63a5\u53e3\u5c31\u662f\u6cdb\u578b\u7c7b\u6216\u6cdb\u578b\u63a5\u53e3 ","[JLS, 8.1.2, 9.1.2]","\u3002\u4f8b\u5982\uff0cList \u63a5\u53e3\u6709\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570 E\uff0c\u7528\u4e8e\u8868\u793a\u5176\u5143\u7d20\u7c7b\u578b\u3002\u8be5\u63a5\u53e3\u7684\u5168\u540d\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"List<E>"),"\uff08\u8bfb\u4f5c\u300cList of E\u300d\uff09\uff0c\u4f46\u4eba\u4eec\u901a\u5e38\u7b80\u79f0\u4e3a List\u3002\u6cdb\u578b\u7c7b\u548c\u6cdb\u578b\u63a5\u53e3\u7edf\u79f0\u4e3a\u6cdb\u578b\u3002"),(0,r.kt)("p",null,"Each generic type defines a set of parameterized types, which consist of the class or interface name followed by an angle-bracketed list of actual type parameters corresponding to the generic type\u2019s formal type parameters ","[JLS, 4.4, 4.5]",". For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"List<String>")," (read \u201clist of string\u201d) is a parameterized type representing a list whose elements are of type String. (String is the actual type parameter corresponding to the formal type parameter E.)"),(0,r.kt)("p",null,"\u6bcf\u4e2a\u6cdb\u578b\u5b9a\u4e49\u4e86\u4e00\u7ec4\u53c2\u6570\u5316\u7c7b\u578b\uff0c\u8fd9\u4e9b\u53c2\u6570\u5316\u7c7b\u578b\u5305\u62ec\u7c7b\u540d\u6216\u63a5\u53e3\u540d\uff0c\u4ee5\u53ca\u5e26\u5c16\u62ec\u53f7\u7684\u53c2\u6570\u5217\u8868\uff0c\u53c2\u6570\u5217\u8868\u662f\u4e0e\u6cdb\u578b\u7684\u5f62\u5f0f\u7c7b\u578b\u53c2\u6570\u76f8\u5bf9\u5e94\u7684\u5b9e\u9645\u7c7b\u578b ","[JLS, 4.4, 4.5]","\u3002\u4f8b\u5982\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"List<String>"),"\uff08\u8bfb\u4f5c\u300cList of String\u300d\uff09\u662f\u4e00\u4e2a\u53c2\u6570\u5316\u7c7b\u578b\uff0c\u8868\u793a\u5143\u7d20\u7c7b\u578b\u4e3a String \u7c7b\u578b\u7684 List\u3002\uff08String \u662f\u4e0e\u5f62\u5f0f\u7c7b\u578b\u53c2\u6570 E \u5bf9\u5e94\u7684\u5b9e\u9645\u7c7b\u578b\u53c2\u6570\u3002\uff09"),(0,r.kt)("p",null,"Finally, each generic type defines a raw type, which is the name of the generic type used without any accompanying type parameters ","[JLS, 4.8]",". For example, the raw type corresponding to ",(0,r.kt)("inlineCode",{parentName:"p"},"List<E>")," is List. Raw types behave as if all of the generic type information were erased from the type declaration. They exist primarily for compatibility with pre-generics code."),(0,r.kt)("p",null,"\u6700\u540e\uff0c\u6bcf\u4e2a\u6cdb\u578b\u90fd\u5b9a\u4e49\u4e86\u4e00\u4e2a\u539f\u59cb\u7c7b\u578b\uff0c\u5b83\u662f\u6ca1\u6709\u4efb\u4f55\u76f8\u5173\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u7684\u540d\u79f0 ","[JLS, 4.8]","\u3002\u4f8b\u5982\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"List<E>")," \u5bf9\u5e94\u7684\u539f\u59cb\u7c7b\u578b\u662f List\u3002\u539f\u59cb\u7c7b\u578b\u7684\u884c\u4e3a\u5c31\u597d\u50cf\u6240\u6709\u6cdb\u578b\u4fe1\u606f\u90fd\u4ece\u7c7b\u578b\u58f0\u660e\u4e2d\u5220\u9664\u4e86\u4e00\u6837\u3002\u5b83\u4eec\u7684\u5b58\u5728\u4e3b\u8981\u662f\u4e3a\u4e86\u4e0e\u4e4b\u524d\u7684\u6cdb\u578b\u4ee3\u7801\u517c\u5bb9\u3002"),(0,r.kt)("p",null,"Before generics were added to Java, this would have been an exemplary collection declaration. As of Java 9, it is still legal, but far from exemplary:"),(0,r.kt)("p",null,"\u5728\u5c06\u6cdb\u578b\u6dfb\u52a0\u5230 Java \u4e4b\u524d\uff0c\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684\u96c6\u5408\u58f0\u660e\u3002\u5c31 Java 9 \u800c\u8a00\uff0c\u5b83\u4ecd\u7136\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u4e0d\u5e94\u6548\u4eff\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Raw collection type - don't do this!\n// My stamp collection. Contains only Stamp instances.\nprivate final Collection stamps = ... ;\n")),(0,r.kt)("p",null,"If you use this declaration today and then accidentally put a coin into your stamp collection, the erroneous insertion compiles and runs without error (though the compiler does emit a vague warning):"),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u4eca\u5929\u4f7f\u7528\u8fd9\u4e2a\u58f0\u660e\uff0c\u7136\u540e\u610f\u5916\u5730\u5c06 coin \u653e\u5165 stamp \u96c6\u5408\u4e2d\uff0c\u8fd9\u4e00\u9519\u8bef\u7684\u63d2\u5165\u4f9d\u7136\u80fd\u591f\u7f16\u8bd1\u5e76\u6ca1\u6709\u9519\u8bef\u5730\u8fd0\u884c\uff08\u5c3d\u7ba1\u7f16\u8bd1\u5668\u786e\u5b9e\u53d1\u51fa\u4e86\u6a21\u7cca\u7684\u8b66\u544a\uff09\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// Erroneous insertion of coin into stamp collection\nstamps.add(new Coin( ... )); // Emits "unchecked call" warning\n')),(0,r.kt)("p",null,"You don\u2019t get an error until you try to retrieve the coin from the stamp collection:"),(0,r.kt)("p",null,"\u76f4\u5230\u4ece stamp \u96c6\u5408\u4e2d\u83b7\u53d6 coin \u65f6\u624d\u4f1a\u6536\u5230\u9519\u8bef\u63d0\u793a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Raw iterator type - don't do this!\nfor (Iterator i = stamps.iterator(); i.hasNext(); )\n    Stamp stamp = (Stamp) i.next(); // Throws ClassCastException\nstamp.cancel();\n")),(0,r.kt)("p",null,"As mentioned throughout this book, it pays to discover errors as soon as possible after they are made, ideally at compile time. In this case, you don\u2019t discover the error until runtime, long after it has happened, and in code that may be distant from the code containing the error. Once you see the ClassCastException, you have to search through the codebase looking for the method invocation that put the coin into the stamp collection. The compiler can\u2019t help you, because it can\u2019t understand the comment that says, \u201cContains only Stamp instances.\u201d"),(0,r.kt)("p",null,"\u6b63\u5982\u5728\u672c\u4e66\u4e2d\u63d0\u5230\u7684\uff0c\u5728\u51fa\u73b0\u9519\u8bef\u4e4b\u540e\u5c3d\u5feb\u53d1\u73b0\u9519\u8bef\u662f\u6709\u4ef7\u503c\u7684\uff0c\u6700\u597d\u662f\u5728\u7f16\u8bd1\u65f6\u3002\u5728\u672c\u4f8b\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u76f4\u5230\u8fd0\u884c\u65f6\uff08\u5728\u9519\u8bef\u53d1\u751f\u5f88\u4e45\u4e4b\u540e\uff09\u624d\u53d1\u73b0\u9519\u8bef\uff0c\u800c\u4e14\u62a5\u9519\u4ee3\u7801\u53ef\u80fd\u4e0e\u5305\u542b\u9519\u8bef\u7684\u4ee3\u7801\u76f8\u8ddd\u5f88\u8fdc\u3002\u4e00\u65e6\u770b\u5230 ClassCastException\uff0c\u5c31\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u641c\u7d22\u5c06 coin \u653e\u8fdb stamp \u96c6\u5408\u7684\u65b9\u6cd5\u8c03\u7528\u3002\u7f16\u8bd1\u5668\u4e0d\u80fd\u5e2e\u52a9\u4f60\uff0c\u56e0\u4e3a\u5b83\u4e0d\u80fd\u7406\u89e3\u6ce8\u91ca\u300cContains only Stamp instances.\u300d"),(0,r.kt)("p",null,"With generics, the type declaration contains the information, not the comment:"),(0,r.kt)("p",null,"\u5bf9\u4e8e\u6cdb\u578b\uff0c\u7c7b\u578b\u58f0\u660e\u5e94\u8be5\u5305\u542b\u7c7b\u578b\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u6ce8\u91ca\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Parameterized collection type - typesafe\nprivate final Collection<Stamp> stamps = ... ;\n")),(0,r.kt)("p",null,"From this declaration, the compiler knows that stamps should contain only Stamp instances and guarantees it to be true, assuming your entire codebase compiles without emitting (or suppressing; see Item 27) any warnings. When stamps is declared with a parameterized type declaration, the erroneous insertion generates a compile-time error message that tells you exactly what is wrong:"),(0,r.kt)("p",null,"\u4ece\u8fd9\u4e2a\u58f0\u660e\u770b\u51fa\uff0c\u7f16\u8bd1\u5668\u5e94\u8be5\u77e5\u9053 stamps \u5e94\u8be5\u53ea\u5305\u542b Stamp \u5b9e\u4f8b\uff0c\u4e3a\u4fdd\u8bc1\u5b83\u786e\u5b9e\u5982\u6b64\uff0c\u5047\u8bbe\u4f60\u7684\u6574\u4e2a\u4ee3\u7801\u5e93\u7f16\u8bd1\u6ca1\u6709\u53d1\u51fa\uff08\u6216\u6291\u5236\uff1b\u8be6\u89c1 ",(0,r.kt)("a",{parentName:"p",href:"./Chapter-5-Item-27-Eliminate-unchecked-warnings"},"Item-27"),"\uff09\u4efb\u4f55\u8b66\u544a\u3002\u5f53 stamps \u5229\u7528\u4e00\u4e2a\u53c2\u6570\u5316\u7684\u7c7b\u578b\u8fdb\u884c\u58f0\u660e\u65f6\uff0c\u9519\u8bef\u7684\u63d2\u5165\u5c06\u751f\u6210\u7f16\u8bd1\u65f6\u9519\u8bef\u6d88\u606f\uff0c\u8be5\u6d88\u606f\u5c06\u786e\u5207\u5730\u544a\u8bc9\u4f60\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Test.java:9: error: incompatible types: Coin cannot be converted\nto Stamp\nc.add(new Coin());\n^\n")),(0,r.kt)("p",null,"The compiler inserts invisible casts for you when retrieving elements from collections and guarantees that they won\u2019t fail (assuming, again, that all of your code did not generate or suppress any compiler warnings). While the prospect of accidentally inserting a coin into a stamp collection may appear far-fetched, the problem is real. For example, it is easy to imagine putting a BigInteger into a collection that is supposed to contain only BigDecimal instances."),(0,r.kt)("p",null,"\u5f53\u4ece\u96c6\u5408\u4e2d\u68c0\u7d22\u5143\u7d20\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u4f60\u6267\u884c\u4e0d\u53ef\u89c1\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u5e76\u786e\u4fdd\u5b83\u4eec\u4e0d\u4f1a\u5931\u8d25\uff08\u518d\u6b21\u5047\u8bbe\u4f60\u7684\u6240\u6709\u4ee3\u7801\u6ca1\u6709\u4ea7\u751f\u6216\u6291\u5236\u4efb\u4f55\u7f16\u8bd1\u5668\u8b66\u544a\uff09\u3002\u867d\u7136\u4e0d\u5c0f\u5fc3\u5c06 coin \u63d2\u5165 stamps \u96c6\u5408\u770b\u8d77\u6765\u6709\u4e9b\u7275\u5f3a\uff0c\u4f46\u8fd9\u7c7b\u95ee\u9898\u662f\u771f\u5b9e\u5b58\u5728\u7684\u3002\u4f8b\u5982\uff0c\u5f88\u5bb9\u6613\u60f3\u8c61\u5c06\u4e00\u4e2a BigInteger \u653e\u5165\u4e00\u4e2a\u53ea\u5305\u542b BigDecimal \u5b9e\u4f8b\u7684\u96c6\u5408\u4e2d\u3002"),(0,r.kt)("p",null,"As noted earlier, it is legal to use raw types (generic types without their type parameters), but you should never do it. ",(0,r.kt)("strong",{parentName:"p"},"If you use raw types, you lose all the safety and expressiveness benefits of generics.")," Given that you shouldn\u2019t use them, why did the language designers permit raw types in the first place? For compatibility. Java was about to enter its second decade when generics were added, and there was an enormous amount of code in existence that did not use generics. It was deemed critical that all of this code remain legal and interoperate with newer code that does use generics. It had to be legal to pass instances of parameterized types to methods that were designed for use with raw types, and vice versa. This requirement, known as migration compatibility, drove the decisions to support raw types and to implement generics using erasure (Item 28)."),(0,r.kt)("p",null,"\u5982\u524d\u6240\u8ff0\uff0c\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\uff08\u6ca1\u6709\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\uff09\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f\u4f60\u6c38\u8fdc\u4e0d\u5e94\u8be5\u8fd9\u6837\u505a\u3002",(0,r.kt)("strong",{parentName:"p"},"\u5982\u679c\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\uff0c\u5c31\u4f1a\u5931\u53bb\u6cdb\u578b\u7684\u5b89\u5168\u6027\u548c\u8868\u73b0\u529b\u3002")," \u65e2\u7136\u4f60\u4e0d\u5e94\u8be5\u4f7f\u7528\u5b83\u4eec\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8bed\u8a00\u8bbe\u8ba1\u8005\u4e00\u5f00\u59cb\u5c31\u5141\u8bb8\u539f\u59cb\u7c7b\u578b\u5462\uff1f\u7b54\u6848\u662f\uff1a\u4e3a\u4e86\u517c\u5bb9\u6027\u3002Java \u5373\u5c06\u8fdb\u5165\u7b2c\u4e8c\u4e2a\u5341\u5e74\uff0c\u6cdb\u578b\u88ab\u6dfb\u52a0\u8fdb\u6765\u65f6\uff0c\u8fd8\u5b58\u5728\u5927\u91cf\u4e0d\u4f7f\u7528\u6cdb\u578b\u7684\u4ee3\u7801\u3002\u4fdd\u6301\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\u5408\u6cd5\u5e76\u4e0e\u4f7f\u7528\u6cdb\u578b\u7684\u65b0\u4ee3\u7801\u517c\u5bb9\u88ab\u8ba4\u4e3a\u662f\u5173\u952e\u7684\u3002\u5c06\u53c2\u6570\u5316\u7c7b\u578b\u7684\u5b9e\u4f8b\u4f20\u9012\u7ed9\u8bbe\u8ba1\u7528\u4e8e\u539f\u59cb\u7c7b\u578b\u7684\u65b9\u6cd5\u5fc5\u987b\u662f\u5408\u6cd5\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u8fd9\u88ab\u79f0\u4e3a\u8fc1\u79fb\u517c\u5bb9\u6027\u7684\u9700\u6c42\uff0c\u5b83\u4fc3\u4f7f\u539f\u59cb\u7c7b\u578b\u5f97\u5230\u652f\u6301\u5e76\u4f7f\u7528\u64e6\u9664\u5b9e\u73b0\u6cdb\u578b \uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-5-Item-28-Prefer-lists-to-arrays"},"Item-28"),"\uff09\u3002"),(0,r.kt)("p",null,"While you shouldn\u2019t use raw types such as List, it is fine to use types that are parameterized to allow insertion of arbitrary objects, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>"),". Just what is the difference between the raw type List and the parameterized type ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>"),"? Loosely speaking, the former has opted out of the generic type system, while the latter has explicitly told the compiler that it is capable of holding objects of any type. While you can pass a ",(0,r.kt)("inlineCode",{parentName:"p"},"List<String>")," to a parameter of type List, you can\u2019t pass it to a parameter of type ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>"),". There are sub-typing rules for generics, and ",(0,r.kt)("inlineCode",{parentName:"p"},"List<String>")," is a subtype of the raw type List, but not of the parameterized type ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>")," (Item 28). As a consequence, ",(0,r.kt)("strong",{parentName:"p"},"you lose type safety if you use a raw type such as List, but not if you use a parameterized type such as List","<","Object",">",".")),(0,r.kt)("p",null,"\u867d\u7136\u4f60\u4e0d\u5e94\u8be5\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\uff08\u5982 List\uff09\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570\u5316\u7684\u7c7b\u578b\u6765\u5141\u8bb8\u63d2\u5165\u4efb\u610f\u5bf9\u8c61\uff0c\u5982 ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>"),"\u3002\u539f\u59cb\u7c7b\u578b List \u548c\u53c2\u6570\u5316\u7c7b\u578b ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>")," \u4e4b\u95f4\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\u7c97\u7565\u5730\u8bf4\uff0c\u524d\u8005\u9009\u62e9\u4e86\u4e0d\u4f7f\u7528\u6cdb\u578b\u7cfb\u7edf\uff0c\u800c\u540e\u8005\u660e\u786e\u5730\u544a\u8bc9\u7f16\u8bd1\u5668\u5b83\u80fd\u591f\u4fdd\u5b58\u4efb\u4f55\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u867d\u7136\u53ef\u4ee5\u5c06 ",(0,r.kt)("inlineCode",{parentName:"p"},"List<String>")," \u4f20\u9012\u7ed9 List \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u5c06\u5176\u4f20\u9012\u7ed9\u7c7b\u578b ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>")," \u7684\u53c2\u6570\u3002\u6cdb\u578b\u6709\u5b50\u7c7b\u578b\u89c4\u5219\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"List<String>")," \u662f\u539f\u59cb\u7c7b\u578b List \u7684\u5b50\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u53c2\u6570\u5316\u7c7b\u578b ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>")," \u7684\u5b50\u7c7b\u578b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-5-Item-28-Prefer-lists-to-arrays"},"Item-28"),"\uff09\u3002\u56e0\u6b64\uff0c",(0,r.kt)("strong",{parentName:"p"},"\u5982\u679c\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\uff08\u5982 List\uff09\uff0c\u5c31\u4f1a\u5931\u53bb\u7c7b\u578b\u5b89\u5168\u6027\uff0c\u4f46\u5982\u679c\u4f7f\u7528\u53c2\u6570\u5316\u7c7b\u578b\uff08\u5982 ",(0,r.kt)("inlineCode",{parentName:"strong"},"List<Object>"),"\uff09\u5219\u4e0d\u4f1a\u3002")),(0,r.kt)("p",null,"To make this concrete, consider the following program:"),(0,r.kt)("p",null,"\u4e3a\u4e86\u4f7f\u8fd9\u4e00\u70b9\u5177\u4f53\u4e9b\uff0c\u8003\u8651\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Fails at runtime - unsafeAdd method uses a raw type (List)!\n\npublic static void main(String[] args) {\n    List<String> strings = new ArrayList<>();\n    unsafeAdd(strings, Integer.valueOf(42));\n    String s = strings.get(0); // Has compiler-generated cast\n}\n\nprivate static void unsafeAdd(List list, Object o) {\n    list.add(o);\n}\n")),(0,r.kt)("p",null,"This program compiles, but because it uses the raw type List, you get a warning:"),(0,r.kt)("p",null,"\u8be5\u7a0b\u5e8f\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u56e0\u4e3a\u5b83\u4f7f\u7528\u539f\u59cb\u7c7b\u578b List\uff0c\u6240\u4ee5\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u8b66\u544a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Test.java:10: warning: [unchecked] unchecked call to add(E) as a\nmember of the raw type List\nlist.add(o);\n^\n")),(0,r.kt)("p",null,"And indeed, if you run the program, you get a ClassCastException when the program tries to cast the result of the invocation strings.get(0), which is an Integer, to a String. This is a compiler-generated cast, so it\u2019s normally guaranteed to succeed, but in this case we ignored a compiler warning and paid the price."),(0,r.kt)("p",null,"\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u4f60\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5f53\u7a0b\u5e8f\u8bd5\u56fe\u5c06\u8c03\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"strings.get(0)")," \u7684\u7ed3\u679c\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u65f6\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a ClassCastException\u3002\u8fd9\u662f\u4e00\u4e2a\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u5b83\u901a\u5e38\u90fd\u80fd\u6210\u529f\uff0c\u4f46\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u7f16\u8bd1\u5668\u7684\u8b66\u544a\uff0c\u5e76\u4e3a\u6b64\u4ed8\u51fa\u4e86\u4ee3\u4ef7\u3002"),(0,r.kt)("p",null,"If you replace the raw type List with the parameterized type ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>")," in the unsafeAdd declaration and try to recompile the program, you\u2019ll find that it no longer compiles but emits the error message:"),(0,r.kt)("p",null,"\u5982\u679c\u5c06 unsafeAdd \u58f0\u660e\u4e2d\u7684\u539f\u59cb\u7c7b\u578b List \u66ff\u6362\u4e3a\u53c2\u6570\u5316\u7c7b\u578b ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Object>"),"\uff0c\u5e76\u5c1d\u8bd5\u91cd\u65b0\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u4e0d\u518d\u7f16\u8bd1\uff0c\u800c\u662f\u53d1\u51fa\u9519\u8bef\u6d88\u606f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Test.java:5: error: incompatible types: List<String> cannot be\nconverted to List<Object>\nunsafeAdd(strings, Integer.valueOf(42));\n^\n")),(0,r.kt)("p",null,"You might be tempted to use a raw type for a collection whose element type is unknown and doesn\u2019t matter. For example, suppose you want to write a method that takes two sets and returns the number of elements they have in common. Here\u2019s how you might write such a method if you were new to generics:"),(0,r.kt)("p",null,"\u5bf9\u4e8e\u5143\u7d20\u7c7b\u578b\u672a\u77e5\u4e14\u65e0\u5173\u7d27\u8981\u7684\u96c6\u5408\uff0c\u4f60\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5e0c\u671b\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u96c6\u5408\u5e76\u8fd4\u56de\u5b83\u4eec\u5171\u6709\u7684\u5143\u7d20\u6570\u91cf\u3002\u5982\u679c\u4f60\u662f\u4f7f\u7528\u6cdb\u578b\u7684\u65b0\u624b\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u8fd9\u6837\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Use of raw type for unknown element type - don't do this!\nstatic int numElementsInCommon(Set s1, Set s2) {\n    int result = 0;\n    for (Object o1 : s1)\n        if (s2.contains(o1))\n    result++;\n    return result;\n}\n")),(0,r.kt)("p",null,"This method works but it uses raw types, which are dangerous. The safe alternative is to use unbounded wildcard types. If you want to use a generic type but you don\u2019t know or care what the actual type parameter is, you can use a question mark instead. For example, the unbounded wildcard type for the generic type ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<E>")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<?>")," (read \u201cset of some type\u201d). It is the most general parameterized Set type, capable of holding any set. Here is how the numElementsInCommon declaration looks with unbounded wildcard types:"),(0,r.kt)("p",null,"\u8fd9\u79cd\u65b9\u6cd5\u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u5b83\u4f7f\u7528\u7684\u662f\u539f\u59cb\u7c7b\u578b\uff0c\u8fd9\u662f\u5f88\u5371\u9669\u7684\u3002\u5b89\u5168\u7684\u66ff\u4ee3\u65b9\u6cd5\u662f\u4f7f\u7528\u65e0\u754c\u901a\u914d\u7b26\u7c7b\u578b\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u6cdb\u578b\uff0c\u4f46\u4e0d\u77e5\u9053\u6216\u4e0d\u5173\u5fc3\u5b9e\u9645\u7684\u7c7b\u578b\u53c2\u6570\u662f\u4ec0\u4e48\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u95ee\u53f7\u4ee3\u66ff\u3002\u4f8b\u5982\uff0c\u6cdb\u578b\u96c6 ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<E>")," \u7684\u65e0\u754c\u901a\u914d\u7b26\u7c7b\u578b\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<?>"),"\uff08\u8bfb\u4f5c\u300cset of some type\u300d\uff09\u3002\u5b83\u662f\u6700\u901a\u7528\u7684\u53c2\u6570\u5316\u96c6\u5408\u7c7b\u578b\uff0c\u80fd\u591f\u5bb9\u7eb3\u4efb\u4f55\u96c6\u5408\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Uses unbounded wildcard type - typesafe and flexible\nstatic int numElementsInCommon(Set<?> s1, Set<?> s2) { ... }\n")),(0,r.kt)("p",null,"What is the difference between the unbounded wildcard type ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<?>")," and the raw type Set? Does the question mark really buy you anything? Not to belabor the point, but the wildcard type is safe and the raw type isn\u2019t. You can put any element into a collection with a raw type, easily corrupting the collection\u2019s type invariant (as demonstrated by the unsafeAdd method on page 119); you can\u2019t put any element (other than null) into a ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection<?>"),". Attempting to do so will generate a compile-time error message like this:"),(0,r.kt)("p",null,"\u65e0\u754c\u901a\u914d\u7b26\u7c7b\u578b ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<?>")," \u548c\u539f\u59cb\u7c7b\u578b Set \u4e4b\u95f4\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\u95ee\u53f7\u771f\u7684\u80fd\u8d77\u4f5c\u7528\u5417\uff1f\u6211\u5e76\u4e0d\u662f\u5728\u5f3a\u8c03\u8fd9\u4e00\u70b9\uff0c\u4f46\u662f\u901a\u914d\u7b26\u7c7b\u578b\u662f\u5b89\u5168\u7684\uff0c\u800c\u539f\u59cb\u7c7b\u578b\u5219\u4e0d\u662f\u3002\u5c06\u4efb\u4f55\u5143\u7d20\u653e\u5165\u5177\u6709\u539f\u59cb\u7c7b\u578b\u7684\u96c6\u5408\u4e2d\uff0c\u5f88\u5bb9\u6613\u7834\u574f\u96c6\u5408\u7684\u7c7b\u578b\u4e00\u81f4\u6027\uff08\u5982\u4e0a\u8ff0\u7684 unsafeAdd \u65b9\u6cd5\u6240\u793a\uff09\uff1b\u4f60\u4e0d\u80fd\u5c06\u4efb\u4f55\u5143\u7d20\uff08\u9664\u4e86 null\uff09\u653e\u5165 ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection<?>"),"\u3002\u5c1d\u8bd5\u8fd9\u6837\u505a\u5c06\u751f\u6210\u8fd9\u6837\u7684\u7f16\u8bd1\u65f6\u9519\u8bef\u6d88\u606f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'WildCard.java:13: error: incompatible types: String cannot be converted to CAP#1\nc.add("verboten");\n^ where CAP#1\nis a fresh type-variable:\nCAP#1 extends Object from capture of ?\n')),(0,r.kt)("p",null,"Admittedly this error message leaves something to be desired, but the compiler has done its job, preventing you from corrupting the collection\u2019s type invariant, whatever its element type may be. Not only can\u2019t you put any element (other than null) into a ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection<?>"),", but you can\u2019t assume anything about the type of the objects that you get out. If these restrictions are unacceptable, you can use generic methods (Item 30) or bounded wildcard types (Item 31)."),(0,r.kt)("p",null,"\u65e0\u53ef\u5426\u8ba4\uff0c\u8fd9\u4e2a\u9519\u8bef\u6d88\u606f\u8ba9\u4eba\u4e0d\u6ee1\u610f\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u5df2\u7ecf\u5b8c\u6210\u4e86\u5b83\u7684\u5de5\u4f5c\uff0c\u9632\u6b62\u4f60\u65e0\u89c6\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u800c\u7834\u574f\u96c6\u5408\u7684\u7c7b\u578b\u4e00\u81f4\u6027\u3002\u4f60\u4e0d\u4ec5\u4e0d\u80fd\u5c06\u4efb\u4f55\u5143\u7d20\uff08\u9664 null \u4e4b\u5916\uff09\u653e\u5165 ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection<?>"),"\uff0c\u800c\u4e14\u4e0d\u80fd\u81c6\u60f3\u4f60\u5f97\u5230\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u3002\u5982\u679c\u8fd9\u4e9b\u9650\u5236\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u6cdb\u578b\u65b9\u6cd5\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-5-Item-30-Favor-generic-methods"},"Item-30"),"\uff09\u6216\u6709\u754c\u901a\u914d\u7b26\u7c7b\u578b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-5-Item-31-Use-bounded-wildcards-to-increase-API-flexibility"},"Item-31"),"\uff09\u3002"),(0,r.kt)("p",null,"There are a few minor exceptions to the rule that you should not use raw types. ",(0,r.kt)("strong",{parentName:"p"},"You must use raw types in class literals.")," The specification does not permit the use of parameterized types (though it does permit array types and primitive types) ","[JLS, 15.8.2]",". In other words, List.class, String[].class, and int.class are all legal, but ",(0,r.kt)("inlineCode",{parentName:"p"},"List<String>.class")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"List<?>.class")," are not."),(0,r.kt)("p",null,"\u5bf9\u4e8e\u4e0d\u5e94\u8be5\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\u7684\u89c4\u5219\uff0c\u6709\u4e00\u4e9b\u5c0f\u7684\u4f8b\u5916\u3002",(0,r.kt)("strong",{parentName:"p"},"\u5fc5\u987b\u5728\u7c7b\u5b57\u9762\u91cf\u4e2d\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\u3002")," \u8be5\u89c4\u8303\u4e0d\u5141\u8bb8\u4f7f\u7528\u53c2\u6570\u5316\u7c7b\u578b\uff08\u5c3d\u7ba1\u5b83\u5141\u8bb8\u6570\u7ec4\u7c7b\u578b\u548c\u57fa\u672c\u7c7b\u578b\uff09","[JLS, 15.8.2]","\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"List.class"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"String[].class")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"int.class")," \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f ",(0,r.kt)("inlineCode",{parentName:"p"},"List<String>.class")," \u548c ",(0,r.kt)("inlineCode",{parentName:"p"},"List<?>.class")," \u4e0d\u662f\u3002"),(0,r.kt)("p",null,"A second exception to the rule concerns the instanceof operator. Because generic type information is erased at runtime, it is illegal to use the instanceof operator on parameterized types other than unbounded wildcard types. The use of unbounded wildcard types in place of raw types does not affect the behavior of the instanceof operator in any way. In this case, the angle brackets and question marks are just noise. ",(0,r.kt)("strong",{parentName:"p"},"This is the preferred way to use the instanceof operator with generic types:")),(0,r.kt)("p",null,"\u89c4\u5219\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5916\u662f instanceof \u8fd0\u7b97\u7b26\u3002\u7531\u4e8e\u6cdb\u578b\u4fe1\u606f\u5728\u8fd0\u884c\u65f6\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u5728\u4e0d\u662f\u65e0\u754c\u901a\u914d\u7b26\u7c7b\u578b\u4e4b\u5916\u7684\u53c2\u6570\u5316\u7c7b\u578b\u4e0a\u4f7f\u7528 instanceof \u64cd\u4f5c\u7b26\u662f\u975e\u6cd5\u7684\u3002\u4f7f\u7528\u65e0\u754c\u901a\u914d\u7b26\u7c7b\u578b\u4ee3\u66ff\u539f\u59cb\u7c7b\u578b\u4e0d\u4f1a\u4ee5\u4efb\u4f55\u65b9\u5f0f\u5f71\u54cd instanceof \u8fd0\u7b97\u7b26\u7684\u884c\u4e3a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c16\u62ec\u53f7\u548c\u95ee\u53f7\u53ea\u662f\u591a\u4f59\u7684\u3002",(0,r.kt)("strong",{parentName:"p"},"\u4e0b\u9762\u7684\u4f8b\u5b50\u662f\u4f7f\u7528\u901a\u7528\u7c7b\u578b instanceof \u8fd0\u7b97\u7b26\u7684\u9996\u9009\u65b9\u6cd5\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Legitimate use of raw type - instanceof operator\nif (o instanceof Set) { // Raw type\n    Set<?> s = (Set<?>) o; // Wildcard type\n    ...\n}\n")),(0,r.kt)("p",null,"Note that once you\u2019ve determined that o is a Set, you must cast it to the wildcard type ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<?>"),", not the raw type Set. This is a checked cast, so it will not cause a compiler warning."),(0,r.kt)("p",null,"\u6ce8\u610f\uff0c\u4e00\u65e6\u786e\u5b9a o \u662f\u4e00\u4e2a Set\uff0c\u5c31\u5fc5\u987b\u5c06\u5176\u5f3a\u5236\u8f6c\u6362\u4e3a\u901a\u914d\u7b26\u7c7b\u578b ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<?>"),"\uff0c\u800c\u4e0d\u662f\u539f\u59cb\u7c7b\u578b Set\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u8fc7\u68c0\u67e5\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5f15\u53d1\u7f16\u8bd1\u5668\u8b66\u544a\u3002"),(0,r.kt)("p",null,"In summary, using raw types can lead to exceptions at runtime, so don\u2019t use them. They are provided only for compatibility and interoperability with legacy code that predates the introduction of generics. As a quick review, ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<Object>")," is a parameterized type representing a set that can contain objects of any type, ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<?>")," is a wildcard type representing a set that can contain only objects of some unknown type, and Set is a raw type, which opts out of the generic type system. The first two are safe, and the last is not."),(0,r.kt)("p",null,"\u603b\u4e4b\uff0c\u4f7f\u7528\u539f\u59cb\u7c7b\u578b\u53ef\u80fd\u4f1a\u5728\u8fd0\u884c\u65f6\u5bfc\u81f4\u5f02\u5e38\uff0c\u6240\u4ee5\u4e0d\u8981\u8f7b\u6613\u4f7f\u7528\u5b83\u4eec\u3002\u5b83\u4eec\u4ec5\u7528\u4e8e\u4e0e\u5f15\u5165\u6cdb\u578b\u4e4b\u524d\u7684\u9057\u7559\u4ee3\u7801\u8fdb\u884c\u517c\u5bb9\u548c\u4e92\u64cd\u4f5c\u3002\u5feb\u901f\u56de\u987e\u4e00\u4e0b\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"Set<Object>")," \u662f\u4e00\u4e2a\u53c2\u6570\u5316\u7c7b\u578b\uff0c\u8868\u793a\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u96c6\u5408\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"Set<?>")," \u662f\u4e00\u4e2a\u901a\u914d\u7b26\u7c7b\u578b\uff0c\u8868\u793a\u53ea\u80fd\u5305\u542b\u67d0\u79cd\u672a\u77e5\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u96c6\u5408\uff0cSet \u662f\u4e00\u4e2a\u539f\u59cb\u7c7b\u578b\uff0c\u5b83\u9009\u62e9\u4e86\u6cdb\u578b\u7cfb\u7edf\u3002\u524d\u4e24\u4e2a\u662f\u5b89\u5168\u7684\uff0c\u540e\u4e00\u4e2a\u5c31\u4e0d\u5b89\u5168\u4e86\u3002"),(0,r.kt)("p",null,"For quick reference, the terms introduced in this item (and a few introduced later in this chapter) are summarized in the following table:"),(0,r.kt)("p",null,"\u4e3a\u4fbf\u4e8e\u53c2\u8003\uff0c\u672c\u6761\u76ee\u4e2d\u4ecb\u7ecd\u7684\u672f\u8bed\uff08\u4ee5\u53ca\u540e\u9762\u5c06\u8981\u4ecb\u7ecd\u7684\u4e00\u4e9b\u672f\u8bed\uff09\u603b\u7ed3\u5982\u4e0b\uff1a"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Term"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Example"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Item"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Parameterized type"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"List<String>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-26-Do-not-use-raw-types"},"Item-26"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Actual type parameter"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-26-Do-not-use-raw-types"},"Item-26"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Generic type"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"List<E>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-26-Do-not-use-raw-types"},"Item-26"),", ",(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-29-Favor-generic-types"},"Item-29"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Formal type parameter"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"E")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-26-Do-not-use-raw-types"},"Item-26"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Unbounded wildcard type"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"List<?>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-26-Do-not-use-raw-types"},"Item-26"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Raw type"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"List")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-26-Do-not-use-raw-types"},"Item-26"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Bounded type parameter"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"<E extends Number>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-29-Favor-generic-types"},"Item-29"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Recursive type bound"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"<T extends Comparable<T>>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-30-Favor-generic-methods"},"Item-30"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Bounded wildcard type"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"List<? extends Number>")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-31-Use-bounded-wildcards-to-increase-API-flexibility"},"Item-31"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Generic method"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"static <E> List<E> asList(E[] a)")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-30-Favor-generic-methods"},"Item-30"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Type token"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"String.class")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"./Chapter-5-Item-33-Consider-typesafe-heterogeneous-containers"},"Item-33"))))),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"./Chapter-5-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-5-Item-27-Eliminate-unchecked-warnings"},"Item 27: Eliminate unchecked warnings\uff08\u6d88\u9664 unchecked \u8b66\u544a\uff09")))))}m.isMDXComponent=!0}}]);