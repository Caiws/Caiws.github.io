"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1876],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(a),h=i,d=u["".concat(l,".").concat(h)]||u[h]||p[h]||r;return a?n.createElement(d,o(o({ref:t},m),{},{components:a})):n.createElement(d,o({ref:t},m))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1891:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const r={},o=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-4/Chapter-4-Item-17-Minimize-mutability",id:"Books/EffectiveJava3/Chapter-4/Chapter-4-Item-17-Minimize-mutability",title:"Chapter-4-Item-17-Minimize-mutability",description:"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-17-Minimize-mutability.md",sourceDirName:"Books/EffectiveJava3/Chapter-4",slug:"/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-17-Minimize-mutability",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-17-Minimize-mutability",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-17-Minimize-mutability.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-4-Item-16-In-public-classes-use-accessor-methods-not-public-fields",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-16-In-public-classes-use-accessor-methods-not-public-fields"},next:{title:"Chapter-4-Item-18-Favor-composition-over-inheritance",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-18-Favor-composition-over-inheritance"}},l={},c=[{value:"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09",id:"chapter-4-classes-and-interfaces\u7c7b\u548c\u63a5\u53e3",level:2},{value:"Item 17: Minimize mutability\uff08\u51cf\u5c11\u53ef\u53d8\u6027\uff09",id:"item-17-minimize-mutability\u51cf\u5c11\u53ef\u53d8\u6027",level:3}],m={toc:c};function p(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"chapter-4-classes-and-interfaces\u7c7b\u548c\u63a5\u53e3"},"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09"),(0,i.kt)("h3",{id:"item-17-minimize-mutability\u51cf\u5c11\u53ef\u53d8\u6027"},"Item 17: Minimize mutability\uff08\u51cf\u5c11\u53ef\u53d8\u6027\uff09"),(0,i.kt)("p",null,"An immutable class is simply a class whose instances cannot be modified. All of the information contained in each instance is fixed for the lifetime of the object,so no changes can ever be observed. The Java platform libraries contain many immutable classes, including String, the boxed primitive classes, and BigInteger and BigDecimal. There are many good reasons for this:Immutable classes are easier to design, implement, and use than mutable classes.They are less prone to error and are more secure."),(0,i.kt)("p",null,"\u4e0d\u53ef\u53d8\u7c7b\u662f\u5b9e\u4f8b\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\u7c7b\u3002\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d\u5305\u542b\u7684\u6240\u6709\u4fe1\u606f\u5728\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u5185\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u56e0\u6b64\u6c38\u8fdc\u4e0d\u4f1a\u89c2\u5bdf\u5230\u4efb\u4f55\u66f4\u6539\u3002Java \u5e93\u5305\u542b\u8bb8\u591a\u4e0d\u53ef\u53d8\u7684\u7c7b\uff0c\u5305\u62ec String\u3001\u57fa\u672c\u7c7b\u578b\u7684\u5305\u88c5\u7c7b\u3001BigInteger \u548c BigDecimal\u3002\u8fd9\u4e48\u505a\u6709\u5f88\u597d\u7684\u7406\u7531\uff1a\u4e0d\u53ef\u53d8\u7c7b\u6bd4\u53ef\u53d8\u7c7b\u66f4\u5bb9\u6613\u8bbe\u8ba1\u3001\u5b9e\u73b0\u548c\u4f7f\u7528\u3002\u5b83\u4eec\u4e0d\u592a\u5bb9\u6613\u51fa\u9519\uff0c\u800c\u4e14\u66f4\u5b89\u5168\u3002"),(0,i.kt)("p",null,"To make a class immutable, follow these five rules:"),(0,i.kt)("p",null,"\u8981\u4f7f\u7c7b\u4e0d\u53ef\u53d8\uff0c\u8bf7\u9075\u5faa\u4ee5\u4e0b 5 \u6761\u89c4\u5219\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Don\u2019t provide methods that modify the object\u2019s state")," (known as mutators).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u8981\u63d0\u4f9b\u4fee\u6539\u5bf9\u8c61\u72b6\u6001\u7684\u65b9\u6cd5"),"\uff08\u8fd9\u7c7b\u65b9\u6cd5\u4e5f\u88ab\u79f0\u4e3a\u4fee\u6539\u5668\uff09"),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Ensure that the class can\u2019t be extended.")," This prevents careless or malicious subclasses from compromising the immutable behavior of the class by behaving as if the object\u2019s state has changed. Preventing subclassing is generally accomplished by making the class final, but there is an alternative that we\u2019ll discuss later.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u786e\u4fdd\u7c7b\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002")," \u8fd9\u53ef\u4ee5\u9632\u6b62\u7c97\u5fc3\u6216\u6076\u610f\u7684\u901a\u8fc7\u5b50\u7c7b\u5b9e\u4f8b\u5bf9\u8c61\u72b6\u6001\u53ef\u6539\u53d8\u7684\u65b9\u5f0f\uff0c\u635f\u5bb3\u7236\u7c7b\u7684\u4e0d\u53ef\u53d8\u884c\u4e3a\u3002\u9632\u6b62\u5b50\u7c7b\u5316\u901a\u5e38\u7528 final \u4fee\u9970\u7236\u7c7b\uff0c\u4f46\u662f\u8fd8\u6709\u4e00\u79cd\u66ff\u4ee3\u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u5728\u540e\u9762\u8ba8\u8bba\u3002"),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Make all fields final.")," This clearly expresses your intent in a manner that is enforced by the system. Also, it is necessary to ensure correct behavior if a reference to a newly created instance is passed from one thread to another without synchronization, as spelled out in the memory model ","[JLS, 17.5;Goetz06, 16]",".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6240\u6709\u5b57\u6bb5\u7528 final \u4fee\u9970\u3002")," \u8fd9\u6e05\u695a\u5730\u8868\u8fbe\u4e86\u610f\u56fe\uff0c\u5e76\u7531\u7cfb\u7edf\u5f3a\u5236\u6267\u884c\u3002\u540c\u6837\uff0c\u5982\u679c\u5728\u6ca1\u6709\u540c\u6b65\u7684\u60c5\u51b5\u4e0b\uff0c\u5f15\u7528\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b\u5e76\u4ece\u4e00\u4e2a\u7ebf\u7a0b\u4f20\u9012\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u90a3\u4e48\u5c31\u6709\u5fc5\u8981\u786e\u4fdd\u6b63\u786e\u7684\u884c\u4e3a\uff0c\u5c31\u50cf\u5185\u5b58\u6a21\u578b\u4e2d\u63cf\u8ff0\u7684\u90a3\u6837 ","[JLS, 17.5;Goetz06, 16]","\u3002"),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Make all fields private.")," This prevents clients from obtaining access to mutable objects referred to by fields and modifying these objects directly.While it is technically permissible for immutable classes to have public final fields containing primitive values or references to immutable objects, it is not recommended because it precludes changing the internal representation in a later release (Items 15 and 16).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6240\u6709\u5b57\u6bb5\u8bbe\u4e3a\u79c1\u6709\u3002")," \u8fd9\u5c06\u963b\u6b62\u5ba2\u6237\u7aef\u8bbf\u95ee\u5b57\u6bb5\u5f15\u7528\u7684\u53ef\u53d8\u5bf9\u8c61\u5e76\u76f4\u63a5\u4fee\u6539\u8fd9\u4e9b\u5bf9\u8c61\u3002\u867d\u7136\u5728\u6280\u672f\u4e0a\u5141\u8bb8\u4e0d\u53ef\u53d8\u7c7b\u62e5\u6709\u5305\u542b\u57fa\u672c\u7c7b\u578b\u6216\u5bf9\u4e0d\u53ef\u53d8\u5bf9\u8c61\u7684\u5f15\u7528\u7684\u516c\u5171 final \u5b57\u6bb5\uff0c\u4f46\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5728\u4ee5\u540e\u7684\u7248\u672c\u4e2d\u65e0\u6cd5\u66f4\u6539\u5185\u90e8\u8868\u793a\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-15-Minimize-the-accessibility-of-classes-and-members"},"Item-15")," \u548c ",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-16-In-public-classes-use-accessor-methods-not-public-fields"},"Item-16"),"\uff09\u3002"),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Ensure exclusive access to any mutable components.")," If your class has any fields that refer to mutable objects, ensure that clients of the class cannot obtain references to these objects. Never initialize such a field to a client provided object reference or return the field from an accessor. Make defensive copies (Item 50) in constructors, accessors, and readObject methods (Item 88).")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u786e\u4fdd\u5bf9\u4efb\u4f55\u53ef\u53d8\u7ec4\u4ef6\u7684\u72ec\u5360\u8bbf\u95ee\u3002")," \u5982\u679c\u4f60\u7684\u7c7b\u6709\u4efb\u4f55\u5f15\u7528\u53ef\u53d8\u5bf9\u8c61\u7684\u5b57\u6bb5\uff0c\u8bf7\u786e\u4fdd\u8be5\u7c7b\u7684\u5ba2\u6237\u7aef\u65e0\u6cd5\u83b7\u5f97\u5bf9\u8fd9\u4e9b\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u6c38\u8fdc\u4e0d\u8981\u5411\u63d0\u4f9b\u5bf9\u8c61\u5f15\u7528\u7684\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u8fd9\u6837\u7684\u5b57\u6bb5\uff0c\u4e5f\u4e0d\u8981\u4ece\u8bbf\u95ee\u5668\u8fd4\u56de\u5b57\u6bb5\u3002\u5728\u6784\u9020\u51fd\u6570\u3001\u8bbf\u95ee\u5668\u548c readObject \u65b9\u6cd5\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"},"Item-88"),"\uff09\u4e2d\u521b\u5efa\u9632\u5fa1\u6027\u526f\u672c\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-8-Item-50-Make-defensive-copies-when-needed"},"Item-50"),"\uff09\u3002"),(0,i.kt)("p",null,"Many of the example classes in previous items are immutable. One such class is PhoneNumber in Item 11, which has accessors for each attribute but no corresponding mutators. Here is a slightly more complex example:"),(0,i.kt)("p",null,"\u524d\u9762\u6761\u76ee\u4e2d\u7684\u8bb8\u591a\u793a\u4f8b\u7c7b\u90fd\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u5176\u4e2d\u4e00\u4e2a\u7c7b\u662f ",(0,i.kt)("a",{parentName:"p",href:"./Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals"},"Item-11")," \u4e2d\u7684 PhoneNumber\uff0c\u5b83\u7684\u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u8bbf\u95ee\u5668\uff0c\u4f46\u6ca1\u6709\u5bf9\u5e94\u7684\u4fee\u6539\u5668\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7a0d\u5fae\u590d\u6742\u7684\u4f8b\u5b50\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Immutable complex number class\npublic final class Complex {\n    private final double re;\n    private final double im;\n\n    public Complex(double re, double im) {\n        this.re = re;\n        this.im = im;\n    }\n    public double realPart() { return re; }\n    public double imaginaryPart() { return im; }\n    public Complex plus(Complex c) {\n        return new Complex(re + c.re, im + c.im);\n    }\n    public Complex minus(Complex c) {\n        return new Complex(re - c.re, im - c.im);\n    }\n    public Complex times(Complex c) {\n        return new Complex(re * c.re - im * c.im, re * c.im + im * c.re);\n    }\n    public Complex dividedBy(Complex c) {\n        double tmp = c.re * c.re + c.im * c.im;\n        return new Complex((re * c.re + im * c.im) / tmp, (im * c.re - re * c.im) / tmp);\n    }\n\n    @Override public boolean equals(Object o) {\n        if (o == this)\n            return true;\n        if (!(o instanceof Complex))\n            return false;\n        Complex c = (Complex) o;\n\n        // See page 47 to find out why we use compare instead of ==\n        return Double.compare(c.re, re) == 0 && Double.compare(c.im, im) == 0;\n    }\n\n    @Override public int hashCode() {\n        return 31 * Double.hashCode(re) + Double.hashCode(im);\n    }\n\n    @Override public String toString() {\n        return "(" + re + " + " + im + "i)";\n    }\n}\n')),(0,i.kt)("p",null,"This class represents a complex number (a number with both real and imaginary parts). In addition to the standard Object methods, it provides accessors for the real and imaginary parts and provides the four basic arithmetic operations: addition, subtraction, multiplication, and division. Notice how the arithmetic operations create and return a new Complex instance rather than modifying this instance. This pattern is known as the functional approach because methods return the result of applying a function to their operand, without modifying it. Contrast it to the procedural or imperative approach in which methods apply a procedure to their operand, causing its state to change.Note that the method names are prepositions (such as plus) rather than verbs (such as add). This emphasizes the fact that methods don\u2019t change the values of the objects. The BigInteger and BigDecimal classes did not obey this naming convention, and it led to many usage errors."),(0,i.kt)("p",null,"\u8fd9\u4e2a\u7c7b\u8868\u793a\u4e00\u4e2a\u590d\u6570\uff08\u5305\u542b\u5b9e\u90e8\u548c\u865a\u90e8\u7684\u6570\uff09\u3002\u9664\u4e86\u6807\u51c6\u7684 Object \u65b9\u6cd5\u4e4b\u5916\uff0c\u5b83\u8fd8\u4e3a\u5b9e\u90e8\u548c\u865a\u90e8\u63d0\u4f9b\u8bbf\u95ee\u5668\uff0c\u5e76\u63d0\u4f9b\u56db\u79cd\u57fa\u672c\u7684\u7b97\u672f\u8fd0\u7b97\uff1a\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u548c\u9664\u6cd5\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7b97\u672f\u64cd\u4f5c\u521b\u5efa\u548c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Complex \u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u8fd9\u4e2a\u5b9e\u4f8b\u3002\u8fd9\u79cd\u6a21\u5f0f\u79f0\u4e3a\u51fd\u6570\u5f0f\u65b9\u6cd5\uff0c\u56e0\u4e3a\u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u5c06\u51fd\u6570\u5e94\u7528\u5230\u5176\u64cd\u4f5c\u6570\uff0c\u800c\u4e0d\u662f\u4fee\u6539\u5b83\u3002\u5c06\u5176\u4e0e\u8fc7\u7a0b\u5f0f\u6216\u547d\u4ee4\u5f0f\u65b9\u6cd5\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u65b9\u6cd5\u5c06\u4e00\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u5e94\u7528\u4e8e\u5b83\u4eec\u7684\u64cd\u4f5c\u6570\uff0c\u4ece\u800c\u5bfc\u81f4\u5176\u72b6\u6001\u53d1\u751f\u53d8\u5316\u3002\u6ce8\u610f\uff0c\u65b9\u6cd5\u540d\u662f\u4ecb\u8bcd\uff08\u5982 plus)\uff0c\u800c\u4e0d\u662f\u52a8\u8bcd\uff08\u5982 add)\u3002\u8fd9\u5f3a\u8c03\u4e86\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u65b9\u6cd5\u4e0d\u4f1a\u6539\u53d8\u5bf9\u8c61\u7684\u503c\u3002BigInteger \u548c BigDecimal \u7c7b\u4e0d\u9075\u5b88\u8fd9\u79cd\u547d\u540d\u7ea6\u5b9a\uff0c\u8fd9\u5bfc\u81f4\u4e86\u8bb8\u591a\u4f7f\u7528\u9519\u8bef\u3002"),(0,i.kt)("p",null,"The functional approach may appear unnatural if you\u2019re not familiar with it,but it enables immutability, which has many advantages. ",(0,i.kt)("strong",{parentName:"p"},"Immutable objects are simple.")," An immutable object can be in exactly one state, the state in which it was created. If you make sure that all constructors establish class invariants, then it is guaranteed that these invariants will remain true for all time, with no further effort on your part or on the part of the programmer who uses the class. Mutable objects, on the other hand, can have arbitrarily complex state spaces. If the documentation does not provide a precise description of the state transitions performed by mutator methods, it can be difficult or impossible to use a mutable class reliably."),(0,i.kt)("p",null,"\u5982\u679c\u4e0d\u719f\u6089\u51fd\u6570\u5f0f\u65b9\u6cd5\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u4e0d\u81ea\u7136\uff0c\u4f46\u5b83\u5b9e\u73b0\u4e86\u4e0d\u53d8\u6027\uff0c\u8fd9\u4e48\u505a\u6709\u5f88\u591a\u4f18\u52bf\u3002 ",(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u53ef\u53d8\u5bf9\u8c61\u5f88\u7b80\u5355\u3002")," \u4e0d\u53ef\u53d8\u5bf9\u8c61\u53ef\u4ee5\u4fdd\u6301\u5b83\u88ab\u521b\u5efa\u65f6\u7684\u72b6\u6001\u3002\u5982\u679c\u80fd\u591f\u786e\u4fdd\u6240\u6709\u6784\u9020\u51fd\u6570\u90fd\u5efa\u7acb\u4e86\u7c7b\u4e0d\u53d8\u91cf\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u8fd9\u4e9b\u4e0d\u53d8\u91cf\u5c06\u4e00\u76f4\u4fdd\u6301\uff0c\u800c\u65e0\u9700\u4f60\u6216\u4f7f\u7528\u7c7b\u7684\u7a0b\u5e8f\u5458\u505a\u8fdb\u4e00\u6b65\u7684\u5de5\u4f5c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u53ef\u53d8\u5bf9\u8c61\u53ef\u4ee5\u5177\u6709\u4efb\u610f\u590d\u6742\u7684\u72b6\u6001\u7a7a\u95f4\u3002\u5982\u679c\u6587\u6863\u6ca1\u6709\u63d0\u4f9b\u7531\u4fee\u6539\u5668\u65b9\u6cd5\u6267\u884c\u7684\u72b6\u6001\u8f6c\u6362\u7684\u7cbe\u786e\u63cf\u8ff0\uff0c\u90a3\u4e48\u5c31\u5f88\u96be\u6216\u4e0d\u53ef\u80fd\u53ef\u9760\u5730\u4f7f\u7528\u53ef\u53d8\u7c7b\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Immutable objects are inherently thread-safe; they require no synchronization.")," They cannot be corrupted by multiple threads accessing them concurrently. This is far and away the easiest approach to achieve thread safety.Since no thread can ever observe any effect of another thread on an immutable object, ",(0,i.kt)("strong",{parentName:"p"},"immutable objects can be shared freely.")," Immutable classes should therefore encourage clients to reuse existing instances wherever possible. One easy way to do this is to provide public static final constants for commonly used values. For example, the Complex class might provide these constants:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u53ef\u53d8\u5bf9\u8c61\u672c\u8d28\u4e0a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff1b\u5b83\u4eec\u4e0d\u9700\u8981\u540c\u6b65\u3002")," \u5b83\u4eec\u4e0d\u4f1a\u56e0\u4e3a\u591a\u7ebf\u7a0b\u5e76\u53d1\u8bbf\u95ee\u800c\u635f\u574f\u3002\u8fd9\u65e0\u7591\u662f\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u7531\u4e8e\u4efb\u4f55\u7ebf\u7a0b\u90fd\u65e0\u6cd5\u89c2\u5bdf\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u4e0d\u53ef\u53d8\u5bf9\u8c61\u7684\u4efb\u4f55\u5f71\u54cd\uff0c\u56e0\u6b64 ",(0,i.kt)("strong",{parentName:"p"},"\u53ef\u4ee5\u81ea\u7531\u5171\u4eab\u4e0d\u53ef\u53d8\u5bf9\u8c61\u3002")," \u540c\u65f6\uff0c\u4e0d\u53ef\u53d8\u7c7b\u5e94\u8be5\u9f13\u52b1\u5ba2\u6237\u7aef\u5c3d\u53ef\u80fd\u590d\u7528\u73b0\u6709\u7684\u5b9e\u4f8b\u3002\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4e3a\u5e38\u7528\u503c\u63d0\u4f9b\u516c\u5171\u9759\u6001 final \u5e38\u91cf\u3002\u4f8b\u5982\uff0cComplex \u7c7b\u53ef\u80fd\u63d0\u4f9b\u4ee5\u4e0b\u5e38\u91cf\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public static final Complex ZERO = new Complex(0, 0);\npublic static final Complex ONE = new Complex(1, 0);\npublic static final Complex I = new Complex(0, 1);\n")),(0,i.kt)("p",null,"This approach can be taken one step further. An immutable class can provide static factories (Item 1) that cache frequently requested instances to avoid creating new instances when existing ones would do. All the boxed primitive classes and BigInteger do this. Using such static factories causes clients to share instances instead of creating new ones, reducing memory footprint and garbage collection costs. Opting for static factories in place of public constructors when designing a new class gives you the flexibility to add caching later, without modifying clients."),(0,i.kt)("p",null,"\u8fd9\u79cd\u65b9\u6cd5\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\u3002\u4e0d\u53ef\u53d8\u7c7b\u53ef\u4ee5\u63d0\u4f9b\u9759\u6001\u5de5\u5382\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors"},"Item-1"),"\uff09\uff0c\u8fd9\u4e9b\u5de5\u5382\u7f13\u5b58\u7ecf\u5e38\u8bf7\u6c42\u7684\u5b9e\u4f8b\uff0c\u4ee5\u907f\u514d\u5728\u73b0\u6709\u5b9e\u4f8b\u53ef\u7528\u65f6\u521b\u5efa\u65b0\u5b9e\u4f8b\u3002\u6240\u6709\u5305\u88c5\u7c7b\u548c BigInteger \u90fd\u662f\u8fd9\u6837\u505a\u7684\u3002\u4f7f\u7528\u8fd9\u79cd\u9759\u6001\u5de5\u5382\u4f1a\u5bfc\u81f4\u5ba2\u6237\u7aef\u5171\u4eab\u5b9e\u4f8b\u800c\u4e0d\u662f\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u4ece\u800c\u51cf\u5c11\u5185\u5b58\u5360\u7528\u548c\u5783\u573e\u6536\u96c6\u6210\u672c\u3002\u5728\u8bbe\u8ba1\u65b0\u7c7b\u65f6\uff0c\u9009\u62e9\u9759\u6001\u5de5\u5382\u800c\u4e0d\u662f\u516c\u5171\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u5c06\u4f7f\u4f60\u80fd\u591f\u7075\u6d3b\u5730\u5728\u4ee5\u540e\u6dfb\u52a0\u7f13\u5b58\uff0c\u800c\u65e0\u9700\u4fee\u6539\u5ba2\u6237\u7aef\u3002"),(0,i.kt)("p",null,"A consequence of the fact that immutable objects can be shared freely is that you never have to make defensive copies of them (Item 50). In fact, you never have to make any copies at all because the copies would be forever equivalent to the originals. Therefore, you need not and should not provide a clone method or copy constructor (Item 13) on an immutable class. This was not well understood in the early days of the Java platform, so the String class does have a copy constructor, but it should rarely, if ever, be used (Item 6)."),(0,i.kt)("p",null,"\u4e0d\u53ef\u53d8\u5bf9\u8c61\u53ef\u4ee5\u81ea\u7531\u5171\u4eab\u8fd9\u4e00\u4e8b\u5b9e\u7684\u7ed3\u679c\u4e4b\u4e00\u662f\uff0c\u4f60\u6c38\u8fdc\u4e0d\u9700\u8981\u5bf9\u5b83\u4eec\u8fdb\u884c\u9632\u5fa1\u6027\u7684\u590d\u5236\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-8-Item-50-Make-defensive-copies-when-needed"},"Item-50"),"\uff09\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4f60\u6839\u672c\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u62f7\u8d1d\uff0c\u56e0\u4e3a\u62f7\u8d1d\u5c06\u6c38\u8fdc\u7b49\u540c\u4e8e\u539f\u4ef6\u3002\u56e0\u6b64\uff0c\u4f60\u4e0d\u9700\u8981\u4e5f\u4e0d\u5e94\u8be5\u5728\u4e0d\u53ef\u53d8\u7c7b\u4e0a\u63d0\u4f9b\u514b\u9686\u65b9\u6cd5\u6216\u590d\u5236\u6784\u9020\u51fd\u6570\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-3-Item-13-Override-clone-judiciously"},"Item-13"),"\uff09\u3002\u8fd9\u5728 Java \u5e73\u53f0\u7684\u65e9\u671f\u5e76\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u7406\u89e3\uff0c\u56e0\u6b64 String \u7c7b\u786e\u5b9e\u6709\u4e00\u4e2a\u590d\u5236\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662f\uff0c\u5373\u4f7f\u6709\uff0c\u4e5f\u5e94\u8be5\u5c11\u7528\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-2-Item-6-Avoid-creating-unnecessary-objects"},"Item-6"),"\uff09\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Not only can you share immutable objects, but they can share their internals.")," For example, the BigInteger class uses a sign-magnitude representation internally. The sign is represented by an int, and the magnitude is represented by an int array. The negate method produces a new BigInteger of like magnitude and opposite sign. It does not need to copy the array even though it is mutable; the newly created BigInteger points to the same internal array as the original."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4f60\u4e0d\u4ec5\u53ef\u4ee5\u5171\u4eab\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u800c\u4e14\u53ef\u4ee5\u5171\u4eab\u5b83\u4eec\u7684\u5185\u90e8\u5b9e\u73b0\u3002")," \u4f8b\u5982\uff0cBigInteger \u7c7b\u5728\u5185\u90e8\u4f7f\u7528\u7b26\u53f7\u5927\u5c0f\u6765\u8868\u793a\u3002\u7b26\u53f7\u7531 int \u8868\u793a\uff0c\u5927\u5c0f\u7531 int \u6570\u7ec4\u8868\u793a\u3002negate \u65b9\u6cd5\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 BigInteger\uff0c\u5927\u5c0f\u76f8\u540c\uff0c\u7b26\u53f7\u76f8\u53cd\u3002\u5373\u4f7f\u6570\u7ec4\u662f\u53ef\u53d8\u7684\uff0c\u4e5f\u4e0d\u9700\u8981\u590d\u5236\uff1b\u65b0\u521b\u5efa\u7684 BigInteger \u6307\u5411\u4e0e\u539f\u59cb\u6570\u7ec4\u76f8\u540c\u7684\u5185\u90e8\u6570\u7ec4\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Immutable objects make great building blocks for other objects,")," whether mutable or immutable. It\u2019s much easier to maintain the invariants of a complex object if you know that its component objects will not change underneath it. A special case of this principle is that immutable objects make great map keys and set elements: you don\u2019t have to worry about their values changing once they\u2019re in the map or set, which would destroy the map or set\u2019s invariants."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u53ef\u53d8\u5bf9\u8c61\u53ef\u4ee5\u5f88\u597d\u7684\u4f5c\u4e3a\u5176\u4ed6\u5bf9\u8c61\u7684\u6784\u5efa\u6a21\u5757\uff0c")," \u65e0\u8bba\u662f\u53ef\u53d8\u7684\u8fd8\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u5982\u679c\u77e5\u9053\u590d\u6742\u5bf9\u8c61\u7684\u7ec4\u4ef6\u5bf9\u8c61\u4e0d\u4f1a\u5728\u5176\u5185\u90e8\u53d1\u751f\u66f4\u6539\uff0c\u90a3\u4e48\u7ef4\u62a4\u590d\u6742\u5bf9\u8c61\u7684\u4e0d\u53d8\u6027\u5c31\u4f1a\u5bb9\u6613\u5f97\u591a\u3002\u8fd9\u4e2a\u539f\u5219\u7684\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u662f\uff0c\u4e0d\u53ef\u53d8\u5bf9\u8c61\u5f88\u5408\u9002\u4f5c\u4e3a Map \u7684\u952e\u548c Set \u7684\u5143\u7d20\uff1a\u4f60\u4e0d\u5fc5\u62c5\u5fc3\u5b83\u4eec\u7684\u503c\u5728 Map \u6216 Set \u4e2d\u53d1\u751f\u53d8\u5316\uff0c\u4ece\u800c\u7834\u574f Map \u6216 Set \u7684\u4e0d\u53d8\u6027\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Immutable objects provide failure atomicity for free")," (Item 76). Their state never changes, so there is no possibility of a temporary inconsistency."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u53ef\u53d8\u5bf9\u8c61\u81ea\u5e26\u63d0\u4f9b\u6545\u969c\u539f\u5b50\u6027"),"\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity"},"Item-76"),"\uff09\u3002\u4ed6\u4eec\u7684\u72b6\u6001\u4ece\u672a\u6539\u53d8\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u51fa\u73b0\u6682\u65f6\u7684\u4e0d\u4e00\u81f4\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"The major disadvantage of immutable classes is that they require a separate object for each distinct value.")," Creating these objects can be costly,especially if they are large. For example, suppose that you have a million-bit BigInteger and you want to change its low-order bit:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u53ef\u53d8\u7c7b\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\u6bcf\u4e2a\u4e0d\u540c\u7684\u503c\u90fd\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684\u5bf9\u8c61\u3002")," \u521b\u5efa\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6210\u672c\u53ef\u80fd\u5f88\u9ad8\uff0c\u5c24\u5176\u662f\u5bf9\u8c61\u5f88\u5927\u7684\u65f6\u5019\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u767e\u4e07\u4f4d\u7684 BigInteger\uff0c\u4f60\u60f3\u6539\u53d8\u5b83\u7684\u4f4e\u9636\u4f4d\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"BigInteger moby = ...;\nmoby = moby.flipBit(0);\n")),(0,i.kt)("p",null,"The flipBit method creates a new BigInteger instance, also a million bits long, that differs from the original in only one bit. The operation requires time and space proportional to the size of the BigInteger. Contrast this to java.util.BitSet. Like BigInteger, BitSet represents an arbitrarily long sequence of bits, but unlike BigInteger, BitSet is mutable. The BitSet class provides a method that allows you to change the state of a single bit of a million-bit instance in constant time:"),(0,i.kt)("p",null,"flipBit \u65b9\u6cd5\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684 BigInteger \u5b9e\u4f8b\uff0c\u4e5f\u6709\u767e\u4e07\u4f4d\u957f\uff0c\u53ea\u5728\u4e00\u4e2a\u6bd4\u7279\u4e0a\u4e0e\u539f\u59cb\u7684\u4e0d\u540c\u3002\u8be5\u64cd\u4f5c\u9700\u8981\u4e0e BigInteger \u7684\u5927\u5c0f\u6210\u6bd4\u4f8b\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u3002\u4e0e ",(0,i.kt)("inlineCode",{parentName:"p"},"java.util.BitSet")," \u5f62\u6210\u5bf9\u6bd4\u3002\u4e0e BigInteger \u4e00\u6837\uff0cBitSet \u8868\u793a\u4efb\u610f\u957f\u7684\u4f4d\u5e8f\u5217\uff0c\u4f46\u4e0e BigInteger \u4e0d\u540c\uff0cBitSet \u662f\u53ef\u53d8\u7684\u3002BitSet \u7c7b\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5728\u56fa\u5b9a\u7684\u65f6\u95f4\u5185\u6539\u53d8\u767e\u4e07\u4f4d\u5b9e\u4f8b\u7684\u5355\u4e2a\u4f4d\u7684\u72b6\u6001\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"BitSet moby = ...;\nmoby.flip(0);\n")),(0,i.kt)("p",null,"The performance problem is magnified if you perform a multistep operation that generates a new object at every step, eventually discarding all objects except the final result. There are two approaches to coping with this problem. The first is to guess which multistep operations will be commonly required and to provide them as primitives. If a multistep operation is provided as a primitive, the immutable class does not have to create a separate object at each step. Internally,the immutable class can be arbitrarily clever. For example, BigInteger has a package-private mutable \u201ccompanion class\u201d that it uses to speed up multistep operations such as modular exponentiation. It is much harder to use the mutable companion class than to use BigInteger, for all of the reasons outlined earlier. Luckily, you don\u2019t have to use it: the implementors of BigInteger did the hard work for you."),(0,i.kt)("p",null,"\u5982\u679c\u6267\u884c\u591a\u6b65\u64cd\u4f5c\uff0c\u5728\u6bcf\u4e00\u6b65\u751f\u6210\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u6700\u7ec8\u4e22\u5f03\u9664\u6700\u7ec8\u7ed3\u679c\u4e4b\u5916\u7684\u6240\u6709\u5bf9\u8c61\uff0c\u90a3\u4e48\u6027\u80fd\u95ee\u9898\u5c31\u4f1a\u88ab\u653e\u5927\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u731c\u6d4b\u901a\u5e38\u9700\u8981\u54ea\u4e9b\u591a\u6b65\u64cd\u4f5c\uff0c\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u63d0\u4f9b\u3002\u5982\u679c\u5c06\u591a\u6b65\u64cd\u4f5c\u4f5c\u4e3a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u63d0\u4f9b\uff0c\u5219\u4e0d\u53ef\u53d8\u7c7b\u4e0d\u5fc5\u5728\u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u521b\u5efa\u5355\u72ec\u7684\u5bf9\u8c61\u3002\u5728\u5185\u90e8\uff0c\u4e0d\u53ef\u53d8\u7c7b\u53ef\u4ee5\u4efb\u610f\u806a\u660e\u3002\u4f8b\u5982\uff0cBigInteger \u6709\u4e00\u4e2a\u5305\u79c1\u6709\u7684\u53ef\u53d8\u300c\u4f34\u968f\u7c7b\u300d\uff0c\u5b83\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u6765\u52a0\u901f\u591a\u6b65\u64cd\u4f5c\uff0c\u6bd4\u5982\u6a21\u5757\u5316\u6c42\u5e42\u3002\u7531\u4e8e\u524d\u9762\u5217\u51fa\u7684\u6240\u6709\u539f\u56e0\uff0c\u4f7f\u7528\u53ef\u53d8\u4f34\u968f\u7c7b\u8981\u6bd4\u4f7f\u7528 BigInteger \u96be\u5f97\u591a\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4f60\u4e0d\u5fc5\u4f7f\u7528\u5b83\uff1aBigInteger \u7684\u5b9e\u73b0\u8005\u4e3a\u4f60\u505a\u4e86\u8270\u82e6\u7684\u5de5\u4f5c\u3002"),(0,i.kt)("p",null,"The package-private mutable companion class approach works fine if you can accurately predict which complex operations clients will want to perform on your immutable class. If not, then your best bet is to provide a public mutable companion class. The main example of this approach in the Java platform libraries is the String class, whose mutable companion is StringBuilder (and its obsolete predecessor, StringBuffer)."),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u80fd\u591f\u51c6\u786e\u5730\u9884\u6d4b\u5ba2\u6237\u7aef\u5e0c\u671b\u5728\u4e0d\u53ef\u53d8\u7c7b\u4e0a\u6267\u884c\u54ea\u4e9b\u590d\u6742\u64cd\u4f5c\uff0c\u90a3\u4e48\u5305\u79c1\u6709\u53ef\u53d8\u4f34\u968f\u7c7b\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5f88\u597d\u5730\u5de5\u4f5c\u3002\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48\u4f60\u6700\u597d\u7684\u9009\u62e9\u5c31\u662f\u63d0\u4f9b\u4e00\u4e2a\u516c\u5171\u53ef\u53d8\u4f34\u968f\u7c7b\u3002\u8fd9\u79cd\u65b9\u6cd5\u5728 Java \u5e93\u4e2d\u7684\u4e3b\u8981\u793a\u4f8b\u662f String \u7c7b\uff0c\u5b83\u7684\u53ef\u53d8\u4f34\u968f\u7c7b\u662f StringBuilder\uff08\u53ca\u5176\u8fc7\u65f6\u7684\u524d\u8eab StringBuffer)\u3002"),(0,i.kt)("p",null,"Now that you know how to make an immutable class and you understand the pros and cons of immutability, let\u2019s discuss a few design alternatives. Recall that to guarantee immutability, a class must not permit itself to be subclassed. This can be done by making the class final, but there is another, more flexible alternative. Instead of making an immutable class final, you can make all of its constructors private or package-private and add public static factories in place of the public constructors (Item 1). To make this concrete, here\u2019s how Complex would look if you took this approach:"),(0,i.kt)("p",null,"\u65e2\u7136\u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\u5982\u4f55\u521b\u5efa\u4e0d\u53ef\u53d8\u7c7b\uff0c\u5e76\u4e14\u4e86\u89e3\u4e86\u4e0d\u53ef\u53d8\u6027\u7684\u4f18\u7f3a\u70b9\uff0c\u90a3\u4e48\u8ba9\u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e9b\u8bbe\u8ba1\u65b9\u6848\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u4e0d\u53d8\u6027\uff0c\u7c7b\u4e0d\u5141\u8bb8\u81ea\u5df1\u88ab\u5b50\u7c7b\u5316\u3002\u53ef\u4ee5\u7528 final \u4fee\u9970\u4ee5\u8fbe\u5230\u76ee\u7684\uff0c\u4f46\u662f\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u66f4\u7075\u6d3b\u7684\u9009\u62e9\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u6240\u6709\u6784\u9020\u51fd\u6570\u53d8\u4e3a\u79c1\u6709\u6216\u5305\u79c1\u6709\uff0c\u5e76\u4f7f\u7528\u516c\u5171\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u6765\u4ee3\u66ff\u516c\u5171\u7684\u6784\u9020\u51fd\u6570\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors"},"Item-1"),"\uff09\u3002Complex \u7c7b\u91c7\u7528\u8fd9\u79cd\u65b9\u5f0f\u4fee\u6539\u540e\u5982\u4e0b\u6240\u793a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Immutable class with static factories instead of constructors\npublic class Complex {\n    private final double re;\n    private final double im;\n    private Complex(double re, double im) {\n        this.re = re;\n        this.im = im;\n    }\n    public static Complex valueOf(double re, double im) {\n        return new Complex(re, im);\n    }\n    ... // Remainder unchanged\n}\n")),(0,i.kt)("p",null,"This approach is often the best alternative. It is the most flexible because it allows the use of multiple package-private implementation classes. To its clients that reside outside its package, the immutable class is effectively final because it is impossible to extend a class that comes from another package and that lacks a public or protected constructor. Besides allowing the flexibility of multiple implementation classes, this approach makes it possible to tune the performance of the class in subsequent releases by improving the object-caching capabilities of the static factories."),(0,i.kt)("p",null,"\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u662f\u6700\u597d\u7684\u9009\u62e9\u3002\u5b83\u662f\u6700\u7075\u6d3b\u7684\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u4f7f\u7528\u591a\u4e2a\u5305\u79c1\u6709\u5b9e\u73b0\u7c7b\u3002\u5bf9\u4e8e\u9a7b\u7559\u5728\u5305\u4e4b\u5916\u7684\u5ba2\u6237\u7aef\u800c\u8a00\uff0c\u4e0d\u53ef\u53d8\u7c7b\u5b9e\u9645\u4e0a\u662f final \u7c7b\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u7ee7\u627f\u81ea\u53e6\u4e00\u4e2a\u5305\u7684\u7c7b\uff0c\u56e0\u4e3a\u5b83\u7f3a\u5c11\u516c\u5171\u6216\u53d7\u4fdd\u62a4\u7684\u6784\u9020\u51fd\u6570\u3002\u9664\u4e86\u5141\u8bb8\u591a\u5b9e\u73b0\u7c7b\u7684\u7075\u6d3b\u6027\u4e4b\u5916\uff0c\u8fd9\u79cd\u65b9\u6cd5\u8fd8\u901a\u8fc7\u6539\u8fdb\u9759\u6001\u5de5\u5382\u7684\u5bf9\u8c61\u7f13\u5b58\u529f\u80fd\uff0c\u4f7f\u5f97\u540e\u7eed\u7248\u672c\u4e2d\u8c03\u4f18\u8be5\u7c7b\u7684\u6027\u80fd\u6210\u4e3a\u53ef\u80fd\u3002"),(0,i.kt)("p",null,"It was not widely understood that immutable classes had to be effectively final when BigInteger and BigDecimal were written, so all of their methods may be overridden. Unfortunately, this could not be corrected after the fact while preserving backward compatibility. If you write a class whose security depends on the immutability of a BigInteger or BigDecimal argument from an untrusted client, you must check to see that the argument is a \u201creal\u201d BigInteger or BigDecimal, rather than an instance of an untrusted subclass. If it is the latter, you must defensively copy it under the assumption that it might be mutable (Item 50):"),(0,i.kt)("p",null,"\u5f53\u7f16\u5199 BigInteger \u548c BigDecimal \u65f6\uff0c\u4e0d\u53ef\u53d8\u7c7b\u5fc5\u987b\u662f\u6709\u6548\u7684 final \u8fd9\u4e00\u70b9\u6ca1\u6709\u88ab\u5e7f\u6cdb\u7406\u89e3\uff0c\u56e0\u6b64\u5b83\u4eec\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u53ef\u80fd\u88ab\u91cd\u5199\u3002\u9057\u61be\u7684\u662f\uff0c\u5728\u4fdd\u7559\u5411\u540e\u517c\u5bb9\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u95ee\u9898\u65e0\u6cd5\u5f97\u5230\u7ea0\u6b63\u3002\u5982\u679c\u4f60\u7f16\u5199\u7684\u7c7b\u7684\u5b89\u5168\u6027\u4f9d\u8d56\u4e8e\u6765\u81ea\u4e0d\u53d7\u4fe1\u4efb\u5ba2\u6237\u7aef\u7684 BigInteger \u6216 BigDecimal \u53c2\u6570\u7684\u4e0d\u53ef\u53d8\u6027\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u68c0\u67e5\u8be5\u53c2\u6570\u662f\u5426\u662f\u300c\u771f\u6b63\u7684\u300dBigInteger \u6216 BigDecimal\uff0c\u800c\u4e0d\u662f\u4e0d\u53d7\u4fe1\u4efb\u7684\u5b50\u7c7b\u5b9e\u4f8b\u3002\u5982\u679c\u662f\u540e\u8005\uff0c\u4f60\u5fc5\u987b\u9632\u5fa1\u6027\u7684\u590d\u5236\u5b83\uff0c\u5047\u8bbe\u5b83\u53ef\u80fd\u662f\u53ef\u53d8\u7684\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-8-Item-50-Make-defensive-copies-when-needed"},"Item-50"),"\uff09:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public static BigInteger safeInstance(BigInteger val) {\nreturn val.getClass() == BigInteger.class ?\nval : new BigInteger(val.toByteArray());\n}\n")),(0,i.kt)("p",null,"The list of rules for immutable classes at the beginning of this item says that no methods may modify the object and that all its fields must be final. In fact these rules are a bit stronger than necessary and can be relaxed to improve performance. In truth, no method may produce an externally visible change in the object\u2019s state. However, some immutable classes have one or more nonfinal fields in which they cache the results of expensive computations the first time they are needed. If the same value is requested again, the cached value is returned, saving the cost of recalculation. This trick works precisely because the object is immutable, which guarantees that the computation would yield the same result if it were repeated."),(0,i.kt)("p",null,"\u8fd9\u4e2a\u6761\u76ee\u5f00\u5934\u7684\u4e0d\u53ef\u53d8\u7c7b\u7684\u89c4\u5219\u5217\u8868\u6307\u51fa\uff0c\u6ca1\u6709\u65b9\u6cd5\u53ef\u4ee5\u4fee\u6539\u5bf9\u8c61\uff0c\u5b83\u7684\u6240\u6709\u5b57\u6bb5\u5fc5\u987b\u662f final \u7684\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u89c4\u5219\u8fc7\u4e8e\u4e25\u683c\uff0c\u53ef\u4ee5\u9002\u5f53\u653e\u677e\u6765\u63d0\u9ad8\u6027\u80fd\u3002\u5b9e\u9645\u4e0a\uff0c\u4efb\u4f55\u65b9\u6cd5\u90fd\u4e0d\u80fd\u5728\u5bf9\u8c61\u7684\u72b6\u6001\u4e2d\u4ea7\u751f\u5916\u90e8\u53ef\u89c1\u7684\u66f4\u6539\u3002\u7136\u800c\uff0c\u4e00\u4e9b\u4e0d\u53ef\u53d8\u7c7b\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u975e final \u5b57\u6bb5\uff0c\u5b83\u4eec\u5728\u7b2c\u4e00\u6b21\u9700\u8981\u8fd9\u4e9b\u5b57\u6bb5\u65f6\uff0c\u5c31\u4f1a\u5728\u5176\u4e2d\u7f13\u5b58\u6602\u8d35\u8ba1\u7b97\u7684\u7ed3\u679c\u3002\u5982\u679c\u518d\u6b21\u8bf7\u6c42\u76f8\u540c\u7684\u503c\uff0c\u5219\u8fd4\u56de\u7f13\u5b58\u7684\u503c\uff0c\u4ece\u800c\u8282\u7701\u4e86\u91cd\u65b0\u8ba1\u7b97\u7684\u6210\u672c\u3002\u8fd9\u4e2a\u6280\u5de7\u4e4b\u6240\u4ee5\u6709\u6548\uff0c\u662f\u56e0\u4e3a\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u91cd\u590d\u8ba1\u7b97\u4f1a\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u3002"),(0,i.kt)("p",null,"For example, PhoneNumber\u2019s hashCode method (Item 11, page 53) computes the hash code the first time it\u2019s invoked and caches it in case it\u2019s invoked again. This technique, an example of lazy initialization (Item 83), is also used by String."),(0,i.kt)("p",null,"\u4f8b\u5982\uff0cPhoneNumber \u7684 hashCode \u65b9\u6cd5(",(0,i.kt)("a",{parentName:"p",href:"./Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals"},"Item-11"),"\uff0c\u7b2c 53 \u9875\uff09\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u8ba1\u7b97\u54c8\u5e0c\u4ee3\u7801\uff0c\u5e76\u7f13\u5b58\u5b83\uff0c\u4ee5\u5907\u518d\u6b21\u8c03\u7528\u3002\u8fd9\u4e2a\u6280\u672f\u662f\u4e00\u4e2a\u5ef6\u8fdf\u521d\u59cb\u5316\u7684\u4f8b\u5b50\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-11/Chapter-11-Item-83-Use-lazy-initialization-judiciously"},"Item-83"),"\uff09\uff0cString \u4e5f\u4f7f\u7528\u8fd9\u4e2a\u6280\u672f\u3002"),(0,i.kt)("p",null,"One caveat should be added concerning serializability. If you choose to have your immutable class implement Serializable and it contains one or more fields that refer to mutable objects, you must provide an explicit readObject or readResolve method, or use the ObjectOutputStream.writeUnshared and ObjectInputStream.readUnshared methods, even if the default serialized form is acceptable. Otherwise an attacker could create a mutable instance of your class. This topic is covered in detail in Item 88."),(0,i.kt)("p",null,"\u5173\u4e8e\u53ef\u5e8f\u5217\u5316\u6027\uff0c\u5e94\u8be5\u63d0\u51fa\u4e00\u4e2a\u8b66\u544a\u3002\u5982\u679c\u4f60\u9009\u62e9\u8ba9\u4e0d\u53ef\u53d8\u7c7b\u5b9e\u73b0 Serializable\uff0c\u5e76\u4e14\u8be5\u7c7b\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5f15\u7528\u53ef\u53d8\u5bf9\u8c61\u7684\u5b57\u6bb5\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a\u663e\u5f0f\u7684 readObject \u6216 readResolve \u65b9\u6cd5\uff0c\u6216\u8005\u4f7f\u7528 ObjectOutputStream.writeUnshared \u6216 ObjectInputStream.readUnshared \u65b9\u6cd5\uff0c\u5373\u4f7f\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u5426\u5219\u653b\u51fb\u8005\u53ef\u80fd\u521b\u5efa\u7c7b\u7684\u53ef\u53d8\u5b9e\u4f8b\u3002",(0,i.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"},"Item-88"),"\u8be6\u7ec6\u8ba8\u8bba\u4e86\u8fd9\u4e2a\u4e3b\u9898\u3002"),(0,i.kt)("p",null,"To summarize, resist the urge to write a setter for every getter. ",(0,i.kt)("strong",{parentName:"p"},"Classes should be immutable unless there\u2019s a very good reason to make them mutable.")," Immutable classes provide many advantages, and their only disadvantage is the potential for performance problems under certain circumstances. You should always make small value objects, such as PhoneNumber and Complex, immutable. (There are several classes in the Java platform libraries, such as java.util.Date and java.awt.Point, that should have been immutable but aren\u2019t.) You should seriously consider making larger value objects, such as String and BigInteger, immutable as well. You should provide a public mutable companion class for your immutable class only once you\u2019ve confirmed that it\u2019s necessary to achieve satisfactory performance (Item 67)."),(0,i.kt)("p",null,"\u603b\u800c\u8a00\u4e4b\uff0c\u4e0d\u8981\u6025\u4e8e\u4e3a\u6bcf\u4e2a getter \u90fd\u7f16\u5199 setter\u3002",(0,i.kt)("strong",{parentName:"p"},"\u7c7b\u5e94\u8be5\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u9664\u975e\u6709\u5f88\u597d\u7684\u7406\u7531\u8ba9\u5b83\u4eec\u53ef\u53d8\u3002")," \u4e0d\u53ef\u53d8\u7c7b\u63d0\u4f9b\u4e86\u8bb8\u591a\u4f18\u70b9\uff0c\u5b83\u4eec\u552f\u4e00\u7684\u7f3a\u70b9\u662f\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u51fa\u73b0\u6027\u80fd\u95ee\u9898\u3002\u4f60\u5e94\u8be5\u59cb\u7ec8\u4f7f\u5c0f\u7684\u503c\u5bf9\u8c61\uff08\u5982 PhoneNumber \u548c Complex\uff09\u6210\u4e3a\u4e0d\u53ef\u53d8\u7684\u3002\uff08Java \u5e93\u4e2d\u6709\u51e0\u4e2a\u7c7b\uff0c\u6bd4\u5982 ",(0,i.kt)("inlineCode",{parentName:"p"},"java.util.Date")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"java.awt.Point"),"\uff0c\u5e94\u8be5\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff0c\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\uff09\u4e5f\u5e94\u8be5\u8ba4\u771f\u8003\u8651\u5c06\u8f83\u5927\u7684\u503c\u5bf9\u8c61\uff08\u5982 String \u548c BigInteger\uff09\u8bbe\u7f6e\u4e3a\u4e0d\u53ef\u53d8\u7684\u3002\u53ea\u6709\u786e\u8ba4\u4e86\u5b9e\u73b0\u4ee4\u4eba\u6ee1\u610f\u7684\u6027\u80fd\u662f\u5fc5\u8981\u7684\uff0c\u624d\u5e94\u8be5\u4e3a\u4e0d\u53ef\u53d8\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u516c\u5171\u53ef\u53d8\u4f34\u968f\u7c7b\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-9-Item-67-Optimize-judiciously"},"Item-67"),"\uff09\u3002"),(0,i.kt)("p",null,"There are some classes for which immutability is impractical. ",(0,i.kt)("strong",{parentName:"p"},"If a class cannot be made immutable, limit its mutability as much as possible.")," Reducing the number of states in which an object can exist makes it easier to reason about the object and reduces the likelihood of errors. Therefore, make every field final unless there is a compelling reason to make it nonfinal. Combining the advice of this item with that of Item 15, your natural inclination should be to ",(0,i.kt)("strong",{parentName:"p"},"declare every field private final unless there\u2019s a good reason to do otherwise.")),(0,i.kt)("p",null,"\u5bf9\u4e8e\u67d0\u4e9b\u7c7b\u6765\u8bf4\uff0c\u4e0d\u53d8\u6027\u662f\u4e0d\u5207\u5b9e\u9645\u7684\u3002",(0,i.kt)("strong",{parentName:"p"},"\u5982\u679c\u4e00\u4e2a\u7c7b\u4e0d\u80fd\u6210\u4e3a\u4e0d\u53ef\u53d8\u7684\uff0c\u90a3\u4e48\u5c31\u5c3d\u53ef\u80fd\u5730\u9650\u5236\u5b83\u7684\u53ef\u53d8\u6027\u3002")," \u51cf\u5c11\u5bf9\u8c61\u53ef\u80fd\u5b58\u5728\u7684\u72b6\u6001\u6570\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730 reason about the object \u5e76\u51cf\u5c11\u51fa\u9519\u7684\u53ef\u80fd\u6027\u3002\u56e0\u6b64\uff0c\u9664\u975e\u6709\u4ee4\u4eba\u4fe1\u670d\u7684\u7406\u7531\uff0c\u5426\u5219\u6bcf\u4e2a\u5b57\u6bb5\u90fd\u5e94\u8be5\u7528 final \u4fee\u9970\u3002\u5c06\u672c\u6761\u76ee\u7684\u5efa\u8bae\u4e0e Item-15 \u7684\u5efa\u8bae\u7ed3\u5408\u8d77\u6765\uff0c\u4f60\u81ea\u7136\u4f1a\u503e\u5411\u4e8e ",(0,i.kt)("strong",{parentName:"p"},"\u58f0\u660e\u6bcf\u4e2a\u5b57\u6bb5\u4e3a\u79c1\u6709 final\uff0c\u9664\u975e\u6709\u5f88\u597d\u7684\u7406\u7531\u4e0d\u8fd9\u6837\u505a\u3002")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constructors should create fully initialized objects with all of their invariants established.")," Don\u2019t provide a public initialization method separate from the constructor or static factory unless there is a compelling reason to do so. Similarly, don\u2019t provide a \u201creinitialize\u201d method that enables an object to be reused as if it had been constructed with a different initial state. Such methods generally provide little if any performance benefit at the expense of increased complexity."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6784\u9020\u51fd\u6570\u5e94\u8be5\u521b\u5efa\u5b8c\u5168\u521d\u59cb\u5316\u7684\u5bf9\u8c61\uff0c\u5e76\u5efa\u7acb\u6240\u6709\u7684\u4e0d\u53d8\u91cf\u3002")," \u9664\u975e\u6709\u5145\u5206\u7684\u7406\u7531\uff0c\u5426\u5219\u4e0d\u8981\u63d0\u4f9b\u4e0e\u6784\u9020\u51fd\u6570\u6216\u9759\u6001\u5de5\u5382\u5206\u79bb\u7684\u516c\u5171\u521d\u59cb\u5316\u65b9\u6cd5\u3002\u7c7b\u4f3c\u5730\uff0c\u4e0d\u8981\u63d0\u4f9b\u300c\u91cd\u65b0\u521d\u59cb\u5316\u300d\u7684\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5141\u8bb8\u590d\u7528\u5bf9\u8c61\uff0c\u5c31\u597d\u50cf\u5b83\u662f\u7528\u4e0d\u540c\u7684\u521d\u59cb\u72b6\u6001\u6784\u9020\u7684\u4e00\u6837\u3002\u8fd9\u4e9b\u65b9\u6cd5\u901a\u5e38\u53ea\u63d0\u4f9b\u5f88\u5c11\u7684\u6027\u80fd\u6536\u76ca\uff0c\u800c\u4ee3\u4ef7\u662f\u589e\u52a0\u4e86\u590d\u6742\u6027\u3002"),(0,i.kt)("p",null,"The CountDownLatch class exemplifies these principles. It is mutable, but its state space is kept intentionally small. You create an instance, use it once, and it\u2019s done: once the countdown latch\u2019s count has reached zero, you may not reuse it."),(0,i.kt)("p",null,"CountDownLatch \u7c7b\u4f53\u73b0\u4e86\u8fd9\u4e9b\u539f\u5219\u3002\u5b83\u662f\u53ef\u53d8\u7684\uff0c\u4f46\u662f\u5b83\u7684\u72b6\u6001\u7a7a\u95f4\u6545\u610f\u4fdd\u6301\u5f88\u5c0f\u3002\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u4f7f\u7528\u5b83\u4e00\u6b21\uff0c\u5b83\u5c31\u5b8c\u6210\u4e86\u4f7f\u547d\uff1a\u4e00\u65e6\u5012\u8ba1\u65f6\u9501\u5b58\u5668\u7684\u8ba1\u6570\u8fbe\u5230\u96f6\uff0c\u4f60\u53ef\u80fd\u4e0d\u4f1a\u590d\u7528\u5b83\u3002"),(0,i.kt)("p",null,"A final note should be added concerning the Complex class in this item. This example was meant only to illustrate immutability. It is not an industrial-strength complex number implementation. It uses the standard formulas for complex multiplication and division, which are not correctly rounded and provide poor semantics for complex NaNs and infinities ","[Kahan91, Smith62, Thomas94]","."),(0,i.kt)("p",null,"\u5173\u4e8e\u672c\u6761\u76ee\u4e2d Complex \u7c7b\u7684\u6700\u540e\u4e00\u70b9\u9700\u8981\u8865\u5145\u7684\u8bf4\u660e\u3002\u8fd9\u4e2a\u4f8b\u5b50\u53ea\u662f\u4e3a\u4e86\u8bf4\u660e\u4e0d\u53d8\u6027\u3002\u5b83\u4e0d\u662f\u4e00\u4e2a\u5de5\u4e1a\u7ea7\u5f3a\u5ea6\u7684\u590d\u6570\u5b9e\u73b0\u3002\u5b83\u4f7f\u7528\u4e86\u590d\u6742\u4e58\u6cd5\u548c\u9664\u6cd5\u7684\u6807\u51c6\u516c\u5f0f\uff0c\u8fd9\u4e9b\u516c\u5f0f\u6ca1\u6709\u88ab\u6b63\u786e\u5730\u56db\u820d\u4e94\u5165\uff0c\u5e76\u4e14\u4e3a\u590d\u6742\u7684 NaNs \u548c infinities \u63d0\u4f9b\u4e86\u7cdf\u7cd5\u7684\u8bed\u4e49 ","[Kahan91, Smith62, Thomas94]","\u3002"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"./Chapter-4-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,i.kt)("a",{parentName:"strong",href:"./Chapter-4-Item-16-In-public-classes-use-accessor-methods-not-public-fields"},"Item 16: In public classes use accessor methods not public fields\uff08\u5728\u516c\u5171\u7c7b\u4e2d\uff0c\u4f7f\u7528\u8bbf\u95ee\u5668\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u516c\u5171\u5b57\u6bb5\uff09"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,i.kt)("a",{parentName:"strong",href:"./Chapter-4-Item-18-Favor-composition-over-inheritance"},"Item 18: Favor composition over inheritance\uff08\u4f18\u5148\u9009\u62e9\u590d\u5408\u800c\u4e0d\u662f\u7ee7\u627f\uff09")))))}p.isMDXComponent=!0}}]);