"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1299],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>p});var o=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=o.createContext({}),l=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),p=a,f=d["".concat(c,".").concat(p)]||d[p]||h[p]||n;return r?o.createElement(f,i(i({ref:t},u),{},{components:r})):o.createElement(f,i({ref:t},u))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<n;l++)i[l]=r[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3493:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var o=r(7462),a=(r(7294),r(3905));const n={},i=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads",id:"Books/EffectiveJava3/Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads",title:"Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads",description:"Chapter 11. Concurrency\uff08\u5e76\u53d1\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads.md",sourceDirName:"Books/EffectiveJava3/Chapter-11",slug:"/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads",permalink:"/docs/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-11-Item-79-Avoid-excessive-synchronization",permalink:"/docs/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-79-Avoid-excessive-synchronization"},next:{title:"Chapter-11-Item-81-Prefer-concurrency-utilities-to-wait-and-notify",permalink:"/docs/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-81-Prefer-concurrency-utilities-to-wait-and-notify"}},c={},l=[{value:"Chapter 11. Concurrency\uff08\u5e76\u53d1\uff09",id:"chapter-11-concurrency\u5e76\u53d1",level:2},{value:"Item 80: Prefer executors, tasks, and streams to threads\uff08Executor\u3001task\u3001\u6d41\u4f18\u4e8e\u76f4\u63a5\u4f7f\u7528\u7ebf\u7a0b\uff09",id:"item-80-prefer-executors-tasks-and-streams-to-threadsexecutortask\u6d41\u4f18\u4e8e\u76f4\u63a5\u4f7f\u7528\u7ebf\u7a0b",level:3}],u={toc:l};function h(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"chapter-11-concurrency\u5e76\u53d1"},"Chapter 11. Concurrency\uff08\u5e76\u53d1\uff09"),(0,a.kt)("h3",{id:"item-80-prefer-executors-tasks-and-streams-to-threadsexecutortask\u6d41\u4f18\u4e8e\u76f4\u63a5\u4f7f\u7528\u7ebf\u7a0b"},"Item 80: Prefer executors, tasks, and streams to threads\uff08Executor\u3001task\u3001\u6d41\u4f18\u4e8e\u76f4\u63a5\u4f7f\u7528\u7ebf\u7a0b\uff09"),(0,a.kt)("p",null,"The first edition of this book contained code for a simple work queue ","[Bloch01, Item 49]",". This class allowed clients to enqueue work for asynchronous processing by a background thread. When the work queue was no longer needed, the client could invoke a method to ask the background thread to terminate itself gracefully after completing any work that was already on the queue. The implementation was little more than a toy, but even so, it required a full page of subtle, delicate code, of the sort that is prone to safety and liveness failures if you don\u2019t get it just right. Luckily, there is no reason to write this sort of code anymore."),(0,a.kt)("p",null,"\u672c\u4e66\u7684\u7b2c\u4e00\u7248\u5305\u542b\u4e00\u4e2a\u7b80\u5355\u5de5\u4f5c\u961f\u5217\u7684\u4ee3\u7801 ","[Bloch01, Item 49]","\u3002\u8fd9\u4e2a\u7c7b\u5141\u8bb8\u5ba2\u6237\u7aef\u901a\u8fc7\u540e\u53f0\u7ebf\u7a0b\u4e3a\u5f02\u6b65\u5904\u7406\u6392\u961f\u3002\u5f53\u4e0d\u518d\u9700\u8981\u5de5\u4f5c\u961f\u5217\u65f6\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8981\u6c42\u540e\u53f0\u7ebf\u7a0b\u5728\u5b8c\u6210\u961f\u5217\u4e0a\u7684\u4efb\u4f55\u5de5\u4f5c\u540e\u4f18\u96c5\u5730\u7ec8\u6b62\u81ea\u5df1\u3002\u8fd9\u4e2a\u5b9e\u73b0\u53ea\u4e0d\u8fc7\u662f\u4e00\u4e2a\u73a9\u5177\uff0c\u4f46\u5373\u4fbf\u5982\u6b64\uff0c\u5b83\u4e5f\u9700\u8981\u4e00\u6574\u9875\u7684\u4ee3\u7801\uff0c\u5982\u679c\u4f60\u505a\u5f97\u4e0d\u5bf9\uff0c\u5c31\u5f88\u5bb9\u6613\u51fa\u73b0\u5b89\u5168\u548c\u6d3b\u6027\u5931\u8d25\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6ca1\u6709\u7406\u7531\u518d\u7f16\u5199\u8fd9\u79cd\u4ee3\u7801\u4e86\u3002"),(0,a.kt)("p",null,"By the time the second edition of this book came out, java.util.concurrent had been added to Java. This package contains an Executor Framework, which is a flexible interface-based task execution facility. Creating a work queue that is better in every way than the one in the first edition of this book requires but a single line of code:"),(0,a.kt)("p",null,"\u5f53\u8fd9\u672c\u4e66\u7684\u7b2c\u4e8c\u7248\u51fa\u7248\u65f6\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"java.util.concurrent")," \u5df2\u7ecf\u6dfb\u52a0\u5230 Java \u4e2d\u3002\u8fd9\u4e2a\u5305\u6709\u4e00\u4e2a Executor \u6846\u67b6\uff0c\u5b83\u662f\u4e00\u4e2a\u7075\u6d3b\u7684\u57fa\u4e8e\u63a5\u53e3\u7684\u4efb\u52a1\u6267\u884c\u5de5\u5177\u3002\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u961f\u5217\uff0c\u5b83\u5728\u4efb\u4f55\u65b9\u9762\u90fd\u6bd4\u5728\u8fd9\u672c\u4e66\u7684\u7b2c\u4e00\u7248\u66f4\u597d\uff0c\u53ea\u9700\u8981\u4e00\u884c\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ExecutorService exec = Executors.newSingleThreadExecutor();\n\nHere is how to submit a runnable for execution:\nexec.execute(runnable);\n\nAnd here is how to tell the executor to terminate gracefully (if you fail to do this,it is likely that your VM will not exit):\nexec.shutdown();\n")),(0,a.kt)("p",null,"You can do many more things with an executor service. For example, you can wait for a particular task to complete (with the get method, as shown in Item 79, page 319), you can wait for any or all of a collection of tasks to complete (using the invokeAny or invokeAll methods), you can wait for the executor service to terminate (using the awaitTermination method), you can retrieve the results of tasks one by one as they complete (using an ExecutorCompletionService), you can schedule tasks to run at a particular time or to run periodically (using a ScheduledThreadPoolExecutor), and so on."),(0,a.kt)("p",null,"\u4f60\u53ef\u4ee5\u4f7f\u7528 executor \u670d\u52a1\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u7b49\u5f85\u4e00\u4e2a\u7279\u5b9a\u4efb\u52a1\u5b8c\u6210\uff08\u4f7f\u7528 get \u65b9\u6cd5\uff0c\u53c2\u89c1 ",(0,a.kt)("a",{parentName:"p",href:"./Chapter-11/Chapter-11-Item-79-Avoid-excessive-synchronization"},"Item-79"),"\uff0c319 \u9875\uff09\uff0c\u4f60\u53ef\u4ee5\u7b49\u5f85\u4efb\u52a1\u96c6\u5408\u4e2d\u4efb\u4f55\u6216\u5168\u90e8\u4efb\u52a1\u5b8c\u6210\uff08\u4f7f\u7528 invokeAny \u6216 invokeAll \u65b9\u6cd5\uff09\uff0c\u4f60\u53ef\u4ee5\u7b49\u5f85 executor \u670d\u52a1\u7ec8\u6b62\uff08\u4f7f\u7528 awaitTermination \u65b9\u6cd5\uff09\uff0c\u4f60\u53ef\u4ee5\u4e00\u4e2a\u63a5\u4e00\u4e2a\u68c0\u7d22\u4efb\u52a1\uff0c\u83b7\u53d6\u4ed6\u4eec\u5b8c\u6210\u7684\u7ed3\u679c\uff08\u4f7f\u7528\u4e00\u4e2a ExecutorCompletionService\uff09\uff0c\u8fd8\u53ef\u4ee5\u5b89\u6392\u4efb\u52a1\u5728\u7279\u5b9a\u65f6\u95f4\u8fd0\u884c\u6216\u5b9a\u671f\u8fd0\u884c\uff08\u4f7f\u7528 ScheduledThreadPoolExecutor\uff09\uff0c\u7b49\u7b49\u3002"),(0,a.kt)("p",null,"If you want more than one thread to process requests from the queue, simply call a different static factory that creates a different kind of executor service called a thread pool. You can create a thread pool with a fixed or variable number of threads. The java.util.concurrent.Executors class contains static factories that provide most of the executors you\u2019ll ever need. If, however, you want something out of the ordinary, you can use the ThreadPoolExecutor class directly. This class lets you configure nearly every aspect of a thread pool\u2019s operation."),(0,a.kt)("p",null,"\u5982\u679c\u5e0c\u671b\u591a\u4e2a\u7ebf\u7a0b\u5904\u7406\u6765\u81ea\u961f\u5217\u7684\u8bf7\u6c42\uff0c\u53ea\u9700\u8c03\u7528\u4e00\u4e2a\u4e0d\u540c\u7684\u9759\u6001\u5de5\u5382\uff0c\u8be5\u5de5\u5382\u521b\u5efa\u4e00\u79cd\u79f0\u4e3a\u7ebf\u7a0b\u6c60\u7684\u4e0d\u540c\u7c7b\u578b\u7684 executor \u670d\u52a1\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u56fa\u5b9a\u6216\u53ef\u53d8\u6570\u91cf\u7684\u7ebf\u7a0b\u521b\u5efa\u7ebf\u7a0b\u6c60\u3002",(0,a.kt)("inlineCode",{parentName:"p"},"java.util.concurrent.Executors")," \u7c7b\u5305\u542b\u9759\u6001\u5de5\u5382\uff0c\u5b83\u4eec\u63d0\u4f9b\u4f60\u9700\u8981\u7684\u5927\u591a\u6570 executor\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e9b\u4e0d\u540c\u5bfb\u5e38\u7684\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 ThreadPoolExecutor \u7c7b\u3002\u8fd9\u4e2a\u7c7b\u5141\u8bb8\u4f60\u914d\u7f6e\u7ebf\u7a0b\u6c60\u64cd\u4f5c\u7684\u51e0\u4e4e\u6bcf\u4e2a\u65b9\u9762\u3002"),(0,a.kt)("p",null,"Choosing the executor service for a particular application can be tricky. For a small program, or a lightly loaded server, Executors.newCachedThreadPool is generally a good choice because it demands no configuration and generally \u201cdoes the right thing.\u201d But a cached thread pool is not a good choice for a heavily loaded production server! In a cached thread pool, submitted tasks are not queued but immediately handed off to a thread for execution. If no threads are available, a new one is created. If a server is so heavily loaded that all of its CPUs are fully utilized and more tasks arrive, more threads will be created, which will only make matters worse. Therefore, in a heavily loaded production server, you are much better off using Executors.newFixedThreadPool, which gives you a pool with a fixed number of threads, or using the ThreadPoolExecutor class directly, for maximum control."),(0,a.kt)("p",null,"\u4e3a\u7279\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u9009\u62e9 executor \u670d\u52a1\u53ef\u80fd\u6bd4\u8f83\u68d8\u624b\u3002\u5bf9\u4e8e\u5c0f\u7a0b\u5e8f\u6216\u8d1f\u8f7d\u8f83\u8f7b\u7684\u670d\u52a1\u5668\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"Executors.newCachedThreadPool")," \u901a\u5e38\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u914d\u7f6e\uff0c\u800c\u4e14\u901a\u5e38\u300c\u505a\u6b63\u786e\u7684\u4e8b\u60c5\u300d\u3002\u4f46\u662f\u5bf9\u4e8e\u8d1f\u8f7d\u6c89\u91cd\u7684\u751f\u4ea7\u670d\u52a1\u5668\u6765\u8bf4\uff0c\u7f13\u5b58\u7684\u7ebf\u7a0b\u6c60\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u9009\u62e9\uff01\u5728\u7f13\u5b58\u7684\u7ebf\u7a0b\u6c60\u4e2d\uff0c\u63d0\u4ea4\u7684\u4efb\u52a1\u4e0d\u4f1a\u6392\u961f\uff0c\u800c\u662f\u7acb\u5373\u4f20\u9012\u7ed9\u7ebf\u7a0b\u6267\u884c\u3002\u5982\u679c\u6ca1\u6709\u53ef\u7528\u7684\u7ebf\u7a0b\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u3002\u5982\u679c\u670d\u52a1\u5668\u8d1f\u8f7d\u8fc7\u91cd\uff0c\u6240\u6709 CPU \u90fd\u88ab\u5145\u5206\u5229\u7528\uff0c\u5e76\u4e14\u6709\u66f4\u591a\u7684\u4efb\u52a1\u5230\u8fbe\uff0c\u5c31\u4f1a\u521b\u5efa\u66f4\u591a\u7684\u7ebf\u7a0b\uff0c\u8fd9\u53ea\u4f1a\u4f7f\u60c5\u51b5\u53d8\u5f97\u66f4\u7cdf\u3002\u56e0\u6b64\uff0c\u5728\u8d1f\u8f7d\u6c89\u91cd\u7684\u751f\u4ea7\u670d\u52a1\u5668\u4e2d\uff0c\u6700\u597d\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"Executors.newFixedThreadPool"),"\uff0c\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e00\u4e2a\u7ebf\u7a0b\u6570\u91cf\u56fa\u5b9a\u7684\u6c60\uff0c\u6216\u8005\u76f4\u63a5\u4f7f\u7528 ThreadPoolExecutor \u7c7b\u6765\u5b9e\u73b0\u6700\u5927\u9650\u5ea6\u7684\u63a7\u5236\u3002"),(0,a.kt)("p",null,"Not only should you refrain from writing your own work queues, but you should generally refrain from working directly with threads. When you work directly with threads, a Thread serves as both a unit of work and the mechanism for executing it. In the executor framework, the unit of work and the execution mechanism are separate. The key abstraction is the unit of work, which is the task. There are two kinds of tasks: Runnable and its close cousin, Callable (which is like Runnable, except that it returns a value and can throw arbitrary exceptions). The general mechanism for executing tasks is the executor service. If you think in terms of tasks and let an executor service execute them for you, you gain the flexibility to select an appropriate execution policy to meet your needs and to change the policy if your needs change. In essence, the Executor Framework does for execution what the Collections Framework did for aggregation."),(0,a.kt)("p",null,"\u4f60\u4e0d\u4ec5\u5e94\u8be5\u907f\u514d\u7f16\u5199\u81ea\u5df1\u7684\u5de5\u4f5c\u961f\u5217\uff0c\u800c\u4e14\u901a\u5e38\u8fd8\u5e94\u8be5\u907f\u514d\u76f4\u63a5\u4f7f\u7528\u7ebf\u7a0b\u3002\u5f53\u4f60\u76f4\u63a5\u4f7f\u7528\u7ebf\u7a0b\u65f6\uff0c\u7ebf\u7a0b\u65e2\u662f\u5de5\u4f5c\u5355\u5143\uff0c\u53c8\u662f\u6267\u884c\u5b83\u7684\u673a\u5236\u3002\u5728 executor \u6846\u67b6\u4e2d\uff0c\u5de5\u4f5c\u5355\u5143\u548c\u6267\u884c\u673a\u5236\u662f\u5206\u5f00\u7684\u3002\u5173\u952e\u7684\u62bd\u8c61\u662f\u5de5\u4f5c\u5355\u5143\uff0c\u5373\u4efb\u52a1\u3002\u6709\u4e24\u79cd\u4efb\u52a1\uff1aRunnable \u548c\u5b83\u7684\u8fd1\u4eb2 Callable\uff08\u4e0e Runnable \u7c7b\u4f3c\uff0c\u53ea\u662f\u5b83\u8fd4\u56de\u4e00\u4e2a\u503c\u5e76\u53ef\u4ee5\u629b\u51fa\u4efb\u610f\u5f02\u5e38\uff09\u3002\u6267\u884c\u4efb\u52a1\u7684\u4e00\u822c\u673a\u5236\u662f executor \u670d\u52a1\u3002\u5982\u679c\u4f60\u4ece\u4efb\u52a1\u7684\u89d2\u5ea6\u8003\u8651\u95ee\u9898\uff0c\u5e76\u8ba9 executor \u670d\u52a1\u4e3a\u4f60\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0c\u90a3\u4e48\u4f60\u5c31\u53ef\u4ee5\u7075\u6d3b\u5730\u9009\u62e9\u5408\u9002\u7684\u6267\u884c\u7b56\u7565\u6765\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\uff0c\u5e76\u5728\u4f60\u7684\u9700\u6c42\u53d1\u751f\u53d8\u5316\u65f6\u66f4\u6539\u7b56\u7565\u3002\u672c\u8d28\u4e0a\uff0cExecutor \u6846\u67b6\u6267\u884c\u7684\u529f\u80fd\u4e0e Collections \u6846\u67b6\u805a\u5408\u7684\u529f\u80fd\u76f8\u540c\u3002"),(0,a.kt)("p",null,"In Java 7, the Executor Framework was extended to support fork-join tasks, which are run by a special kind of executor service known as a fork-join pool. A fork-join task, represented by a ForkJoinTask instance, may be split up into smaller subtasks, and the threads comprising a ForkJoinPool not only process these tasks but \u201csteal\u201d tasks from one another to ensure that all threads remain busy, resulting in higher CPU utilization, higher throughput, and lower latency. Writing and tuning fork-join tasks is tricky. Parallel streams (Item 48) are written atop fork join pools and allow you to take advantage of their performance benefits with little effort, assuming they are appropriate for the task at hand."),(0,a.kt)("p",null,"\u5728 Java 7 \u4e2d\uff0cExecutor \u6846\u67b6\u88ab\u6269\u5c55\u4e3a\u652f\u6301 fork-join \u4efb\u52a1\uff0c\u8fd9\u4e9b\u4efb\u52a1\u7531\u4e00\u79cd\u7279\u6b8a\u7684 Executor \u670d\u52a1\uff08\u79f0\u4e3a fork-join \u6c60\uff09\u8fd0\u884c\u3002\u7531 ForkJoinTask \u5b9e\u4f8b\u8868\u793a\u7684 fork-join \u4efb\u52a1\u53ef\u4ee5\u5212\u5206\u4e3a\u66f4\u5c0f\u7684\u5b50\u4efb\u52a1\uff0c\u7531 ForkJoinPool \u7ec4\u6210\u7684\u7ebf\u7a0b\u4e0d\u4ec5\u5904\u7406\u8fd9\u4e9b\u4efb\u52a1\uff0c\u800c\u4e14\u8fd8\u4ece\u5176\u4ed6\u7ebf\u7a0b\u300c\u7a83\u53d6\u300d\u4efb\u52a1\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u7ebf\u7a0b\u90fd\u5904\u4e8e\u7e41\u5fd9\u72b6\u6001\uff0c\u4ece\u800c\u63d0\u9ad8 CPU \u5229\u7528\u7387\u3001\u66f4\u9ad8\u7684\u541e\u5410\u91cf\u548c\u66f4\u4f4e\u7684\u5ef6\u8fdf\u3002\u7f16\u5199\u548c\u8c03\u4f18 fork-join \u4efb\u52a1\u975e\u5e38\u68d8\u624b\u3002\u5e76\u884c\u6d41\uff08",(0,a.kt)("a",{parentName:"p",href:"./Chapter-7-Item-48-Use-caution-when-making-streams-parallel"},"Item-48"),"\uff09\n\u662f\u5728 fork \u8fde\u63a5\u6c60\u4e4b\u4e0a\u7f16\u5199\u7684\uff0c\u5047\u8bbe\u5b83\u4eec\u9002\u5408\u5f53\u524d\u7684\u4efb\u52a1\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u5229\u7528\u5b83\u4eec\u7684\u6027\u80fd\u4f18\u52bf\u3002"),(0,a.kt)("p",null,"A complete treatment of the Executor Framework is beyond the scope of this book, but the interested reader is directed to Java Concurrency in Practice ","[Goetz06]","."),(0,a.kt)("p",null,"\u5bf9 Executor \u6846\u67b6\u7684\u5b8c\u6574\u5904\u7406\u8d85\u51fa\u4e86\u672c\u4e66\u7684\u8303\u56f4\uff0c\u4f46\u662f\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u5728\u5b9e\u8df5\u4e2d\u53ef\u4ee5\u53c2\u9605\u300aJava Concurrency in Practice\u300b ","[Goetz06]","\u3002"),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"./Chapter-11/Chapter-11-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,a.kt)("a",{parentName:"strong",href:"./Chapter-11/Chapter-11-Item-79-Avoid-excessive-synchronization"},"Item 79: Avoid excessive synchronization\uff08\u907f\u514d\u8fc7\u5ea6\u540c\u6b65\uff09"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,a.kt)("a",{parentName:"strong",href:"./Chapter-11/Chapter-11-Item-81-Prefer-concurrency-utilities-to-wait-and-notify"},"Item 81: Prefer concurrency utilities to wait and notify\uff08\u5e76\u53d1\u5b9e\u7528\u5de5\u5177\u4f18\u4e8e wait \u548c notify\uff09")))))}h.isMDXComponent=!0}}]);