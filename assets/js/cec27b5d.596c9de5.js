"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[447],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8519:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={},i=void 0,l={unversionedId:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-60-Avoid-float-and-double-if-exact-answers-are-required",id:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-60-Avoid-float-and-double-if-exact-answers-are-required",title:"Chapter-9-Item-60-Avoid-float-and-double-if-exact-answers-are-required",description:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-60-Avoid-float-and-double-if-exact-answers-are-required.md",sourceDirName:"Books/EffectiveJava3/Chapter-9",slug:"/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-60-Avoid-float-and-double-if-exact-answers-are-required",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-60-Avoid-float-and-double-if-exact-answers-are-required",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-60-Avoid-float-and-double-if-exact-answers-are-required.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-9-Item-59-Know-and-use-the-libraries",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-59-Know-and-use-the-libraries"},next:{title:"Chapter-9-Item-61-Prefer-primitive-types-to-boxed-primitives",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-61-Prefer-primitive-types-to-boxed-primitives"}},s={},u=[{value:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1",level:2},{value:"Item 60: Avoid float and double if exact answers are required\uff08\u82e5\u9700\u8981\u7cbe\u786e\u7b54\u6848\u5c31\u5e94\u907f\u514d\u4f7f\u7528 float \u548c double \u7c7b\u578b\uff09",id:"item-60-avoid-float-and-double-if-exact-answers-are-required\u82e5\u9700\u8981\u7cbe\u786e\u7b54\u6848\u5c31\u5e94\u907f\u514d\u4f7f\u7528-float-\u548c-double-\u7c7b\u578b",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1"},"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09"),(0,a.kt)("h3",{id:"item-60-avoid-float-and-double-if-exact-answers-are-required\u82e5\u9700\u8981\u7cbe\u786e\u7b54\u6848\u5c31\u5e94\u907f\u514d\u4f7f\u7528-float-\u548c-double-\u7c7b\u578b"},"Item 60: Avoid float and double if exact answers are required\uff08\u82e5\u9700\u8981\u7cbe\u786e\u7b54\u6848\u5c31\u5e94\u907f\u514d\u4f7f\u7528 float \u548c double \u7c7b\u578b\uff09"),(0,a.kt)("p",null,"The float and double types are designed primarily for scientific and engineering calculations. They perform binary floating-point arithmetic, which was carefully designed to furnish accurate approximations quickly over a broad range of magnitudes. They do not, however, provide exact results and should not be used where exact results are required. ",(0,a.kt)("strong",{parentName:"p"},"The float and double types are particularly ill-suited for monetary calculations")," because it is impossible to represent 0.1 (or any other negative power of ten) as a float or double exactly."),(0,a.kt)("p",null,"float \u548c double \u7c7b\u578b\u4e3b\u8981\u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u548c\u5de5\u7a0b\u8ba1\u7b97\u3002\u5b83\u4eec\u6267\u884c\u4e8c\u8fdb\u5236\u6d6e\u70b9\u8fd0\u7b97\uff0c\u8be5\u7b97\u6cd5\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u80fd\u591f\u5728\u5f88\u5927\u8303\u56f4\u5185\u5feb\u901f\u63d0\u4f9b\u7cbe\u786e\u7684\u8fd1\u4f3c\u503c\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u4e0d\u80fd\u63d0\u4f9b\u51c6\u786e\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u5e94\u8be5\u5728\u9700\u8981\u7cbe\u786e\u7ed3\u679c\u7684\u5730\u65b9\u4f7f\u7528\u3002",(0,a.kt)("strong",{parentName:"p"},"float \u548c double \u7c7b\u578b\u7279\u522b\u4e0d\u9002\u5408\u8fdb\u884c\u8d27\u5e01\u8ba1\u7b97"),"\uff0c\u56e0\u4e3a\u4e0d\u53ef\u80fd\u5c06 0.1\uff08\u6216 10 \u7684\u4efb\u610f\u8d1f\u6b21\u5e42\uff09\u7cbe\u786e\u5730\u8868\u793a\u4e3a float \u6216 double\u3002"),(0,a.kt)("p",null,"For example, suppose you have $1.03 in your pocket, and you spend 42\xa2. How much money do you have left? Here\u2019s a naive program fragment that attempts to answer this question:"),(0,a.kt)("p",null,"\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u53e3\u888b\u91cc\u6709 1.03 \u7f8e\u5143\uff0c\u4f60\u6d88\u8d39\u4e86 42 \u7f8e\u5206\u3002\u4f60\u8fd8\u5269\u4e0b\u591a\u5c11\u94b1\uff1f\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u7247\u6bb5\uff0c\u8bd5\u56fe\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"System.out.println(1.03 - 0.42);\n")),(0,a.kt)("p",null,"Unfortunately, it prints out 0.6100000000000001. This is not an isolated case. Suppose you have a dollar in your pocket, and you buy nine washers priced at ten cents each. How much change do you get?"),(0,a.kt)("p",null,"\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u8f93\u51fa\u4e86 0.6100000000000001\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u7279\u4f8b\u3002\u5047\u8bbe\u4f60\u53e3\u888b\u91cc\u6709\u4e00\u7f8e\u5143\uff0c\u4f60\u4e70\u4e86 9 \u53f0\u6d17\u8863\u673a\uff0c\u6bcf\u53f0 10 \u7f8e\u5206\u3002\u4f60\u80fd\u5f97\u5230\u591a\u5c11\u96f6\u94b1\uff1f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"System.out.println(1.00 - 9 * 0.10);\n")),(0,a.kt)("p",null,"According to this program fragment, you get $0.09999999999999998."),(0,a.kt)("p",null,"\u6839\u636e\u8fd9\u4e2a\u7a0b\u5e8f\u7247\u6bb5\uff0c\u53ef\u4ee5\u5f97\u5230 0.0999999999999999998 \u7f8e\u5143\u3002"),(0,a.kt)("p",null,"You might think that the problem could be solved merely by rounding results prior to printing, but unfortunately this does not always work. For example, suppose you have a dollar in your pocket, and you see a shelf with a row of delicious candies priced at 10\xa2, 20\xa2, 30\xa2, and so forth, up to a dollar. You buy one of each candy, starting with the one that costs 10\xa2, until you can\u2019t afford to buy the next candy on the shelf. How many candies do you buy, and how much change do you get? Here\u2019s a naive program designed to solve this problem:"),(0,a.kt)("p",null,"\u4f60\u53ef\u80fd\u8ba4\u4e3a\uff0c\u53ea\u9700\u5728\u6253\u5370\u4e4b\u524d\u5c06\u7ed3\u679c\u56db\u820d\u4e94\u5165\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u603b\u662f\u6709\u6548\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u53e3\u888b\u91cc\u6709\u4e00\u7f8e\u5143\uff0c\u4f60\u770b\u5230\u4e00\u4e2a\u67b6\u5b50\u4e0a\u6709\u4e00\u6392\u597d\u5403\u7684\u7cd6\u679c\uff0c\u5b83\u4eec\u7684\u4ef7\u683c\u4ec5\u4ec5\u662f 10 \u7f8e\u5206\uff0c20 \u7f8e\u5206\uff0c30 \u7f8e\u5206\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230 1 \u7f8e\u5143\u3002\u4f60\u6bcf\u4e70\u4e00\u9897\u7cd6\uff0c\u4ece 10 \u7f8e\u5206\u7684\u90a3\u9897\u5f00\u59cb\uff0c\u76f4\u5230\u4f60\u4e70\u4e0d\u8d77\u8d27\u67b6\u4e0a\u7684\u4e0b\u4e00\u9897\u7cd6\u3002\u4f60\u4e70\u4e86\u591a\u5c11\u7cd6\u679c\uff0c\u6362\u4e86\u591a\u5c11\u96f6\u94b1\uff1f\u8fd9\u91cc\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// Broken - uses floating point for monetary calculation!\npublic static void main(String[] args) {\n    double funds = 1.00;\n    int itemsBought = 0;\n    for (double price = 0.10; funds >= price; price += 0.10) {\n        funds -= price;\n        itemsBought++;\n    }\n    System.out.println(itemsBought +"items bought.");\n    System.out.println("Change: $" + funds);\n}\n')),(0,a.kt)("p",null,"If you run the program, you\u2019ll find that you can afford three pieces of candy, and you have $0.3999999999999999 left. This is the wrong answer! The right way to solve this problem is to ",(0,a.kt)("strong",{parentName:"p"},"use BigDecimal, int, or long for monetary calculations.")),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4f60\u4f1a\u53d1\u73b0\u4f60\u53ef\u4ee5\u4e70\u5f97\u8d77\u4e09\u5757\u7cd6\uff0c\u4f60\u8fd8\u6709 0.399999999999999999 \u7f8e\u5143\u3002\u8fd9\u662f\u9519\u8bef\u7684\u7b54\u6848\uff01\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u6b63\u786e\u65b9\u6cd5\u662f ",(0,a.kt)("strong",{parentName:"p"},"\u4f7f\u7528 BigDecimal\u3001int \u6216 long \u8fdb\u884c\u8d27\u5e01\u8ba1\u7b97\u3002")),(0,a.kt)("p",null,"Here\u2019s a straightforward transformation of the previous program to use the BigDecimal type in place of double. Note that BigDecimal\u2019s String constructor is used rather than its double constructor. This is required in order to avoid introducing inaccurate values into the computation ","[Bloch05, Puzzle 2]",":"),(0,a.kt)("p",null,"\u8fd9\u91cc\u662f\u524d\u4e00\u4e2a\u7a0b\u5e8f\u7684\u4e00\u4e2a\u7b80\u5355\u6539\u7248\uff0c\u4f7f\u7528 BigDecimal \u7c7b\u578b\u4ee3\u66ff double\u3002\u6ce8\u610f\uff0c\u4f7f\u7528 BigDecimal \u7684 String \u6784\u9020\u51fd\u6570\u800c\u4e0d\u662f\u5b83\u7684 double \u6784\u9020\u51fd\u6570\u3002\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u5728\u8ba1\u7b97\u4e2d\u5f15\u5165\u4e0d\u51c6\u786e\u7684\u503c ","[Bloch05, Puzzle 2]","\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'public static void main(String[] args) {\n    final BigDecimal TEN_CENTS = new BigDecimal(".10");\n    int itemsBought = 0;\n    BigDecimal funds = new BigDecimal("1.00");\n    for (BigDecimal price = TEN_CENTS;funds.compareTo(price) >= 0;price = price.add(TEN_CENTS)) {\n        funds = funds.subtract(price);\n    itemsBought++;\n    }\n    System.out.println(itemsBought +"items bought.");\n    System.out.println("Money left over: $" + funds);\n}\n')),(0,a.kt)("p",null,"If you run the revised program, you\u2019ll find that you can afford four pieces of candy, with $0.00 left over. This is the correct answer."),(0,a.kt)("p",null,"\u5982\u679c\u4f60\u8fd0\u884c\u4fee\u6539\u540e\u7684\u7a0b\u5e8f\uff0c\u4f60\u4f1a\u53d1\u73b0\u4f60\u53ef\u4ee5\u4e70\u56db\u9897\u7cd6\uff0c\u6700\u7ec8\u5269\u4e0b 0 \u7f8e\u5143\u3002\u8fd9\u662f\u6b63\u786e\u7b54\u6848\u3002"),(0,a.kt)("p",null,"There are, however, two disadvantages to using BigDecimal: it\u2019s a lot less convenient than using a primitive arithmetic type, and it\u2019s a lot slower. The latter disadvantage is irrelevant if you\u2019re solving a single short problem, but the former may annoy you."),(0,a.kt)("p",null,"\u7136\u800c\uff0c\u4f7f\u7528 BigDecimal \u6709\u4e24\u4e2a\u7f3a\u70b9\uff1a\u5b83\u4e0e\u539f\u59cb\u7b97\u672f\u7c7b\u578b\u76f8\u6bd4\u5f88\u4e0d\u65b9\u4fbf\uff0c\u800c\u4e14\u901f\u5ea6\u8981\u6162\u5f97\u591a\u3002\u5982\u679c\u4f60\u53ea\u89e3\u51b3\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff0c\u540e\u4e00\u79cd\u7f3a\u70b9\u662f\u65e0\u5173\u7d27\u8981\u7684\uff0c\u4f46\u524d\u8005\u53ef\u80fd\u4f1a\u8ba9\u4f60\u70e6\u607c\u3002"),(0,a.kt)("p",null,"An alternative to using BigDecimal is to use int or long, depending on the amounts involved, and to keep track of the decimal point yourself. In this example, the obvious approach is to do all computation in cents instead of dollars. Here\u2019s a straightforward transformation that takes this approach:"),(0,a.kt)("p",null,"\u9664\u4e86\u4f7f\u7528 BigDecimal\uff0c\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 int \u6216 long\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6d89\u53ca\u7684\u6570\u503c\u5927\u5c0f\uff0c\u8fd8\u8981\u81ea\u5df1\u5904\u7406\u5341\u8fdb\u5236\u5c0f\u6570\u70b9\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6700\u660e\u663e\u7684\u65b9\u6cd5\u662f\u7528\u7f8e\u5206\u800c\u4e0d\u662f\u7f8e\u5143\u6765\u8ba1\u7b97\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u7b80\u5355\u6539\u7248\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'public static void main(String[] args) {\n    int itemsBought = 0;\n    int funds = 100;\n    for (int price = 10; funds >= price; price += 10) {\n        funds -= price;\n        itemsBought++;\n    }\n    System.out.println(itemsBought +"items bought.");\n    System.out.println("Cash left over: " + funds + " cents");\n}\n')),(0,a.kt)("p",null,"In summary, don\u2019t use float or double for any calculations that require an exact answer. Use BigDecimal if you want the system to keep track of the decimal point and you don\u2019t mind the inconvenience and cost of not using a primitive type. Using BigDecimal has the added advantage that it gives you full control over rounding, letting you select from eight rounding modes whenever an operation that entails rounding is performed. This comes in handy if you\u2019re performing business calculations with legally mandated rounding behavior. If performance is of the essence, you don\u2019t mind keeping track of the decimal point yourself, and the quantities aren\u2019t too big, use int or long. If the quantities don\u2019t exceed nine decimal digits, you can use int; if they don\u2019t exceed eighteen digits, you can use long. If the quantities might exceed eighteen digits, use BigDecimal."),(0,a.kt)("p",null,"\u603b\u4e4b\uff0c\u5bf9\u4e8e\u4efb\u4f55\u9700\u8981\u7cbe\u786e\u7b54\u6848\u7684\u8ba1\u7b97\uff0c\u4e0d\u8981\u4f7f\u7528 float \u6216 double \u7c7b\u578b\u3002\u5982\u679c\u5e0c\u671b\u7cfb\u7edf\u6765\u5904\u7406\u5341\u8fdb\u5236\u5c0f\u6570\u70b9\uff0c\u5e76\u4e14\u4e0d\u4ecb\u610f\u4e0d\u4f7f\u7528\u57fa\u672c\u7c7b\u578b\u5e26\u6765\u7684\u4e0d\u4fbf\u548c\u6210\u672c\uff0c\u8bf7\u4f7f\u7528 BigDecimal\u3002\u4f7f\u7528 BigDecimal \u7684\u53e6\u4e00\u4e2a\u597d\u5904\u662f\uff0c\u5b83\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u820d\u5165\uff0c\u5f53\u6267\u884c\u9700\u8981\u820d\u5165\u7684\u64cd\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4ece\u516b\u79cd\u820d\u5165\u6a21\u5f0f\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u5982\u679c\u4f60\u4f7f\u7528\u5408\u6cd5\u7684\u820d\u5165\u884c\u4e3a\u6267\u884c\u4e1a\u52a1\u8ba1\u7b97\uff0c\u8fd9\u5c06\u975e\u5e38\u65b9\u4fbf\u3002\u5982\u679c\u6027\u80fd\u662f\u6700\u91cd\u8981\u7684\uff0c\u90a3\u4e48\u4f60\u4e0d\u4ecb\u610f\u81ea\u5df1\u5904\u7406\u5341\u8fdb\u5236\u5c0f\u6570\u70b9\uff0c\u800c\u4e14\u6570\u503c\u4e0d\u662f\u592a\u5927\uff0c\u53ef\u4ee5\u4f7f\u7528 int \u6216 long\u3002\u5982\u679c\u6570\u503c\u4e0d\u8d85\u8fc7 9 \u4f4d\u5c0f\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 int\uff1b\u5982\u679c\u4e0d\u8d85\u8fc7 18 \u4f4d\uff0c\u53ef\u4ee5\u4f7f\u7528 long\u3002\u5982\u679c\u6570\u91cf\u53ef\u80fd\u8d85\u8fc7 18 \u4f4d\uff0c\u5219\u4f7f\u7528 BigDecimal\u3002"),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"./Chapter-9-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,a.kt)("a",{parentName:"strong",href:"./Chapter-9-Item-59-Know-and-use-the-libraries"},"Item 59: Know and use the libraries\uff08\u4e86\u89e3\u5e76\u4f7f\u7528\u5e93\uff09"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,a.kt)("a",{parentName:"strong",href:"./Chapter-9-Item-61-Prefer-primitive-types-to-boxed-primitives"},"Item 61: Prefer primitive types to boxed primitives\uff08\u57fa\u672c\u6570\u636e\u7c7b\u578b\u4f18\u4e8e\u5305\u88c5\u7c7b\uff09")))))}c.isMDXComponent=!0}}]);