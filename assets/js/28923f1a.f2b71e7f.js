"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5268],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var s=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,s)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,s,n=function(e,t){if(null==e)return{};var a,s,n={},i=Object.keys(e);for(s=0;s<i.length;s++)a=i[s],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)a=i[s],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=s.createContext({}),l=function(e){var t=s.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=l(e.components);return s.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},h=s.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),h=l(a),u=n,d=h["".concat(c,".").concat(u)]||h[u]||p[u]||i;return a?s.createElement(d,o(o({ref:t},m),{},{components:a})):s.createElement(d,o({ref:t},m))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=h;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:n,o[1]=r;for(var l=2;l<i;l++)o[l]=a[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,a)}h.displayName="MDXCreateElement"},9049:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var s=a(7462),n=(a(7294),a(3905));const i={},o=void 0,r={unversionedId:"Books/EffectiveJava3/Chapter-4/Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic",id:"Books/EffectiveJava3/Chapter-4/Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic",title:"Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic",description:"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic.md",sourceDirName:"Books/EffectiveJava3/Chapter-4",slug:"/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-4-Item-23-Prefer-class-hierarchies-to-tagged-classes",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-23-Prefer-class-hierarchies-to-tagged-classes"},next:{title:"Chapter-4-Item-25-Limit-source-files-to-a-single-top-level-class",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-25-Limit-source-files-to-a-single-top-level-class"}},c={},l=[{value:"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09",id:"chapter-4-classes-and-interfaces\u7c7b\u548c\u63a5\u53e3",level:2},{value:"Item 24: Favor static member classes over nonstatic\uff08\u9759\u6001\u6210\u5458\u7c7b\u4f18\u4e8e\u975e\u9759\u6001\u6210\u5458\u7c7b\uff09",id:"item-24-favor-static-member-classes-over-nonstatic\u9759\u6001\u6210\u5458\u7c7b\u4f18\u4e8e\u975e\u9759\u6001\u6210\u5458\u7c7b",level:3}],m={toc:l};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,s.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-4-classes-and-interfaces\u7c7b\u548c\u63a5\u53e3"},"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09"),(0,n.kt)("h3",{id:"item-24-favor-static-member-classes-over-nonstatic\u9759\u6001\u6210\u5458\u7c7b\u4f18\u4e8e\u975e\u9759\u6001\u6210\u5458\u7c7b"},"Item 24: Favor static member classes over nonstatic\uff08\u9759\u6001\u6210\u5458\u7c7b\u4f18\u4e8e\u975e\u9759\u6001\u6210\u5458\u7c7b\uff09"),(0,n.kt)("p",null,"A nested class is a class defined within another class. A nested class should exist only to serve its enclosing class. If a nested class would be useful in some other context, then it should be a top-level class. There are four kinds of nested classes: static member classes, nonstatic member classes, anonymous classes, and local classes. All but the first kind are known as inner classes. This item tells you when to use which kind of nested class and why."),(0,n.kt)("p",null,"\u5d4c\u5957\u7c7b\u662f\u5728\u53e6\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u7684\u7c7b\u3002\u5d4c\u5957\u7c7b\u5e94\u8be5\u53ea\u4e3a\u5916\u90e8\u7c7b\u670d\u52a1\u3002\u5982\u679c\u5d4c\u5957\u7c7b\u5728\u5176\u4ed6\u73af\u5883\u4e2d\u6709\u7528\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u662f\u9876\u7ea7\u7c7b\u3002\u6709\u56db\u79cd\u5d4c\u5957\u7c7b\uff1a\u9759\u6001\u6210\u5458\u7c7b\u3001\u975e\u9759\u6001\u6210\u5458\u7c7b\u3001\u533f\u540d\u7c7b\u548c\u5c40\u90e8\u7c7b\u3002\u9664\u4e86\u7b2c\u4e00\u79cd\uff0c\u6240\u6709\u7684\u7c7b\u90fd\u88ab\u79f0\u4e3a\u5185\u90e8\u7c7b\u3002\u672c\u6761\u76ee\u4f1a\u544a\u8bc9\u4f60\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u54ea\u79cd\u5d4c\u5957\u7c7b\u4ee5\u53ca\u539f\u56e0\u3002"),(0,n.kt)("p",null,"A static member class is the simplest kind of nested class. It is best thought of as an ordinary class that happens to be declared inside another class and has access to all of the enclosing class\u2019s members, even those declared private. A static member class is a static member of its enclosing class and obeys the same accessibility rules as other static members. If it is declared private, it is accessible only within the enclosing class, and so forth."),(0,n.kt)("p",null,"\u9759\u6001\u6210\u5458\u7c7b\u662f\u6700\u7b80\u5355\u7684\u5d4c\u5957\u7c7b\u3002\u6700\u597d\u628a\u5b83\u770b\u505a\u662f\u4e00\u4e2a\u666e\u901a\u7684\u7c7b\uff0c\u53ea\u662f\u78b0\u5de7\u5728\u53e6\u4e00\u4e2a\u7c7b\u4e2d\u58f0\u660e\u800c\u5df2\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bbf\u95ee\u5916\u90e8\u7c7b\u7684\u6240\u6709\u6210\u5458\uff0c\u751a\u81f3\u90a3\u4e9b\u58f0\u660e\u4e3a private \u7684\u6210\u5458\u3002\u9759\u6001\u6210\u5458\u7c7b\u662f\u5176\u5916\u90e8\u7c7b\u7684\u9759\u6001\u6210\u5458\uff0c\u5e76\u4e14\u9075\u5b88\u4e0e\u5176\u4ed6\u9759\u6001\u6210\u5458\u76f8\u540c\u7684\u53ef\u8bbf\u95ee\u6027\u89c4\u5219\u3002\u5982\u679c\u58f0\u660e\u4e3a\u79c1\u6709\uff0c\u5219\u53ea\u80fd\u5728\u5916\u90e8\u7c7b\u4e2d\u8bbf\u95ee\uff0c\u7b49\u7b49\u3002"),(0,n.kt)("p",null,"One common use of a static member class is as a public helper class, useful only in conjunction with its outer class. For example, consider an enum describing the operations supported by a calculator (Item 34). The Operation enum should be a public static member class of the Calculator class. Clients of Calculator could then refer to operations using names like Calculator.Operation.PLUS and Calculator.Operation.MINUS."),(0,n.kt)("p",null,"\u9759\u6001\u6210\u5458\u7c7b\u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u4f5c\u4e3a\u516c\u6709\u7684\u8f85\u52a9\u7c7b\uff0c\u53ea\u6709\u4e0e\u5b83\u7684\u5916\u90e8\u7c7b\u4e00\u8d77\u4f7f\u7528\u65f6\u624d\u6709\u610f\u4e49\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u63cf\u8ff0\u4e86\u8ba1\u7b97\u5668\u652f\u6301\u7684\u5404\u79cd\u64cd\u4f5c\u7684\u679a\u4e3e\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-6-Item-34-Use-enums-instead-of-int-constants"},"Item-34"),"\uff09\u3002Operation \u679a\u4e3e\u5e94\u8be5\u662f Calculator \u7c7b\u7684\u516c\u6709\u9759\u6001\u6210\u5458\u7c7b\uff0cCalculator \u7c7b\u7684\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u7528 ",(0,n.kt)("inlineCode",{parentName:"p"},"Calculator.Operation.PLUS")," \u548c ",(0,n.kt)("inlineCode",{parentName:"p"},"Calculator.Operation.MINUS")," \u7b49\u540d\u79f0\u6765\u5f15\u7528\u8fd9\u4e9b\u64cd\u4f5c\u3002"),(0,n.kt)("p",null,"Syntactically, the only difference between static and nonstatic member classes is that static member classes have the modifier static in their declarations. Despite the syntactic similarity, these two kinds of nested classes are very different. Each instance of a nonstatic member class is implicitly associated with an enclosing instance of its containing class. Within instance methods of a nonstatic member class, you can invoke methods on the enclosing instance or obtain a reference to the enclosing instance using the qualified this construct ","[JLS, 15.8.4]",". If an instance of a nested class can exist in isolation from an instance of its enclosing class, then the nested class must be a static member class: it is impossible to create an instance of a nonstatic member class without an enclosing instance."),(0,n.kt)("p",null,"\u4ece\u8bed\u6cd5\u4e0a\u8bb2\uff0c\u9759\u6001\u6210\u5458\u7c7b\u548c\u975e\u9759\u6001\u6210\u5458\u7c7b\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\u9759\u6001\u6210\u5458\u7c7b\u5728\u5176\u58f0\u660e\u4e2d\u5177\u6709\u4fee\u9970\u7b26 static\u3002\u5c3d\u7ba1\u8bed\u6cd5\u76f8\u4f3c\uff0c\u4f46\u8fd9\u4e24\u79cd\u5d4c\u5957\u7c7b\u6709\u5f88\u5927\u4e0d\u540c\u3002\u975e\u9759\u6001\u6210\u5458\u7c7b\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u9690\u5f0f\u5730\u4e0e\u5916\u90e8\u7c7b\u7684\u5916\u90e8\u5b9e\u4f8b\u76f8\u5173\u8054\u3002\u5728\u975e\u9759\u6001\u6210\u5458\u7c7b\u7684\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528\u5916\u90e8\u5b9e\u4f8b\u4e0a\u7684\u65b9\u6cd5\uff0c\u6216\u8005\u4f7f\u7528\u53d7\u9650\u5236\u7684 this \u6784\u9020\u83b7\u5f97\u5bf9\u5916\u90e8\u5b9e\u4f8b\u7684\u5f15\u7528 ","[JLS, 15.8.4]","\u3002\u5982\u679c\u5d4c\u5957\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u72ec\u7acb\u4e8e\u5916\u90e8\u7c7b\u7684\u5b9e\u4f8b\u5b58\u5728\uff0c\u90a3\u4e48\u5d4c\u5957\u7c7b\u5fc5\u987b\u662f\u9759\u6001\u6210\u5458\u7c7b\uff1a\u5982\u679c\u6ca1\u6709\u5916\u90e8\u5b9e\u4f8b\uff0c\u5c31\u4e0d\u53ef\u80fd\u521b\u5efa\u975e\u9759\u6001\u6210\u5458\u7c7b\u7684\u5b9e\u4f8b\u3002"),(0,n.kt)("p",null,"The association between a nonstatic member class instance and its enclosing instance is established when the member class instance is created and cannot be modified thereafter. Normally, the association is established automatically by invoking a nonstatic member class constructor from within an instance method of the enclosing class. It is possible, though rare, to establish the association manually using the expression enclosingInstance.new MemberClass(args). As you would expect, the association takes up space in the nonstatic member class instance and adds time to its construction."),(0,n.kt)("p",null,"\u975e\u9759\u6001\u6210\u5458\u7c7b\u5b9e\u4f8b\u4e0e\u5916\u90e8\u5b9e\u4f8b\u4e4b\u95f4\u7684\u5173\u8054\u662f\u5728\u521b\u5efa\u6210\u5458\u7c7b\u5b9e\u4f8b\u65f6\u5efa\u7acb\u7684\uff0c\u4e4b\u540e\u65e0\u6cd5\u4fee\u6539\u3002\u901a\u5e38\uff0c\u5173\u8054\u662f\u901a\u8fc7\u4ece\u5916\u90e8\u7c7b\u7684\u5b9e\u4f8b\u65b9\u6cd5\u4e2d\u8c03\u7528\u975e\u9759\u6001\u6210\u5458\u7c7b\u6784\u9020\u51fd\u6570\u81ea\u52a8\u5efa\u7acb\u7684\u3002\u4f7f\u7528 ",(0,n.kt)("inlineCode",{parentName:"p"},"enclosingInstance.new MemberClass(args)")," \u8868\u8fbe\u5f0f\u624b\u52a8\u5efa\u7acb\u5173\u8054\u662f\u53ef\u80fd\u7684\uff0c\u5c3d\u7ba1\u8fd9\u79cd\u60c5\u51b5\u5f88\u5c11\u89c1\u3002\u6b63\u5982\u4f60\u6240\u671f\u671b\u7684\u90a3\u6837\uff0c\u5173\u8054\u5360\u7528\u4e86\u975e\u9759\u6001\u6210\u5458\u7c7b\u5b9e\u4f8b\u4e2d\u7684\u7a7a\u95f4\uff0c\u5e76\u4e3a\u5176\u6784\u9020\u589e\u52a0\u4e86\u65f6\u95f4\u3002"),(0,n.kt)("p",null,"One common use of a nonstatic member class is to define an Adapter ","[Gamma95]"," that allows an instance of the outer class to be viewed as an instance of some unrelated class. For example, implementations of the Map interface typically use nonstatic member classes to implement their collection views, which are returned by Map\u2019s keySet, entrySet, and values methods. Similarly, implementations of the collection interfaces, such as Set and List, typically use nonstatic member classes to implement their iterators:"),(0,n.kt)("p",null,"\u975e\u9759\u6001\u6210\u5458\u7c7b\u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u5b9a\u4e49\u4e00\u4e2a Adapter ","[Gamma95]","\uff0c\u5b83\u5141\u8bb8\u5916\u90e8\u7c7b\u7684\u5b9e\u4f8b\u88ab\u89c6\u4e3a\u67d0\u4e2a\u4e0d\u76f8\u5173\u7c7b\u7684\u5b9e\u4f8b\u3002\u4f8b\u5982\uff0cMap \u63a5\u53e3\u7684\u5b9e\u73b0\u901a\u5e38\u4f7f\u7528\u975e\u9759\u6001\u6210\u5458\u7c7b\u6765\u5b9e\u73b0\u5b83\u4eec\u7684\u96c6\u5408\u89c6\u56fe\uff0c\u8fd9\u4e9b\u89c6\u56fe\u7531 Map \u7684 keySet\u3001entrySet \u548c values \u65b9\u6cd5\u8fd4\u56de\u3002\u7c7b\u4f3c\u5730\uff0c\u96c6\u5408\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u4f8b\u5982 Set \u548c List\uff0c\u901a\u5e38\u4f7f\u7528\u975e\u9759\u6001\u6210\u5458\u7c7b\u6765\u5b9e\u73b0\u5b83\u4eec\u7684\u8fed\u4ee3\u5668\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Typical use of a nonstatic member class\npublic class MySet<E> extends AbstractSet<E> {\n    ... // Bulk of the class omitted\n    @Override\n    public Iterator<E> iterator() {\n        return new MyIterator();\n    }\n    private class MyIterator implements Iterator<E> {\n      ...\n    }\n}\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"If you declare a member class that does not require access to an enclosing instance, always put the static modifier in its declaration,")," making it a static rather than a nonstatic member class. If you omit this modifier, each instance will have a hidden extraneous reference to its enclosing instance. As previously mentioned, storing this reference takes time and space. More seriously, it can result in the enclosing instance being retained when it would otherwise be eligible for garbage collection (Item 7). The resulting memory leak can be catastrophic. It is often difficult to detect because the reference is invisible."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5982\u679c\u58f0\u660e\u7684\u6210\u5458\u7c7b\u4e0d\u9700\u8981\u8bbf\u95ee\u5916\u90e8\u7684\u5b9e\u4f8b\uff0c\u90a3\u4e48\u5e94\u59cb\u7ec8\u5728\u58f0\u660e\u4e2d\u6dfb\u52a0 static \u4fee\u9970\u7b26\uff0c\u4f7f\u5176\u6210\u4e3a\u9759\u6001\u7684\u800c\u4e0d\u662f\u975e\u9759\u6001\u7684\u6210\u5458\u7c7b\u3002")," \u5982\u679c\u7701\u7565\u8fd9\u4e2a\u4fee\u9970\u7b26\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u5bf9\u5176\u5916\u90e8\u5b9e\u4f8b\u7684\u989d\u5916\u5f15\u7528\u3002\u5982\u524d\u6240\u8ff0\uff0c\u5b58\u50a8\u6b64\u5f15\u7528\u9700\u8981\u65f6\u95f4\u548c\u7a7a\u95f4\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5b83\u53ef\u80fd\u4f1a\u5728\u6ee1\u8db3\u8fdb\u884c\u5783\u573e\u6536\u96c6\u6761\u4ef6\u65f6\u4ecd\u4fdd\u7559\u5916\u90e8\u7c7b\u7684\u5b9e\u4f8b\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-2-Item-7-Eliminate-obsolete-object-references"},"Item-7"),"\uff09\u3002\u7531\u4e8e\u5f15\u7528\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u56e0\u6b64\u901a\u5e38\u5f88\u96be\u68c0\u6d4b\u5230\u3002"),(0,n.kt)("p",null,"A common use of private static member classes is to represent components of the object represented by their enclosing class. For example, consider a Map instance, which associates keys with values. Many Map implementations have an internal Entry object for each key-value pair in the map. While each entry is associated with a map, the methods on an entry (getKey, getValue, and setValue) do not need access to the map. Therefore, it would be wasteful to use a nonstatic member class to represent entries: a private static member class is best. If you accidentally omit the static modifier in the entry declaration, the map will still work, but each entry will contain a superfluous reference to the map, which wastes space and time."),(0,n.kt)("p",null,"\u79c1\u6709\u9759\u6001\u6210\u5458\u7c7b\u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u8868\u793a\u7531\u5176\u5916\u90e8\u7c7b\u8868\u793a\u7684\u5bf9\u8c61\u7684\u7ec4\u4ef6\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a Map \u5b9e\u4f8b\uff0c\u5b83\u5c06 key \u4e0e value \u5173\u8054\u8d77\u6765\u3002\u8bb8\u591a Map \u5b9e\u73b0\u7684\u5185\u90e8\u5bf9\u4e8e\u6620\u5c04\u4e2d\u7684\u6bcf\u4e2a key-value \u5bf9\u90fd\u6709\u4e00\u4e2a Entry \u5bf9\u8c61\u3002\u867d\u7136\u6bcf\u4e2a entry \u90fd\u4e0e Map \u5173\u8054\uff0c\u4f46 entry \u4e0a\u7684\u65b9\u6cd5\uff08getKey\u3001getValue \u548c setValue\uff09\u4e0d\u9700\u8981\u8bbf\u95ee Map\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u975e\u9759\u6001\u6210\u5458\u7c7b\u6765\u8868\u793a entry \u662f\u6d6a\u8d39\uff1a\u79c1\u6709\u9759\u6001\u6210\u5458\u7c7b\u662f\u6700\u597d\u7684\u3002\u5982\u679c\u4f60\u4e0d\u5c0f\u5fc3\u5728 entry \u58f0\u660e\u4e2d\u7701\u7565\u4e86\u9759\u6001\u4fee\u9970\u7b26\uff0c\u90a3\u4e48\u6620\u5c04\u4ecd\u7136\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u662f\u6bcf\u4e2a entry \u90fd\u5305\u542b\u5bf9 Map \u7684\u591a\u4f59\u5f15\u7528\uff0c\u8fd9\u4f1a\u6d6a\u8d39\u7a7a\u95f4\u548c\u65f6\u95f4\u3002"),(0,n.kt)("p",null,"It is doubly important to choose correctly between a static and a nonstatic member class if the class in question is a public or protected member of an exported class. In this case, the member class is an exported API element and cannot be changed from a nonstatic to a static member class in a subsequent release without violating backward compatibility."),(0,n.kt)("p",null,"\u5982\u679c\u6240\u8ba8\u8bba\u7684\u7c7b\u662f\u5bfc\u51fa\u7c7b\u7684\u516c\u5171\u6210\u5458\u6216\u53d7\u4fdd\u62a4\u6210\u5458\uff0c\u90a3\u4e48\u5728\u9759\u6001\u6210\u5458\u7c7b\u548c\u975e\u9759\u6001\u6210\u5458\u7c7b\u4e4b\u95f4\u6b63\u786e\u9009\u62e9\u5c31\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6210\u5458\u7c7b\u662f\u5bfc\u51fa\u7684 API \u5143\u7d20\uff0c\u5728\u540e\u7eed\u7248\u672c\u4e2d\uff0c\u4e0d\u80fd\u5728\u4e0d\u8fdd\u53cd\u5411\u540e\u517c\u5bb9\u6027\u7684\u60c5\u51b5\u4e0b\u5c06\u975e\u9759\u6001\u6210\u5458\u7c7b\u66f4\u6539\u4e3a\u9759\u6001\u6210\u5458\u7c7b\u3002"),(0,n.kt)("p",null,"As you would expect, an anonymous class has no name. It is not a member of its enclosing class. Rather than being declared along with other members, it is simultaneously declared and instantiated at the point of use. Anonymous classes are permitted at any point in the code where an expression is legal. Anonymous classes have enclosing instances if and only if they occur in a nonstatic context. But even if they occur in a static context, they cannot have any static members other than constant variables, which are final primitive or string fields initialized to constant expressions ","[JLS, 4.12.4]","."),(0,n.kt)("p",null,"\u5982\u4f60\u6240\u6599\uff0c\u533f\u540d\u7c7b\u6ca1\u6709\u540d\u79f0\u3002\u5b83\u4e0d\u662f\u5916\u90e8\u7c7b\u7684\u6210\u5458\u3002\u5b83\u4e0d\u662f\u4e0e\u5176\u4ed6\u6210\u5458\u4e00\u8d77\u58f0\u660e\u7684\uff0c\u800c\u662f\u5728\u4f7f\u7528\u65f6\u540c\u65f6\u58f0\u660e\u548c\u5b9e\u4f8b\u5316\u3002\u533f\u540d\u7c7b\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u7528\u5728\u4efb\u4f55\u4e00\u4e2a\u53ef\u4ee5\u7528\u8868\u8fbe\u5f0f\u7684\u5730\u65b9\u3002\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u51fa\u73b0\u5728\u975e\u9759\u6001\u73af\u5883\u4e2d\u65f6\uff0c\u533f\u540d\u7c7b\u624d\u6301\u6709\u5916\u90e8\u7c7b\u5b9e\u4f8b\u3002\u4f46\u662f\uff0c\u5373\u4f7f\u5b83\u4eec\u51fa\u73b0\u5728\u9759\u6001\u73af\u5883\u4e2d\uff0c\u5b83\u4eec\u4e5f\u4e0d\u80fd\u6709\u9664\u5e38\u91cf\uff08final \u4fee\u9970\u7684\u57fa\u672c\u7c7b\u578b\u6216\u8005\u521d\u59cb\u5316\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32 ","[JLS, 4.12.4]","\uff09\u4ee5\u5916\u7684\u4efb\u4f55\u9759\u6001\u6210\u5458\u3002"),(0,n.kt)("p",null,"There are many limitations on the applicability of anonymous classes. You can\u2019t instantiate them except at the point they\u2019re declared. You can\u2019t perform instanceof tests or do anything else that requires you to name the class. You can\u2019t declare an anonymous class to implement multiple interfaces or to extend a class and implement an interface at the same time. Clients of an anonymous class can\u2019t invoke any members except those it inherits from its supertype. Because anonymous classes occur in the midst of expressions, they must be kept short\u2014about ten lines or fewer\u2014or readability will suffer."),(0,n.kt)("p",null,"\u533f\u540d\u7c7b\u7684\u4f7f\u7528\u6709\u5f88\u591a\u9650\u5236\u3002\u9664\u975e\u5728\u58f0\u660e\u5b83\u4eec\u7684\u65f6\u5019\uff0c\u4f60\u4e0d\u80fd\u5b9e\u4f8b\u5316\u5b83\u4eec\u3002\u4f60\u4e0d\u80fd\u6267\u884c instanceof \u6d4b\u8bd5\uff0c\u4e5f\u4e0d\u80fd\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u9700\u8981\u547d\u540d\u7c7b\u7684\u64cd\u4f5c\u3002\u4f60\u4e0d\u80fd\u58f0\u660e\u4e00\u4e2a\u533f\u540d\u7c7b\u6765\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\u6216\u6269\u5c55\u4e00\u4e2a\u7c7b\u5e76\u540c\u65f6\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\u3002\u533f\u540d\u7c7b\u7684\u4f7f\u7528\u8005\u9664\u4e86\u4ece\u8d85\u7c7b\u7ee7\u627f\u7684\u6210\u5458\u5916\uff0c\u4e0d\u80fd\u8c03\u7528\u4efb\u4f55\u6210\u5458\u3002\u56e0\u4e3a\u533f\u540d\u7c7b\u51fa\u73b0\u5728\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6240\u4ee5\u5b83\u4eec\u5fc5\u987b\u4fdd\u6301\u7b80\u77ed\u2014\u2014\u5927\u7ea6 10 \u884c\u6216\u66f4\u77ed\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u53ef\u8bfb\u6027\u3002"),(0,n.kt)("p",null,"Before lambdas were added to Java (Chapter 6), anonymous classes were the preferred means of creating small function objects and process objects on the fly, but lambdas are now preferred (Item 42). Another common use of anonymous classes is in the implementation of static factory methods (see intArrayAsList in Item 20)."),(0,n.kt)("p",null,"\u5728 lambda \u8868\u8fbe\u5f0f\u88ab\u6dfb\u52a0\u5230 Java\uff08Chapter 6\uff09\u4e4b\u524d\uff0c\u533f\u540d\u7c7b\u662f\u52a8\u6001\u521b\u5efa\u5c0f\u578b\u51fd\u6570\u5bf9\u8c61\u548c\u8fdb\u7a0b\u5bf9\u8c61\u7684\u9996\u9009\u65b9\u6cd5\uff0c\u4f46 lambda \u8868\u8fbe\u5f0f\u73b0\u5728\u662f\u9996\u9009\u65b9\u6cd5\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-7-Item-42-Prefer-lambdas-to-anonymous-classes"},"Item-42"),"\uff09\u3002\u533f\u540d\u7c7b\u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u5b9e\u73b0\u9759\u6001\u5de5\u5382\u65b9\u6cd5\uff08\u53c2\u89c1 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes"},"Item-20")," \u4e2d\u7684 intArrayAsList \u7c7b\uff09\u3002"),(0,n.kt)("p",null,"Local classes are the least frequently used of the four kinds of nested classes. A local class can be declared practically anywhere a local variable can be declared and obeys the same scoping rules. Local classes have attributes in common with each of the other kinds of nested classes. Like member classes, they have names and can be used repeatedly. Like anonymous classes, they have enclosing instances only if they are defined in a nonstatic context, and they cannot contain static members. And like anonymous classes, they should be kept short so as not to harm readability."),(0,n.kt)("p",null,"\u5c40\u90e8\u7c7b\u662f\u56db\u79cd\u5d4c\u5957\u7c7b\u4e2d\u6700\u4e0d\u5e38\u7528\u7684\u3002\u5c40\u90e8\u7c7b\u51e0\u4e4e\u53ef\u4ee5\u5728\u4efb\u4f55\u80fd\u591f\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\u7684\u5730\u65b9\u4f7f\u7528\uff0c\u5e76\u4e14\u9075\u5b88\u76f8\u540c\u7684\u4f5c\u7528\u57df\u89c4\u5219\u3002\u5c40\u90e8\u7c7b\u5177\u6709\u4e0e\u5176\u4ed6\u5d4c\u5957\u7c7b\u76f8\u540c\u7684\u5c5e\u6027\u3002\u4e0e\u6210\u5458\u7c7b\u4e00\u6837\uff0c\u5b83\u4eec\u6709\u540d\u79f0\uff0c\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002\u4e0e\u533f\u540d\u7c7b\u4e00\u6837\uff0c\u5b83\u4eec\u53ea\u6709\u5728\u975e\u9759\u6001\u73af\u5883\u4e2d\u5b9a\u4e49\u7684\u60c5\u51b5\u4e0b\u624d\u5177\u6709\u5916\u90e8\u7c7b\u5b9e\u4f8b\uff0c\u800c\u4e14\u5b83\u4eec\u4e0d\u80fd\u5305\u542b\u9759\u6001\u6210\u5458\u3002\u548c\u533f\u540d\u7c7b\u4e00\u6837\uff0c\u5b83\u4eec\u5e94\u8be5\u4fdd\u6301\u7b80\u77ed\uff0c\u4ee5\u514d\u635f\u5bb3\u53ef\u8bfb\u6027\u3002"),(0,n.kt)("p",null,"To recap, there are four different kinds of nested classes, and each has its place. If a nested class needs to be visible outside of a single method or is too long to fit comfortably inside a method, use a member class. If each instance of a member class needs a reference to its enclosing instance, make it nonstatic; otherwise, make it static. Assuming the class belongs inside a method, if you need to create instances from only one location and there is a preexisting type that characterizes the class, make it an anonymous class; otherwise, make it a local class."),(0,n.kt)("p",null,"\u7b80\u5355\u56de\u987e\u4e00\u4e0b\uff0c\u6709\u56db\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u5d4c\u5957\u7c7b\uff0c\u6bcf\u4e00\u79cd\u90fd\u6709\u81ea\u5df1\u7684\u7528\u9014\u3002\u5982\u679c\u5d4c\u5957\u7684\u7c7b\u9700\u8981\u5728\u5355\u4e2a\u65b9\u6cd5\u4e4b\u5916\u53ef\u89c1\uff0c\u6216\u8005\u592a\u957f\uff0c\u4e0d\u9002\u5408\u653e\u5165\u65b9\u6cd5\u4e2d\uff0c\u5219\u4f7f\u7528\u6210\u5458\u7c7b\u3002\u9664\u975e\u6210\u5458\u7c7b\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u9700\u8981\u5f15\u7528\u5176\u5916\u90e8\u7c7b\u5b9e\u4f8b\uff0c\u8ba9\u5b83\u4fdd\u6301\u9759\u6001\u3002\u5047\u8bbe\u5d4c\u5957\u7c7b\u5c5e\u4e8e\u65b9\u6cd5\u5185\u90e8\uff0c\u5982\u679c\u4f60\u53ea\u9700\u8981\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u521b\u5efa\u5b9e\u4f8b\uff0c\u5e76\u4e14\u5b58\u5728\u4e00\u4e2a\u80fd\u591f\u63cf\u8ff0\u7c7b\u7684\u73b0\u6709\u7c7b\u578b\uff0c\u90a3\u4e48\u5c06\u5176\u8bbe\u7f6e\u4e3a\u533f\u540d\u7c7b\uff1b\u5426\u5219\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a\u5c40\u90e8\u7c7b\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-4-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-4-Item-23-Prefer-class-hierarchies-to-tagged-classes"},"Item 23: Prefer class hierarchies to tagged classes\uff08\u7c7b\u5c42\u6b21\u7ed3\u6784\u4f18\u4e8e\u5e26\u6807\u7b7e\u7684\u7c7b\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-4-Item-25-Limit-source-files-to-a-single-top-level-class"},"Item 25: Limit source files to a single top level class\uff08\u6e90\u6587\u4ef6\u4ec5\u9650\u6709\u5355\u4e2a\u9876\u5c42\u7c7b\uff09")))))}p.isMDXComponent=!0}}]);