"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9074],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=p(n),m=i,d=h["".concat(l,".").concat(m)]||h[m]||c[m]||o;return n?a.createElement(d,r(r({ref:t},u),{},{components:n})):a.createElement(d,r({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={},r=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-6/Chapter-6-Item-34-Use-enums-instead-of-int-constants",id:"Books/EffectiveJava3/Chapter-6/Chapter-6-Item-34-Use-enums-instead-of-int-constants",title:"Chapter-6-Item-34-Use-enums-instead-of-int-constants",description:"Chapter 6. Enums and Annotations\uff08\u679a\u4e3e\u548c\u6ce8\u89e3\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-6/Chapter-6-Item-34-Use-enums-instead-of-int-constants.md",sourceDirName:"Books/EffectiveJava3/Chapter-6",slug:"/Books/EffectiveJava3/Chapter-6/Chapter-6-Item-34-Use-enums-instead-of-int-constants",permalink:"/docs/Books/EffectiveJava3/Chapter-6/Chapter-6-Item-34-Use-enums-instead-of-int-constants",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-6/Chapter-6-Item-34-Use-enums-instead-of-int-constants.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-6-Introduction",permalink:"/docs/Books/EffectiveJava3/Chapter-6/Chapter-6-Introduction"},next:{title:"Chapter-6-Item-35-Use-instance-fields-instead-of-ordinals",permalink:"/docs/Books/EffectiveJava3/Chapter-6/Chapter-6-Item-35-Use-instance-fields-instead-of-ordinals"}},l={},p=[{value:"Chapter 6. Enums and Annotations\uff08\u679a\u4e3e\u548c\u6ce8\u89e3\uff09",id:"chapter-6-enums-and-annotations\u679a\u4e3e\u548c\u6ce8\u89e3",level:2},{value:"Item 34: Use enums instead of int constants\uff08\u7528\u679a\u4e3e\u7c7b\u578b\u4ee3\u66ff int \u5e38\u91cf\uff09",id:"item-34-use-enums-instead-of-int-constants\u7528\u679a\u4e3e\u7c7b\u578b\u4ee3\u66ff-int-\u5e38\u91cf",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"chapter-6-enums-and-annotations\u679a\u4e3e\u548c\u6ce8\u89e3"},"Chapter 6. Enums and Annotations\uff08\u679a\u4e3e\u548c\u6ce8\u89e3\uff09"),(0,i.kt)("h3",{id:"item-34-use-enums-instead-of-int-constants\u7528\u679a\u4e3e\u7c7b\u578b\u4ee3\u66ff-int-\u5e38\u91cf"},"Item 34: Use enums instead of int constants\uff08\u7528\u679a\u4e3e\u7c7b\u578b\u4ee3\u66ff int \u5e38\u91cf\uff09"),(0,i.kt)("p",null,"An enumerated type is a type whose legal values consist of a fixed set of constants, such as the seasons of the year, the planets in the solar system, or the suits in a deck of playing cards. Before enum types were added to the language, a common pattern for representing enumerated types was to declare a group of named int constants, one for each member of the type:"),(0,i.kt)("p",null,"\u679a\u4e3e\u7c7b\u578b\u662f\u8fd9\u6837\u4e00\u79cd\u7c7b\u578b\uff1a\u5b83\u5408\u6cd5\u7684\u503c\u7531\u4e00\u7ec4\u56fa\u5b9a\u7684\u5e38\u91cf\u7ec4\u6210\uff0c\u5982\uff1a\u4e00\u5e74\u4e2d\u7684\u5b63\u8282\u3001\u592a\u9633\u7cfb\u4e2d\u7684\u884c\u661f\u6216\u6251\u514b\u724c\u4e2d\u7684\u82b1\u8272\u3002\u5728\u679a\u4e3e\u7c7b\u578b\u88ab\u6dfb\u52a0\u5230 JAVA \u4e4b\u524d\uff0c\u8868\u793a\u679a\u4e3e\u7c7b\u578b\u7684\u4e00\u79cd\u5e38\u89c1\u6a21\u5f0f\u662f\u58f0\u660e\u4e00\u7ec4 int \u7684\u5e38\u91cf\uff0c\u6bcf\u4e2a\u7c7b\u578b\u7684\u6210\u5458\u90fd\u6709\u4e00\u4e2a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// The int enum pattern - severely deficient!\npublic static final int APPLE_FUJI = 0;\npublic static final int APPLE_PIPPIN = 1;\npublic static final int APPLE_GRANNY_SMITH = 2;\npublic static final int ORANGE_NAVEL = 0;\npublic static final int ORANGE_TEMPLE = 1;\npublic static final int ORANGE_BLOOD = 2;\n")),(0,i.kt)("p",null,"This technique, known as the int enum pattern, has many shortcomings. It provides nothing in the way of type safety and little in the way of expressive power. The compiler won\u2019t complain if you pass an apple to a method that expects an orange, compare apples to oranges with the == operator, or worse:"),(0,i.kt)("p",null,"\u8fd9\u79cd\u6280\u672f\u79f0\u4e3a int \u679a\u4e3e\u6a21\u5f0f\uff0c\u5b83\u6709\u8bb8\u591a\u7f3a\u70b9\u3002\u5b83\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u7c7b\u578b\u5b89\u5168\u6027\uff0c\u5e76\u4e14\u51e0\u4e4e\u4e0d\u5177\u5907\u8868\u73b0\u529b\u3002\u5982\u679c\u4f60\u4f20\u9012\u4e00\u4e2a\u82f9\u679c\u7ed9\u65b9\u6cd5\uff0c\u5e0c\u671b\u5f97\u5230\u4e00\u4e2a\u6a58\u5b50\uff0c\u4f7f\u7528 == \u64cd\u4f5c\u7b26\u6bd4\u8f83\u82f9\u679c\u548c\u6a58\u5b50\u65f6\u7f16\u8bd1\u5668\u5e76\u4e0d\u4f1a\u63d0\u793a\u9519\u8bef\uff0c\u6216\u66f4\u7cdf\u7684\u60c5\u51b5\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Tasty citrus flavored applesauce!\nint i = (APPLE_FUJI - ORANGE_TEMPLE) / APPLE_PIPPIN;\n")),(0,i.kt)("p",null,"Note that the name of each apple constant is prefixed with APPLE",(0,i.kt)("em",{parentName:"p"}," and the name of each orange constant is prefixed with ORANGE"),". This is because Java doesn\u2019t provide namespaces for int enum groups. Prefixes prevent name clashes when two int enum groups have identically named constants, for example between ELEMENT_MERCURY and PLANET_MERCURY."),(0,i.kt)("p",null,"\u6ce8\u610f\uff0c\u6bcf\u4e2a apple \u5e38\u91cf\u7684\u540d\u79f0\u90fd\u4ee5 APPLE",(0,i.kt)("em",{parentName:"p"}," \u4e3a\u524d\u7f00\uff0c\u6bcf\u4e2a orange \u5e38\u91cf\u7684\u540d\u79f0\u90fd\u4ee5 ORANGE")," \u4e3a\u524d\u7f00\u3002\u8fd9\u662f\u56e0\u4e3a Java \u4e0d\u4e3a\u8fd9\u4e9b int \u679a\u4e3e\u63d0\u4f9b\u540d\u79f0\u7a7a\u95f4\u3002\u5f53\u4e24\u7ec4 int \u679a\u4e3e\u5177\u6709\u76f8\u540c\u7684\u547d\u540d\u5e38\u91cf\u65f6\uff0c\u524d\u7f00\u53ef\u4ee5\u9632\u6b62\u540d\u79f0\u51b2\u7a81\uff0c\u4f8b\u5982 ELEMENT_MERCURY \u548c PLANET_MERCURY \u4e4b\u95f4\u7684\u51b2\u7a81\u3002"),(0,i.kt)("p",null,"Programs that use int enums are brittle. Because int enums are constant variables ","[JLS, 4.12.4]",", their int values are compiled into the clients that use them ","[JLS, 13.1]",". If the value associated with an int enum is changed, its clients must be recompiled. If not, the clients will still run, but their behavior will be incorrect."),(0,i.kt)("p",null,"\u4f7f\u7528 int \u679a\u4e3e\u7684\u7a0b\u5e8f\u5f88\u8106\u5f31\u3002\u56e0\u4e3a int \u679a\u4e3e\u662f\u5e38\u91cf\u53d8\u91cf ","[JLS, 4.12.4]","\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u503c\u88ab\u7f16\u8bd1\u5230\u4f7f\u7528\u5b83\u4eec\u7684\u5ba2\u6237\u7aef\u4e2d ","[JLS, 13.1]","\u3002\u5982\u679c\u4e0e int \u679a\u4e3e\u5173\u8054\u7684\u503c\u53d1\u751f\u4e86\u66f4\u6539\uff0c\u5219\u5fc5\u987b\u91cd\u65b0\u7f16\u8bd1\u5ba2\u6237\u7aef\u3002\u5982\u679c\u4e0d\u91cd\u65b0\u7f16\u8bd1\uff0c\u5ba2\u6237\u7aef\u4ecd\u7136\u53ef\u4ee5\u8fd0\u884c\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u884c\u4e3a\u5c06\u662f\u9519\u8bef\u7684\u3002"),(0,i.kt)("p",null,"There is no easy way to translate int enum constants into printable strings. If you print such a constant or display it from a debugger, all you see is a number, which isn\u2019t very helpful. There is no reliable way to iterate over all the int enum constants in a group, or even to obtain the size of an int enum group."),(0,i.kt)("p",null,"\u6ca1\u6709\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u53ef\u4ee5\u5c06 int \u679a\u4e3e\u5e38\u91cf\u8f6c\u6362\u4e3a\u53ef\u6253\u5370\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u4f60\u6253\u5370\u8fd9\u6837\u7684\u5e38\u91cf\u6216\u4ece\u8c03\u8bd5\u5668\u4e2d\u663e\u793a\u5b83\uff0c\u4f60\u6240\u770b\u5230\u7684\u53ea\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e0d\u662f\u5f88\u6709\u5e2e\u52a9\u3002\u6ca1\u6709\u53ef\u9760\u7684\u65b9\u6cd5\u53ef\u4ee5\u904d\u5386\u7ec4\u4e2d\u7684\u6240\u6709 int \u679a\u4e3e\u5e38\u91cf\uff0c\u751a\u81f3\u65e0\u6cd5\u83b7\u5f97\u7ec4\u7684\u5927\u5c0f\u3002"),(0,i.kt)("p",null,"You may encounter a variant of this pattern in which String constants are used in place of int constants. This variant, known as the String enum pattern, is even less desirable. While it does provide printable strings for its constants, it can lead naive users to hard-code string constants into client code instead of using field names. If such a hard-coded string constant contains a typographical error, it will escape detection at compile time and result in bugs at runtime. Also, it might lead to performance problems, because it relies on string comparisons."),(0,i.kt)("p",null,"\u53ef\u80fd\u4f1a\u9047\u5230\u8fd9\u79cd\u6a21\u5f0f\u7684\u53e6\u4e00\u79cd\u5f62\u5f0f\uff1a\u4f7f\u7528 String \u5e38\u91cf\u4ee3\u66ff int \u5e38\u91cf\u3002\u8fd9\u79cd\u79f0\u4e3a String \u679a\u4e3e\u6a21\u5f0f\u7684\u53d8\u4f53\u751a\u81f3\u66f4\u4e0d\u53ef\u53d6\u3002\u867d\u7136\u5b83\u786e\u5b9e\u4e3a\u5e38\u91cf\u63d0\u4f9b\u4e86\u53ef\u6253\u5370\u7684\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0d\u77e5\u60c5\u7684\u7528\u6237\u5c06\u5b57\u7b26\u4e32\u5e38\u91cf\u786c\u7f16\u7801\u5230\u5ba2\u6237\u7aef\u4ee3\u7801\u4e2d\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5b57\u6bb5\u540d\u3002\u5982\u679c\u8fd9\u6837\u4e00\u4e2a\u786c\u7f16\u7801\u7684 String \u5e38\u91cf\u5305\u542b\u4e00\u4e2a\u6392\u7248\u9519\u8bef\uff0c\u5b83\u5c06\u5728\u7f16\u8bd1\u65f6\u8eb2\u8fc7\u68c0\u6d4b\uff0c\u5e76\u5728\u8fd0\u884c\u65f6\u5bfc\u81f4\u9519\u8bef\u3002\u6b64\u5916\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6027\u80fd\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8e\u5b57\u7b26\u4e32\u6bd4\u8f83\u3002"),(0,i.kt)("p",null,"Luckily, Java provides an alternative that avoids all the shortcomings of the int and string enum patterns and provides many added benefits. It is the enum type ","[JLS, 8.9]",". Here\u2019s how it looks in its simplest form:"),(0,i.kt)("p",null,"\u5e78\u8fd0\u7684\u662f\uff0cJava \u63d0\u4f9b\u4e86\u4e00\u79cd\u66ff\u4ee3\u65b9\u6848\uff0c\u5b83\u907f\u514d\u4e86 int \u548c String \u679a\u4e3e\u6a21\u5f0f\u7684\u6240\u6709\u7f3a\u70b9\uff0c\u5e76\u63d0\u4f9b\u4e86\u8bb8\u591a\u989d\u5916\u7684\u597d\u5904\u3002\u5b83\u5c31\u662f\u679a\u4e3e\u7c7b\u578b ","[JLS, 8.9]","\u3002\u4e0b\u9762\u662f\u5b83\u6700\u7b80\u5355\u7684\u5f62\u5f0f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public enum Apple { FUJI, PIPPIN, GRANNY_SMITH }\npublic enum Orange { NAVEL, TEMPLE, BLOOD }\n")),(0,i.kt)("p",null,"On the surface, these enum types may appear similar to those of other languages, such as C, C++, and C#, but appearances are deceiving. Java\u2019s enum types are full-fledged classes, far more powerful than their counterparts in these other languages, where enums are essentially int values."),(0,i.kt)("p",null,"\u4ece\u8868\u9762\u4e0a\u770b\uff0c\u8fd9\u4e9b\u679a\u4e3e\u7c7b\u578b\u53ef\u80fd\u4e0e\u5176\u4ed6\u8bed\u8a00\uff08\u5982 C\u3001c++ \u548c c#\uff09\u7684\u679a\u4e3e\u7c7b\u578b\u7c7b\u4f3c\uff0c\u4f46\u4e0d\u80fd\u53ea\u770b\u8868\u8c61\u3002Java \u7684\u679a\u4e3e\u7c7b\u578b\u662f\u6210\u719f\u7684\u7c7b\uff0c\u6bd4\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u679a\u4e3e\u7c7b\u578b\u529f\u80fd\u5f3a\u5927\u5f97\u591a\uff0c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u679a\u4e3e\u672c\u8d28\u4e0a\u662f int \u503c\u3002"),(0,i.kt)("p",null,"The basic idea behind Java\u2019s enum types is simple: they are classes that export one instance for each enumeration constant via a public static final field. Enum types are effectively final, by virtue of having no accessible constructors. Because clients can neither create instances of an enum type nor extend it, there can be no instances but the declared enum constants. In other words, enum types are instance-controlled (page 6). They are a generalization of singletons (Item 3), which are essentially single-element enums."),(0,i.kt)("p",null,"Java \u679a\u4e3e\u7c7b\u578b\u80cc\u540e\u7684\u57fa\u672c\u601d\u60f3\u5f88\u7b80\u5355\uff1a\u5b83\u4eec\u662f\u901a\u8fc7 public static final \u4fee\u9970\u7684\u5b57\u6bb5\u4e3a\u6bcf\u4e2a\u679a\u4e3e\u5e38\u91cf\u5bfc\u51fa\u4e00\u4e2a\u5b9e\u4f8b\u7684\u7c7b\u3002\u679a\u4e3e\u7c7b\u578b\u5b9e\u9645\u4e0a\u662f final \u7c7b\u578b\uff0c\u56e0\u4e3a\u6ca1\u6709\u53ef\u8bbf\u95ee\u7684\u6784\u9020\u51fd\u6570\u3002\u5ba2\u6237\u7aef\u65e2\u4e0d\u80fd\u521b\u5efa\u679a\u4e3e\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u4e0d\u80fd\u7ee7\u627f\u5b83\uff0c\u6240\u4ee5\u9664\u4e86\u58f0\u660e\u7684\u679a\u4e3e\u5e38\u91cf\u4e4b\u5916\uff0c\u4e0d\u80fd\u6709\u4efb\u4f55\u5b9e\u4f8b\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u679a\u4e3e\u7c7b\u578b\u662f\u5b9e\u4f8b\u53d7\u63a7\u7684\u7c7b\uff08\u53c2\u9605\u7b2c 6 \u9875\uff0c",(0,i.kt)("a",{parentName:"p",href:"./Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors"},"Item-1"),"\uff09\u3002\u5b83\u4eec\u662f\u5355\u4f8b\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"},"Item-3"),"\uff09\u7684\u63a8\u5e7f\u5e94\u7528\uff0c\u5355\u4f8b\u672c\u8d28\u4e0a\u662f\u5355\u5143\u7d20\u7684\u679a\u4e3e\u3002"),(0,i.kt)("p",null,"Enums provide compile-time type safety. If you declare a parameter to be of type Apple, you are guaranteed that any non-null object reference passed to the parameter is one of the three valid Apple values. Attempts to pass values of the wrong type will result in compile-time errors, as will attempts to assign an expression of one enum type to a variable of another, or to use the == operator to compare values of different enum types."),(0,i.kt)("p",null,"\u679a\u4e3e\u63d0\u4f9b\u7f16\u8bd1\u65f6\u7c7b\u578b\u7684\u5b89\u5168\u6027\u3002\u5982\u679c\u5c06\u53c2\u6570\u58f0\u660e\u4e3a Apple \u679a\u4e3e\u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u4fdd\u8bc1\u4f20\u9012\u7ed9\u8be5\u53c2\u6570\u7684\u4efb\u4f55\u975e\u7a7a\u5bf9\u8c61\u5f15\u7528\u90fd\u662f\u4e09\u4e2a\u6709\u6548 Apple \u679a\u4e3e\u503c\u4e4b\u4e00\u3002\u5c1d\u8bd5\u4f20\u9012\u9519\u8bef\u7c7b\u578b\u7684\u503c\u5c06\u5bfc\u81f4\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u5c06\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u6216\u8005\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u6bd4\u8f83\u4e0d\u540c\u679a\u4e3e\u7c7b\u578b\u7684\u503c\u540c\u6837\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002"),(0,i.kt)("p",null,"Enum types with identically named constants coexist peacefully because each type has its own namespace. You can add or reorder constants in an enum type without recompiling its clients because the fields that export the constants provide a layer of insulation between an enum type and its clients: constant values are not compiled into the clients as they are in the int enum patterns. Finally, you can translate enums into printable strings by calling their toString method."),(0,i.kt)("p",null,"\u540d\u79f0\u76f8\u540c\u7684\u679a\u4e3e\u7c7b\u578b\u5e38\u91cf\u80fd\u548c\u5e73\u5171\u5b58\uff0c\u56e0\u4e3a\u6bcf\u79cd\u7c7b\u578b\u90fd\u6709\u81ea\u5df1\u7684\u540d\u79f0\u7a7a\u95f4\u3002\u4f60\u53ef\u4ee5\u5728\u679a\u4e3e\u7c7b\u578b\u4e2d\u6dfb\u52a0\u6216\u91cd\u65b0\u6392\u5e8f\u5e38\u91cf\uff0c\u800c\u65e0\u9700\u91cd\u65b0\u7f16\u8bd1\u5176\u5ba2\u6237\u7aef\uff0c\u56e0\u4e3a\u5bfc\u51fa\u5e38\u91cf\u7684\u5b57\u6bb5\u5728\u679a\u4e3e\u7c7b\u578b\u53ca\u5176\u5ba2\u6237\u7aef\u4e4b\u95f4\u63d0\u4f9b\u4e86\u4e00\u5c42\u9694\u79bb\uff1a\u5e38\u91cf\u503c\u4e0d\u4f1a\u50cf\u5728 int \u679a\u4e3e\u6a21\u5f0f\u4e2d\u90a3\u6837\u7f16\u8bd1\u5230\u5ba2\u6237\u7aef\u4e2d\u3002\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u679a\u4e3e\u7684 toString \u65b9\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3a\u53ef\u6253\u5370\u7684\u5b57\u7b26\u4e32\u3002"),(0,i.kt)("p",null,"In addition to rectifying the deficiencies of int enums, enum types let you add arbitrary methods and fields and implement arbitrary interfaces. They provide high-quality implementations of all the Object methods (Chapter 3), they implement Comparable (Item 14) and Serializable (Chapter 12), and their serialized form is designed to withstand most changes to the enum type."),(0,i.kt)("p",null,"\u9664\u4e86\u7ea0\u6b63 int \u679a\u4e3e\u7684\u4e0d\u8db3\u4e4b\u5916\uff0c\u679a\u4e3e\u7c7b\u578b\u8fd8\u5141\u8bb8\u6dfb\u52a0\u4efb\u610f\u65b9\u6cd5\u548c\u5b57\u6bb5\u5e76\u5b9e\u73b0\u4efb\u610f\u63a5\u53e3\u3002\u5b83\u4eec\u63d0\u4f9b\u4e86\u6240\u6709 Object \u65b9\u6cd5\u7684\u9ad8\u8d28\u91cf\u5b9e\u73b0\uff08\u53c2\u9605 Chapter 3\uff09\uff0c\u8fd8\u5b9e\u73b0\u4e86 Comparable\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-3-Item-14-Consider-implementing-Comparable"},"Item-14"),"\uff09\u548c Serializable\uff08\u53c2\u9605 Chapter 12\uff09\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u88ab\u8bbe\u8ba1\u6210\u80fd\u591f\u9002\u5e94\u679a\u4e3e\u7c7b\u578b\u7684\u53ef\u53d8\u6027\u3002"),(0,i.kt)("p",null,"So why would you want to add methods or fields to an enum type? For starters, you might want to associate data with its constants. Our Apple and Orange types, for example, might benefit from a method that returns the color of the fruit, or one that returns an image of it. You can augment an enum type with any method that seems appropriate. An enum type can start life as a simple collection of enum constants and evolve over time into a full-featured abstraction."),(0,i.kt)("p",null,"\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8981\u5411\u679a\u4e3e\u7c7b\u578b\u6dfb\u52a0\u65b9\u6cd5\u6216\u5b57\u6bb5\u5462\uff1f\u9996\u5148\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5c06\u6570\u636e\u4e0e\u5176\u5e38\u91cf\u5173\u8054\u8d77\u6765\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u7684 Apple \u548c Orange \u7c7b\u578b\u53ef\u80fd\u53d7\u76ca\u4e8e\u8fd4\u56de\u6c34\u679c\u989c\u8272\u7684\u65b9\u6cd5\uff0c\u6216\u8005\u8fd4\u56de\u6c34\u679c\u56fe\u50cf\u7684\u65b9\u6cd5\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u9002\u5f53\u7684\u65b9\u6cd5\u6765\u6269\u5145\u679a\u4e3e\u7c7b\u578b\u3002\u679a\u4e3e\u7c7b\u578b\u53ef\u4ee5\u4ece\u679a\u4e3e\u5e38\u91cf\u7684\u7b80\u5355\u96c6\u5408\u5f00\u59cb\uff0c\u5e76\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u6f14\u53d8\u4e3a\u529f\u80fd\u9f50\u5168\u7684\u62bd\u8c61\u3002"),(0,i.kt)("p",null,"For a nice example of a rich enum type, consider the eight planets of our solar system. Each planet has a mass and a radius, and from these two attributes you can compute its surface gravity. This in turn lets you compute the weight of an object on the planet\u2019s surface, given the mass of the object. Here\u2019s how this enum looks. The numbers in parentheses after each enum constant are parameters that are passed to its constructor. In this case, they are the planet\u2019s mass and radius:"),(0,i.kt)("p",null,"\u5bf9\u4e8e\u5bcc\u679a\u4e3e\u7c7b\u578b\u6765\u8bf4\uff0c\u6709\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u8003\u8651\u6211\u4eec\u592a\u9633\u7cfb\u7684\u516b\u9897\u884c\u661f\u3002\u6bcf\u9897\u884c\u661f\u90fd\u6709\u8d28\u91cf\u548c\u534a\u5f84\uff0c\u901a\u8fc7\u8fd9\u4e24\u4e2a\u5c5e\u6027\u4f60\u53ef\u4ee5\u8ba1\u7b97\u51fa\u5b83\u7684\u8868\u9762\u5f15\u529b\u3002\u53cd\u8fc7\u6765\uff0c\u53ef\u4ee5\u7ed9\u5b9a\u7269\u4f53\u7684\u8d28\u91cf\uff0c\u8ba9\u4f60\u8ba1\u7b97\u51fa\u4e00\u4e2a\u7269\u4f53\u5728\u884c\u661f\u8868\u9762\u7684\u91cd\u91cf\u3002\u8fd9\u4e2a\u679a\u4e3e\u662f\u8fd9\u6837\u7684\u3002\u6bcf\u4e2a\u679a\u4e3e\u5e38\u91cf\u540e\u62ec\u53f7\u4e2d\u7684\u6570\u5b57\u662f\u4f20\u9012\u7ed9\u5176\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u5b83\u4eec\u662f\u884c\u661f\u7684\u8d28\u91cf\u548c\u534a\u5f84\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Enum type with data and behavior\npublic enum Planet {\n    MERCURY(3.302e+23, 2.439e6),\n    VENUS (4.869e+24, 6.052e6),\n    EARTH (5.975e+24, 6.378e6),\n    MARS (6.419e+23, 3.393e6),\n    JUPITER(1.899e+27, 7.149e7),\n    SATURN (5.685e+26, 6.027e7),\n    URANUS (8.683e+25, 2.556e7),\n    NEPTUNE(1.024e+26, 2.477e7);\n\n    private final double mass; // In kilograms\n    private final double radius; // In meters\n    private final double surfaceGravity; // In m / s^2\n\n    // Universal gravitational constant in m^3 / kg s^2\n    private static final double G = 6.67300E-11;\n\n    // Constructor\n    Planet(double mass, double radius) {\n        this.mass = mass;\n        this.radius = radius;\n        surfaceGravity = G * mass / (radius * radius);\n    }\n\n    public double mass() { return mass; }\n    public double radius() { return radius; }\n    public double surfaceGravity() { return surfaceGravity; }\n\n    public double surfaceWeight(double mass) {\n        return mass * surfaceGravity; // F = ma\n    }\n}\n")),(0,i.kt)("p",null,"It is easy to write a rich enum type such as Planet. ",(0,i.kt)("strong",{parentName:"p"},"To associate data with enum constants, declare instance fields and write a constructor that takes the data and stores it in the fields.")," Enums are by their nature immutable, so all fields should be final (Item 17). Fields can be public, but it is better to make them private and provide public accessors (Item 16). In the case of Planet, the constructor also computes and stores the surface gravity, but this is just an optimization. The gravity could be recomputed from the mass and radius each time it was used by the surfaceWeight method, which takes an object\u2019s mass and returns its weight on the planet represented by the constant. While the Planet enum is simple, it is surprisingly powerful. Here is a short program that takes the earth weight of an object (in any unit) and prints a nice table of the object\u2019s weight on all eight planets (in the same unit):"),(0,i.kt)("p",null,"\u7f16\u5199\u4e00\u4e2a\u5bcc\u679a\u4e3e\u7c7b\u578b\u5f88\u5bb9\u6613\uff0c\u5982\u4e0a\u8ff0\u7684 Planet\u3002",(0,i.kt)("strong",{parentName:"p"},"\u8981\u5c06\u6570\u636e\u4e0e\u679a\u4e3e\u5e38\u91cf\u5173\u8054\uff0c\u53ef\u58f0\u660e\u5b9e\u4f8b\u5b57\u6bb5\u5e76\u7f16\u5199\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u8be5\u6784\u9020\u51fd\u6570\u63a5\u53d7\u6570\u636e\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u5b57\u6bb5\u4e2d\u3002")," \u679a\u4e3e\u672c\u8d28\u4e0a\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u56e0\u6b64\u6240\u6709\u5b57\u6bb5\u90fd\u5e94\u8be5\u662f final\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-17-Minimize-mutability"},"Item-17"),"\uff09\u3002\u5b57\u6bb5\u53ef\u4ee5\u662f\u516c\u5171\u7684\uff0c\u4f46\u662f\u6700\u597d\u5c06\u5b83\u4eec\u8bbe\u7f6e\u4e3a\u79c1\u6709\u5e76\u63d0\u4f9b\u516c\u5171\u8bbf\u95ee\u5668\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-16-In-public-classes-use-accessor-methods-not-public-fields"},"Item-16"),"\uff09\u3002\u5728 Planet \u7684\u4f8b\u5b50\u4e2d\uff0c\u6784\u9020\u51fd\u6570\u8fd8\u8ba1\u7b97\u548c\u5b58\u50a8\u8868\u9762\u91cd\u529b\uff0c\u4f46\u8fd9\u53ea\u662f\u4e00\u4e2a\u4f18\u5316\u3002\u6bcf\u4e00\u6b21\u4f7f\u7528 surfaceWeight \u65b9\u6cd5\u65f6\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u8d28\u91cf\u548c\u534a\u5f84\u91cd\u65b0\u8ba1\u7b97\u91cd\u529b\u3002surfaceWeight \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u7269\u4f53\u7684\u8d28\u91cf\uff0c\u5e76\u8fd4\u56de\u5176\u5728\u8be5\u5e38\u6570\u6240\u8868\u793a\u7684\u884c\u661f\u4e0a\u7684\u91cd\u91cf\u3002\u867d\u7136 Planet \u679a\u4e3e\u5f88\u7b80\u5355\uff0c\u4f46\u5b83\u7684\u529b\u91cf\u60ca\u4eba\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u77ed\u7684\u7a0b\u5e8f\uff0c\u5b83\u83b7\u53d6\u4e00\u4e2a\u7269\u4f53\u7684\u5730\u7403\u91cd\u91cf\uff08\u4ee5\u4efb\u4f55\u5355\u4f4d\u8868\u793a\uff09\uff0c\u5e76\u6253\u5370\u4e00\u4e2a\u6f02\u4eae\u7684\u8868\u683c\uff0c\u663e\u793a\u8be5\u7269\u4f53\u5728\u6240\u6709 8 \u4e2a\u884c\u661f\u4e0a\u7684\u91cd\u91cf\uff08\u4ee5\u76f8\u540c\u7684\u5355\u4f4d\u8868\u793a\uff09\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public class WeightTable {\n    public static void main(String[] args) {\n        double earthWeight = Double.parseDouble(args[0]);\n        double mass = earthWeight / Planet.EARTH.surfaceGravity();\n    for (Planet p : Planet.values())\n        System.out.printf("Weight on %s is %f%n",p, p.surfaceWeight(mass));\n    }\n}\n')),(0,i.kt)("p",null,"Note that Planet, like all enums, has a static values method that returns an array of its values in the order they were declared. Note also that the toString method returns the declared name of each enum value, enabling easy printing by println and printf. If you\u2019re dissatisfied with this string representation, you can change it by overriding the toString method. Here is the result of running our WeightTable program (which doesn\u2019t override toString) with the command line argument 185:"),(0,i.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0cPlanet \u548c\u6240\u6709\u679a\u4e3e\u4e00\u6837\uff0c\u6709\u4e00\u4e2a\u9759\u6001 values() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u6309\u7167\u58f0\u660e\u503c\u7684\u987a\u5e8f\u8fd4\u56de\u5176\u503c\u7684\u6570\u7ec4\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0ctoString \u65b9\u6cd5\u8fd4\u56de\u6bcf\u4e2a\u679a\u4e3e\u503c\u7684\u58f0\u660e\u540d\u79f0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7 println \u548c printf \u8f7b\u677e\u6253\u5370\u3002\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u4e0d\u6ee1\u610f\uff0c\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 toString \u65b9\u6cd5\u6765\u66f4\u6539\u5b83\u3002\u4e0b\u9762\u662f\u7528\u547d\u4ee4\u884c\u8fd0\u884c\u6211\u4eec\u7684 WeightTable \u7a0b\u5e8f\uff08\u672a\u8986\u76d6 toString\uff09\u7684\u7ed3\u679c\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Weight on MERCURY is 69.912739\nWeight on VENUS is 167.434436\nWeight on EARTH is 185.000000\nWeight on MARS is 70.226739\nWeight on JUPITER is 467.990696\nWeight on SATURN is 197.120111\nWeight on URANUS is 167.398264\nWeight on NEPTUNE is 210.208751\n")),(0,i.kt)("p",null,"Until 2006, two years after enums were added to Java, Pluto was a planet. This raises the question \u201cwhat happens when you remove an element from an enum type?\u201d The answer is that any client program that doesn\u2019t refer to the removed element will continue to work fine. So, for example, our WeightTable program would simply print a table with one fewer row. And what of a client program that refers to the removed element (in this case, Planet.Pluto)? If you recompile the client program, the compilation will fail with a helpful error message at the line that refers to the erstwhile planet; if you fail to recompile the client, it will throw a helpful exception from this line at runtime. This is the best behavior you could hope for, far better than what you\u2019d get with the int enum pattern."),(0,i.kt)("p",null,"\u76f4\u5230 2006 \u5e74\uff0c\u4e5f\u5c31\u662f\u679a\u4e3e\u88ab\u6dfb\u52a0\u5230 Java \u7684\u4e24\u5e74\u540e\uff0c\u51a5\u738b\u661f\u8fd8\u662f\u4e00\u9897\u884c\u661f\u3002\u8fd9\u5c31\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u300c\u4ece\u679a\u4e3e\u7c7b\u578b\u4e2d\u5220\u9664\u5143\u7d20\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48?\u300d\u7b54\u6848\u662f\uff0c\u4efb\u4f55\u4e0d\u5f15\u7528\u88ab\u5220\u9664\u5143\u7d20\u7684\u5ba2\u6237\u7aef\u7a0b\u5e8f\u5c06\u7ee7\u7eed\u6b63\u5e38\u5de5\u4f5c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u7684 WeightTable \u7a0b\u5e8f\u53ea\u9700\u6253\u5370\u4e00\u4e2a\u5c11\u4e00\u884c\u7684\u8868\u3002\u90a3\u4e48\u5f15\u7528\u88ab\u5220\u9664\u5143\u7d20\uff08\u5728\u672c\u4f8b\u4e2d\u662f Planet.Pluto\uff09\u7684\u5ba2\u6237\u7aef\u7a0b\u5e8f\u53c8\u5982\u4f55\u5462\uff1f\u5982\u679c\u91cd\u65b0\u7f16\u8bd1\u5ba2\u6237\u7aef\u7a0b\u5e8f\uff0c\u7f16\u8bd1\u5c06\u5931\u8d25\uff0c\u5e76\u5728\u5f15\u7528\u8be5\u300c\u8fc7\u65f6\u300d\u884c\u661f\u7684\u884c\u4e2d\u663e\u793a\u4e00\u6761\u6709\u7528\u7684\u9519\u8bef\u6d88\u606f\uff1b\u5982\u679c\u4f60\u672a\u80fd\u91cd\u65b0\u7f16\u8bd1\u5ba2\u6237\u7aef\uff0c\u5b83\u5c06\u5728\u8fd0\u884c\u65f6\u4ece\u8fd9\u884c\u629b\u51fa\u4e00\u4e2a\u6709\u7528\u7684\u5f02\u5e38\u3002\u8fd9\u662f\u4f60\u6240\u5e0c\u671b\u7684\u6700\u4f73\u884c\u4e3a\uff0c\u6bd4 int \u679a\u4e3e\u6a21\u5f0f\u8981\u597d\u5f97\u591a\u3002"),(0,i.kt)("p",null,"Some behaviors associated with enum constants may need to be used only from within the class or package in which the enum is defined. Such behaviors are best implemented as private or package-private methods. Each constant then carries with it a hidden collection of behaviors that allows the class or package containing the enum to react appropriately when presented with the constant. Just as with other classes, unless you have a compelling reason to expose an enum method to its clients, declare it private or, if need be, package-private (Item 15)."),(0,i.kt)("p",null,"\u4e0e\u679a\u4e3e\u5e38\u91cf\u76f8\u5173\u7684\u4e00\u4e9b\u884c\u4e3a\u53ef\u80fd\u53ea\u9700\u8981\u5728\u5b9a\u4e49\u679a\u4e3e\u7684\u7c7b\u6216\u5305\u4e2d\u4f7f\u7528\u3002\u6b64\u7c7b\u884c\u4e3a\u6700\u597d\u4ee5\u79c1\u6709\u6216\u5305\u79c1\u6709\u65b9\u6cd5\u6765\u5b9e\u73b0\u3002\u7136\u540e\uff0c\u6bcf\u4e2a\u5e38\u91cf\u90fd\u5e26\u6709\u4e00\u4e2a\u9690\u85cf\u7684\u884c\u4e3a\u96c6\u5408\uff0c\u5141\u8bb8\u5305\u542b\u679a\u4e3e\u7684\u7c7b\u6216\u5305\u5728\u4f7f\u7528\u8be5\u5e38\u91cf\u65f6\u505a\u51fa\u9002\u5f53\u7684\u53cd\u5e94\u3002\u4e0e\u5176\u4ed6\u7c7b\u4e00\u6837\uff0c\u9664\u975e\u4f60\u6709\u5145\u5206\u7684\u7406\u7531\u5411\u5176\u5ba2\u6237\u7aef\u516c\u5f00\u679a\u4e3e\u65b9\u6cd5\uff0c\u5426\u5219\u5c06\u5176\u58f0\u660e\u4e3a\u79c1\u6709\u7684\uff0c\u6216\u8005\u5728\u5fc5\u8981\u65f6\u58f0\u660e\u4e3a\u5305\u79c1\u6709\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-15-Minimize-the-accessibility-of-classes-and-members"},"Item-15"),"\uff09\u3002"),(0,i.kt)("p",null,"If an enum is generally useful, it should be a top-level class; if its use is tied to a specific top-level class, it should be a member class of that top-level class (Item 24). For example, the java.math.RoundingMode enum represents a rounding mode for decimal fractions. These rounding modes are used by the BigDecimal class, but they provide a useful abstraction that is not fundamentally tied to BigDecimal. By making RoundingMode a top-level enum, the library designers encourage any programmer who needs rounding modes to reuse this enum, leading to increased consistency across APIs."),(0,i.kt)("p",null,"\u901a\u5e38\uff0c\u5982\u679c\u4e00\u4e2a\u679a\u4e3e\u7528\u9014\u5e7f\u6cdb\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u662f\u9876\u7ea7\u7c7b\uff1b\u5982\u679c\u5b83\u88ab\u7ed1\u5b9a\u5230\u4e00\u4e2a\u7279\u5b9a\u7684\u9876\u7ea7\u7c7b\u4f7f\u7528\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u662f\u8fd9\u4e2a\u9876\u7ea7\u7c7b\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic"},"Item-24"),"\uff09\u7684\u6210\u5458\u7c7b\u3002\u4f8b\u5982\uff0cjava.math.RoundingMode \u679a\u4e3e\u8868\u793a\u5c0f\u6570\u90e8\u5206\u7684\u820d\u5165\u6a21\u5f0f\u3002BigDecimal \u7c7b\u4f7f\u7528\u8fd9\u4e9b\u56db\u820d\u4e94\u5165\u6a21\u5f0f\uff0c\u4f46\u662f\u5b83\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u7528\u7684\u62bd\u8c61\uff0c\u8fd9\u4e2a\u62bd\u8c61\u4e0e BigDecimal \u6ca1\u6709\u672c\u8d28\u4e0a\u7684\u8054\u7cfb\u3002\u901a\u8fc7\u4f7f RoundingMode \u6210\u4e3a\u9876\u7ea7\u679a\u4e3e\uff0c\u5e93\u8bbe\u8ba1\u4eba\u5458\u652f\u6301\u4efb\u4f55\u9700\u8981\u820d\u5165\u6a21\u5f0f\u7684\u7a0b\u5e8f\u5458\u590d\u7528\u8be5\u679a\u4e3e\uff0c\u4ece\u800c\u63d0\u9ad8 API \u4e4b\u95f4\u7684\u4e00\u81f4\u6027\u3002"),(0,i.kt)("p",null,"The techniques demonstrated in the Planet example are sufficient for most enum types, but sometimes you need more. There is different data associated with each Planet constant, but sometimes you need to associate fundamentally different behavior with each constant. For example, suppose you are writing an enum type to represent the operations on a basic four-function calculator and you want to provide a method to perform the arithmetic operation represented by each constant. One way to achieve this is to switch on the value of the enum:"),(0,i.kt)("p",null,"Planet \u793a\u4f8b\u4e2d\u6f14\u793a\u7684\u6280\u672f\u5bf9\u4e8e\u5927\u591a\u6570\u679a\u4e3e\u7c7b\u578b\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u4e86\uff0c\u4f46\u6709\u65f6\u8fd8\u9700\u8981\u66f4\u591a\u3002\u6bcf\u4e2a\u884c\u661f\u5e38\u6570\u90fd\u6709\u4e0d\u540c\u7684\u6570\u636e\uff0c\u4f46\u6709\u65f6\u4f60\u9700\u8981\u5c06\u57fa\u672c\u4e0d\u540c\u7684\u884c\u4e3a\u4e0e\u6bcf\u4e2a\u5e38\u6570\u8054\u7cfb\u8d77\u6765\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u6765\u8868\u793a\u4e00\u4e2a\u57fa\u672c\u7684\u56db\u5219\u8fd0\u7b97\u8ba1\u7b97\u5668\u4e0a\u7684\u64cd\u4f5c\uff0c\u5e76\u4e14\u4f60\u5e0c\u671b\u63d0\u4f9b\u4e00\u4e2a\u65b9\u6cd5\u6765\u6267\u884c\u7531\u6bcf\u4e2a\u5e38\u91cf\u8868\u793a\u7684\u7b97\u672f\u64cd\u4f5c\u3002\u5b9e\u73b0\u8fd9\u4e00\u70b9\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u7528 switch \u63a5\u6536\u679a\u4e3e\u503c\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Enum type that switches on its own value - questionable\npublic enum Operation {\n    PLUS, MINUS, TIMES, DIVIDE;\n    // Do the arithmetic operation represented by this constant\n    public double apply(double x, double y) {\n        switch(this) {\n            case PLUS: return x + y;\n            case MINUS: return x - y;\n            case TIMES: return x * y;\n            case DIVIDE: return x / y;\n        }\n    throw new AssertionError("Unknown op: "+ this);\n    }\n}\n')),(0,i.kt)("p",null,"This code works, but it isn\u2019t very pretty. It won\u2019t compile without the throw statement because the end of the method is technically reachable, even though it will never be reached ","[JLS, 14.21]",". Worse, the code is fragile. If you add a new enum constant but forget to add a corresponding case to the switch, the enum will still compile, but it will fail at runtime when you try to apply the new operation."),(0,i.kt)("p",null,"\u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u4e0d\u662f\u5f88\u6f02\u4eae\u3002\u5982\u679c\u6ca1\u6709 throw \u8bed\u53e5\uff0c\u5b83\u5c06\u65e0\u6cd5\u7f16\u8bd1\uff0c\u56e0\u4e3a\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u65b9\u6cd5\u7684\u7ed3\u5c3e\u662f\u53ef\u5230\u8fbe\u7684\uff0c\u5c3d\u7ba1\u5b83\u786e\u5b9e\u6c38\u8fdc\u4e0d\u4f1a\u5230\u8fbe ","[JLS, 14.21]","\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u4ee3\u7801\u5f88\u8106\u5f31\u3002\u5982\u679c\u4f60\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u679a\u4e3e\u5e38\u91cf\uff0c\u4f46\u5fd8\u8bb0\u5411 switch \u6dfb\u52a0\u76f8\u5e94\u7684 case\uff0c\u5219\u679a\u4e3e\u4ecd\u5c06\u7f16\u8bd1\uff0c\u4f46\u5728\u8fd0\u884c\u65f6\u5c1d\u8bd5\u5e94\u7528\u65b0\u64cd\u4f5c\u65f6\u5c06\u5931\u8d25\u3002"),(0,i.kt)("p",null,"Luckily, there is a better way to associate a different behavior with each enum constant: declare an abstract apply method in the enum type, and override it with a concrete method for each constant in a constant-specific class body. Such methods are known as constant-specific method implementations:"),(0,i.kt)("p",null,"\u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u6cd5\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u884c\u4e3a\u4e0e\u6bcf\u4e2a\u679a\u4e3e\u5e38\u91cf\u5173\u8054\u8d77\u6765\uff1a\u5728\u679a\u4e3e\u7c7b\u578b\u4e2d\u58f0\u660e\u4e00\u4e2a\u62bd\u8c61\u7684 apply \u65b9\u6cd5\uff0c\u5e76\u7528\u4e00\u4e2a\u7279\u5b9a\u4e8e\u5e38\u91cf\u7684\u7c7b\u4f53\u4e2d\u7684\u6bcf\u4e2a\u5e38\u91cf\u7684\u5177\u4f53\u65b9\u6cd5\u8986\u76d6\u5b83\u3002\u8fd9\u4e9b\u65b9\u6cd5\u79f0\u4e3a\u7279\u5b9a\u5e38\u91cf\u65b9\u6cd5\u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Enum type with constant-specific method implementations\npublic enum Operation {\n    PLUS {public double apply(double x, double y){return x + y;}},\n    MINUS {public double apply(double x, double y){return x - y;}},\n    TIMES {public double apply(double x, double y){return x * y;}},\n    DIVIDE{public double apply(double x, double y){return x / y;}};\n    public abstract double apply(double x, double y);\n}\n")),(0,i.kt)("p",null,"If you add a new constant to the second version of Operation, it is unlikely that you\u2019ll forget to provide an apply method, because the method immediately follows each constant declaration. In the unlikely event that you do forget, the compiler will remind you because abstract methods in an enum type must be overridden with concrete methods in all of its constants."),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u5728 Operation \u679a\u4e3e\u7684\u7b2c\u4e8c\u4e2a\u7248\u672c\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5e38\u91cf\uff0c\u90a3\u4e48\u4f60\u4e0d\u592a\u53ef\u80fd\u5fd8\u8bb0\u63d0\u4f9b\u4e00\u4e2a apply \u65b9\u6cd5\uff0c\u56e0\u4e3a\u8be5\u65b9\u6cd5\u7d27\u8ddf\u6bcf\u4e2a\u5e38\u91cf\u58f0\u660e\u3002\u5728\u4e0d\u592a\u53ef\u80fd\u5fd8\u8bb0\u7684\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u4f1a\u63d0\u9192\u4f60\uff0c\u56e0\u4e3a\u679a\u4e3e\u7c7b\u578b\u4e2d\u7684\u62bd\u8c61\u65b9\u6cd5\u5fc5\u987b\u7528\u5176\u6240\u6709\u5e38\u91cf\u4e2d\u7684\u5177\u4f53\u65b9\u6cd5\u8986\u76d6\u3002"),(0,i.kt)("p",null,"Constant-specific method implementations can be combined with constantspecific data. For example, here is a version of Operation that overrides the toString method to return the symbol commonly associated with the operation:"),(0,i.kt)("p",null,"\u7279\u5b9a\u5e38\u91cf\u65b9\u6cd5\u5b9e\u73b0\u53ef\u4ee5\u4e0e\u7279\u5b9a\u4e8e\u5e38\u91cf\u7684\u6570\u636e\u76f8\u7ed3\u5408\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u662f Operation \u679a\u4e3e\u7684\u4e00\u4e2a\u7248\u672c\uff0c\u5b83\u91cd\u5199 toString \u65b9\u6cd5\u6765\u8fd4\u56de\u4e0e\u64cd\u4f5c\u76f8\u5173\u7684\u7b26\u53f7\uff1a"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a\u539f\u6587 constantspecific data \u5e94\u4fee\u6539\u4e3a constant-specific data \uff0c\u8bd1\u4e3a\u300c\u7279\u5b9a\u5e38\u91cf\u6570\u636e\u300d")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Enum type with constant-specific class bodies and data\npublic enum Operation {\n    PLUS("+") {\n        public double apply(double x, double y) { return x + y; }\n    },\n    MINUS("-") {\n        public double apply(double x, double y) { return x - y; }\n    },\n    TIMES("*") {\n        public double apply(double x, double y) { return x * y; }\n    },\n    DIVIDE("/") {\n        public double apply(double x, double y) { return x / y; }\n    };\n\n    private final String symbol;\n\n    Operation(String symbol) { this.symbol = symbol; }\n\n    @Override\n    public String toString() { return symbol; }\n\n    public abstract double apply(double x, double y);\n}\n')),(0,i.kt)("p",null,"The toString implementation shown makes it easy to print arithmetic expressions, as demonstrated by this little program:"),(0,i.kt)("p",null,"\u91cd\u5199\u7684 toString \u5b9e\u73b0\u4f7f\u5f97\u6253\u5370\u7b97\u672f\u8868\u8fbe\u5f0f\u53d8\u5f97\u5f88\u5bb9\u6613\uff0c\u5982\u4e0b\u9762\u7684\u5c0f\u7a0b\u5e8f\u6240\u793a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public static void main(String[] args) {\n    double x = Double.parseDouble(args[0]);\n    double y = Double.parseDouble(args[1]);\n    for (Operation op : Operation.values())\n        System.out.printf("%f %s %f = %f%n",x, op, y, op.apply(x, y));\n}\n')),(0,i.kt)("p",null,"Running this program with 2 and 4 as command line arguments produces the following output:"),(0,i.kt)("p",null,"\u4ee5 2 \u548c 4 \u4f5c\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u5c06\u4ea7\u751f\u4ee5\u4e0b\u8f93\u51fa\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"2.000000 + 4.000000 = 6.000000\n2.000000 - 4.000000 = -2.000000\n2.000000 * 4.000000 = 8.000000\n2.000000 / 4.000000 = 0.500000\n")),(0,i.kt)("p",null,"Enum types have an automatically generated valueOf(String) method that translates a constant\u2019s name into the constant itself. If you override the toString method in an enum type, consider writing a fromString method to translate the custom string representation back to the corresponding enum. The following code (with the type name changed appropriately) will do the trick for any enum, so long as each constant has a unique string representation:"),(0,i.kt)("p",null,"\u679a\u4e3e\u7c7b\u578b\u6709\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684 valueOf(String) \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5c06\u5e38\u91cf\u7684\u540d\u79f0\u8f6c\u6362\u4e3a\u5e38\u91cf\u672c\u8eab\u3002\u5982\u679c\u5728\u679a\u4e3e\u7c7b\u578b\u4e2d\u91cd\u5199 toString \u65b9\u6cd5\uff0c\u53ef\u4ee5\u8003\u8651\u7f16\u5199 fromString \u65b9\u6cd5\u5c06\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u8f6c\u6362\u56de\u76f8\u5e94\u7684\u679a\u4e3e\u3002\u53ea\u8981\u6bcf\u4e2a\u5e38\u91cf\u90fd\u6709\u552f\u4e00\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\uff08\u7c7b\u578b\u540d\u79f0\u9002\u5f53\u66f4\u6539\uff09\u5c31\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u679a\u4e3e\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Implementing a fromString method on an enum type\nprivate static final Map<String, Operation> stringToEnum =Stream.of(values()).collect(toMap(Object::toString, e -> e));\n\n// Returns Operation for string, if any\npublic static Optional<Operation> fromString(String symbol) {\n    return Optional.ofNullable(stringToEnum.get(symbol));\n}\n")),(0,i.kt)("p",null,"Note that the Operation constants are put into the stringToEnum map from a static field initialization that runs after the enum constants have been created. The previous code uses a stream (Chapter 7) over the array returned by the values() method; prior to Java 8, we would have created an empty hash map and iterated over the values array inserting the string-to-enum mappings into the map, and you can still do it that way if you prefer. But note that attempting to have each constant put itself into a map from its own constructor does not work. It would cause a compilation error, which is good thing because if it were legal, it would cause a NullPointerException at runtime. Enum constructors aren\u2019t permitted to access the enum\u2019s static fields, with the exception of constant variables (Item 34). This restriction is necessary because static fields have not yet been initialized when enum constructors run. A special case of this restriction is that enum constants cannot access one another from their constructors."),(0,i.kt)("p",null,"\u6ce8\u610f\uff0cOperation \u679a\u4e3e\u7684\u5e38\u91cf\u662f\u4ece\u521b\u5efa\u679a\u4e3e\u5e38\u91cf\u4e4b\u540e\u8fd0\u884c\u7684\u9759\u6001\u5b57\u6bb5\u521d\u59cb\u5316\u4e2d\u653e\u5165 stringToEnum \u7684\u3002\u4e0a\u8ff0\u4ee3\u7801\u5728 values() \u65b9\u6cd5\u8fd4\u56de\u7684\u6570\u7ec4\u4e0a\u4f7f\u7528\u6d41\uff08\u53c2\u9605\u7b2c 7 \u7ae0\uff09\uff1b\u5728 Java 8 \u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u7a7a HashMap\uff0c\u5e76\u904d\u5386\u503c\u6570\u7ec4\uff0c\u5c06\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32\u4e0e\u679a\u4e3e\u7684\u6620\u5c04\u63d2\u5165\u5230 HashMap \u4e2d\uff0c\u5982\u679c\u4f60\u613f\u610f\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u8fd9\u6837\u505a\u3002\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u8bd5\u56fe\u8ba9\u6bcf\u4e2a\u5e38\u91cf\u901a\u8fc7\u6784\u9020\u51fd\u6570\u5c06\u81ea\u8eab\u653e\u5165 HashMap \u4e2d\u662f\u884c\u4e0d\u901a\u7684\u3002\u5b83\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\uff0c\u8fd9\u662f\u597d\u4e8b\uff0c\u56e0\u4e3a\u5982\u679c\u5408\u6cd5\uff0c\u5b83\u4f1a\u5728\u8fd0\u884c\u65f6\u5bfc\u81f4 NullPointerException\u3002\u679a\u4e3e\u6784\u9020\u51fd\u6570\u4e0d\u5141\u8bb8\u8bbf\u95ee\u679a\u4e3e\u7684\u9759\u6001\u5b57\u6bb5\uff0c\u5e38\u91cf\u53d8\u91cf\u9664\u5916\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-6-Item-34-Use-enums-instead-of-int-constants"},"Item-34"),"\uff09\u3002\u8fd9\u4e2a\u9650\u5236\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u5728\u679a\u4e3e\u6784\u9020\u51fd\u6570\u8fd0\u884c\u65f6\u9759\u6001\u5b57\u6bb5\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002\u8fd9\u79cd\u9650\u5236\u7684\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\u662f\u679a\u4e3e\u5e38\u91cf\u4e0d\u80fd\u4ece\u5b83\u4eec\u7684\u6784\u9020\u51fd\u6570\u4e2d\u76f8\u4e92\u8bbf\u95ee\u3002"),(0,i.kt)("p",null,"Also note that the fromString method returns an ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional<String>"),". This allows the method to indicate that the string that was passed in does not represent a valid operation, and it forces the client to confront this possibility (Item 55)."),(0,i.kt)("p",null,"\u8fd8\u8981\u6ce8\u610f fromString \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional<String>"),"\u3002\u8fd9\u5141\u8bb8\u8be5\u65b9\u6cd5\u63d0\u793a\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u5e76\u975e\u6709\u6548\u64cd\u4f5c\uff0c\u5e76\u5f3a\u5236\u5ba2\u6237\u7aef\u5904\u7406\u8fd9\u79cd\u53ef\u80fd\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-8-Item-55-Return-optionals-judiciously"},"Item-55"),"\uff09\u3002"),(0,i.kt)("p",null,"A disadvantage of constant-specific method implementations is that they make it harder to share code among enum constants. For example, consider an enum representing the days of the week in a payroll package. This enum has a method that calculates a worker\u2019s pay for that day given the worker\u2019s base salary (per hour) and the number of minutes worked on that day. On the five weekdays, any time worked in excess of a normal shift generates overtime pay; on the two weekend days, all work generates overtime pay. With a switch statement, it\u2019s easy to do this calculation by applying multiple case labels to each of two code fragments:"),(0,i.kt)("p",null,"\u7279\u5b9a\u5e38\u91cf\u65b9\u6cd5\u5b9e\u73b0\u7684\u4e00\u4e2a\u7f3a\u70b9\u662f\uff0c\u5b83\u4eec\u4f7f\u5f97\u5728\u679a\u4e3e\u5e38\u91cf\u4e4b\u95f4\u5171\u4eab\u4ee3\u7801\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u8868\u793a\u4e00\u5468\u5f53\u4e2d\u8ba1\u7b97\u5de5\u8d44\u53d1\u653e\u7684\u679a\u4e3e\u3002\u679a\u4e3e\u6709\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u6839\u636e\u5de5\u4eba\u7684\u57fa\u672c\u5de5\u8d44\uff08\u6bcf\u5c0f\u65f6\uff09\u548c\u5f53\u5929\u7684\u5de5\u4f5c\u5206\u949f\u6570\u8ba1\u7b97\u5de5\u4eba\u5f53\u5929\u7684\u5de5\u8d44\u3002\u5728\u4e94\u4e2a\u5de5\u4f5c\u65e5\u5185\uff0c\u4efb\u4f55\u8d85\u8fc7\u6b63\u5e38\u8f6e\u73ed\u65f6\u95f4\u7684\u5de5\u4f5c\u90fd\u4f1a\u4ea7\u751f\u52a0\u73ed\u8d39\uff1b\u5728\u4e24\u4e2a\u5468\u672b\uff0c\u6240\u6709\u7684\u5de5\u4f5c\u90fd\u4f1a\u4ea7\u751f\u52a0\u73ed\u8d39\u3002\u4f7f\u7528 switch \u8bed\u53e5\uff0c\u901a\u8fc7\u591a\u4e2a case \u6807\u7b7e\u5e94\u7528\u4e8e\u6bcf\u4e00\u7c7b\u60c5\u51b5\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fdb\u884c\u8ba1\u7b97\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Enum that switches on its value to share code - questionable\nenum PayrollDay {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,SATURDAY, SUNDAY;\n\n    private static final int MINS_PER_SHIFT = 8 * 60;\n\n    int pay(int minutesWorked, int payRate) {\n        int basePay = minutesWorked * payRate;\n        int overtimePay;\n        switch(this) {\n            case SATURDAY:\n            case SUNDAY: // Weekend\n                overtimePay = basePay / 2;\n                break;\n            default: // Weekday\n                overtimePay = minutesWorked <= MINS_PER_SHIFT ?0 : (minutesWorked - MINS_PER_SHIFT) * payRate / 2;\n        }\n        return basePay + overtimePay;\n    }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8 1\uff1a\u8be5\u4f8b\u5b50\u4e2d\uff0c\u52a0\u73ed\u7684\u6bcf\u5206\u949f\u5de5\u8d44\u4e3a\u5de5\u4f5c\u65e5\u6bcf\u5206\u949f\u5de5\u8d44\uff08payRate\uff09\u7684\u4e00\u534a")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8 2\uff1a\u539f\u6587\u4e2d pay \u65b9\u6cd5\u5b58\u5728\u95ee\u9898\uff0c\u8bf4\u660e\u5982\u4e0b\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// \u57fa\u672c\u5de5\u8d44 basePay \u4e0d\u5e94\u8be5\u76f4\u63a5\u5c06\u5de5\u4f5c\u65f6\u95f4\u53c2\u4e0e\u8ba1\u7b97\uff0c\u5982\u679c\u5de5\u4f5c\u65e5\u5b58\u5728\u52a0\u73ed\u7684\u60c5\u51b5\uff0c\u4f1a\u5c06\u52a0\u73ed\u65f6\u95f4\u4e5f\u8ba1\u5165\u57fa\u672c\u5de5\u8d44\u8ba1\u7b97\u3002\u5047\u8bbe\u5728\u5468\u4e00\u5de5\u4f5c 10 \u5c0f\u65f6\uff0c\u5047\u8bbe\u6bcf\u5206\u949f 1 \u5143\uff1a\n/*\n\u4fee\u6539\u524d\uff1a\n    \u57fa\u672c\u5de5\u8d44 basePay = minutesWorked * payRate=10*60*1=600\uff08\u4e0d\u5e94\u8be5\u5c06 2 \u5c0f\u65f6\u52a0\u73ed\u4e5f\u8ba1\u5165\u6b63\u5e38\u5de5\u4f5c\u65f6\u95f4\uff09\n    \u52a0\u73ed\u5de5\u8d44 overtimePay = (minutesWorked - MINS_PER_SHIFT) * payRate / 2=2*60*1/2=60\n    \u5408\u8ba1= basePay + overtimePay=660\n\u4fee\u6539\u540e\uff1a\n    \u57fa\u672c\u5de5\u8d44 basePay = MINS_PER_SHIFT * payRate=8*60*1=480\uff08\u57fa\u672c\u5de5\u8d44\u6700\u9ad8\u53ea\u80fd\u6309\u7167 8 \u5c0f\u65f6\u8ba1\u7b97\uff09\n    \u52a0\u73ed\u5de5\u8d44 overtimePay = (minutesWorked - MINS_PER_SHIFT) * payRate / 2=2*60*1/2=60\n    \u5408\u8ba1= basePay + overtimePay=540\n*/\n// \u4fee\u6539\u540e\u4ee3\u7801\uff1a\nint pay(int minutesWorked, int payRate) {\n    int basePay = 0;\n    int overtimePay;\n    switch (this) {\n        case SATURDAY:\n        case SUNDAY: // Weekend\n            overtimePay = minutesWorked * payRate / 2;\n            break;\n        default: // Weekday\n            basePay = minutesWorked <= MINS_PER_SHIFT ? minutesWorked * payRate : MINS_PER_SHIFT * payRate;\n            overtimePay = minutesWorked <= MINS_PER_SHIFT ? 0 : (minutesWorked - MINS_PER_SHIFT) * payRate / 2;\n    }\n    return basePay + overtimePay;\n}\n")),(0,i.kt)("p",null,"This code is undeniably concise, but it is dangerous from a maintenance perspective. Suppose you add an element to the enum, perhaps a special value to represent a vacation day, but forget to add a corresponding case to the switch statement. The program will still compile, but the pay method will silently pay the worker the same amount for a vacation day as for an ordinary weekday."),(0,i.kt)("p",null,"\u4e0d\u53ef\u5426\u8ba4\uff0c\u8fd9\u6bb5\u4ee3\u7801\u975e\u5e38\u7b80\u6d01\uff0c\u4f46\u662f\u4ece\u7ef4\u62a4\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u662f\u5371\u9669\u7684\u3002\u5047\u8bbe\u4f60\u5411\u679a\u4e3e\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5143\u7d20\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u8868\u793a\u5047\u671f\u7684\u7279\u6b8a\u503c\uff0c\u4f46\u662f\u5fd8\u8bb0\u5411 switch \u8bed\u53e5\u6dfb\u52a0\u76f8\u5e94\u7684 case\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u4ecd\u7136\u4f1a\u88ab\u7f16\u8bd1\uff0c\u4f46\u662f pay \u65b9\u6cd5\u4f1a\u628a\u5047\u671f\u9ed8\u8ba4\u5f53\u505a\u666e\u901a\u5de5\u4f5c\u65e5\u5e76\u652f\u4ed8\u5de5\u8d44\u3002"),(0,i.kt)("p",null,"To perform the pay calculation safely with constant-specific method implementations, you would have to duplicate the overtime pay computation for each constant, or move the computation into two helper methods, one for weekdays and one for weekend days, and invoke the appropriate helper method from each constant. Either approach would result in a fair amount of boilerplate code, substantially reducing readability and increasing the opportunity for error."),(0,i.kt)("p",null,"\u4e3a\u4e86\u4f7f\u7528\u7279\u5b9a\u5e38\u91cf\u65b9\u6cd5\u5b9e\u73b0\u5b89\u5168\u5730\u6267\u884c\u5de5\u8d44\u8ba1\u7b97\uff0c\u4f60\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u5e38\u91cf\u590d\u5236\u52a0\u73ed\u8d39\u8ba1\u7b97\uff0c\u6216\u8005\u5c06\u8ba1\u7b97\u79fb\u52a8\u5230\u4e24\u4e2a\u8f85\u52a9\u65b9\u6cd5\u4e2d\uff0c\u4e00\u4e2a\u7528\u4e8e\u5de5\u4f5c\u65e5\uff0c\u4e00\u4e2a\u7528\u4e8e\u5468\u672b\uff0c\u518d\u4ece\u6bcf\u4e2a\u5e38\u91cf\u8c03\u7528\u9002\u5f53\u7684\u8f85\u52a9\u65b9\u6cd5\u3002\u4efb\u4f55\u4e00\u79cd\u65b9\u6cd5\u90fd\u4f1a\u5bfc\u81f4\u76f8\u5f53\u6570\u91cf\u7684\u6837\u677f\u4ee3\u7801\uff0c\u6781\u5927\u5730\u964d\u4f4e\u53ef\u8bfb\u6027\u5e76\u589e\u52a0\u51fa\u9519\u7684\u673a\u4f1a\u3002"),(0,i.kt)("p",null,"The boilerplate could be reduced by replacing the abstract overtimePay method on PayrollDay with a concrete method that performs the overtime calculation for weekdays. Then only the weekend days would have to override the method. But this would have the same disadvantage as the switch statement: if you added another day without overriding the overtimePay method, you would silently inherit the weekday calculation."),(0,i.kt)("p",null,"\u7528\u5de5\u4f5c\u65e5\u52a0\u73ed\u8ba1\u7b97\u7684\u5177\u4f53\u65b9\u6cd5\u4ee3\u66ff\u53d1\u85aa\u65e5\u7684\u62bd\u8c61\u52a0\u73ed\u6cd5\uff0c\u53ef\u4ee5\u51cf\u5c11\u6837\u677f\u3002\u90a3\u4e48\u53ea\u6709\u5468\u672b\u624d\u9700\u8981\u91cd\u5199\u8be5\u65b9\u6cd5\u3002\u4f46\u662f\u8fd9\u4e0e switch \u8bed\u53e5\u5177\u6709\u76f8\u540c\u7684\u7f3a\u70b9\uff1a\u5982\u679c\u4f60\u5728\u4e0d\u8986\u76d6 overtimePay \u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b\u6dfb\u52a0\u4e86\u53e6\u4e00\u5929\uff0c\u90a3\u4e48\u4f60\u5c06\u9ed8\u9ed8\u5730\u7ee7\u627f\u5de5\u4f5c\u65e5\u7684\u8ba1\u7b97\u3002"),(0,i.kt)("p",null,"What you really want is to be forced to choose an overtime pay strategy each time you add an enum constant. Luckily, there is a nice way to achieve this. The idea is to move the overtime pay computation into a private nested enum, and to pass an instance of this strategy enum to the constructor for the PayrollDay enum. The PayrollDay enum then delegates the overtime pay calculation to the strategy enum, eliminating the need for a switch statement or constantspecific method implementation in PayrollDay. While this pattern is less concise than the switch statement, it is safer and more flexible:"),(0,i.kt)("p",null,"\u4f60\u771f\u6b63\u60f3\u8981\u7684\u662f\u5728\u6bcf\u6b21\u6dfb\u52a0\u679a\u4e3e\u5e38\u91cf\u65f6\u88ab\u8feb\u9009\u62e9\u52a0\u73ed\u8d39\u7b56\u7565\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u5176\u601d\u60f3\u662f\u5c06\u52a0\u73ed\u8d39\u8ba1\u7b97\u79fb\u5230\u79c1\u6709\u5d4c\u5957\u679a\u4e3e\u4e2d\uff0c\u5e76\u5c06\u6b64\u7b56\u7565\u679a\u4e3e\u7684\u5b9e\u4f8b\u4f20\u9012\u7ed9 PayrollDay \u679a\u4e3e\u7684\u6784\u9020\u51fd\u6570\u3002\u7136\u540e PayrollDay \u679a\u4e3e\u5c06\u52a0\u73ed\u8d39\u8ba1\u7b97\u59d4\u6258\u7ed9\u7b56\u7565\u679a\u4e3e\uff0c\u4ece\u800c\u6d88\u9664\u4e86\u5728 PayrollDay \u4e2d\u4f7f\u7528 switch \u8bed\u53e5\u6216\u7279\u5b9a\u4e8e\u5e38\u91cf\u7684\u65b9\u6cd5\u5b9e\u73b0\u7684\u9700\u8981\u3002\u867d\u7136\u8fd9\u79cd\u6a21\u5f0f\u4e0d\u5982 switch \u8bed\u53e5\u7b80\u6d01\uff0c\u4f46\u5b83\u66f4\u5b89\u5168\uff0c\u4e5f\u66f4\u7075\u6d3b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// The strategy enum pattern\nenum PayrollDay {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,SATURDAY(PayType.WEEKEND), SUNDAY(PayType.WEEKEND);\n\n    private final PayType payType;\n    PayrollDay(PayType payType) { this.payType = payType; }\n    PayrollDay() { this(PayType.WEEKDAY); } // Default\n\n    int pay(int minutesWorked, int payRate) {\n        return payType.pay(minutesWorked, payRate);\n    }\n\n    // The strategy enum type\n    private enum PayType {\n        WEEKDAY {\n            int overtimePay(int minsWorked, int payRate) {\n                return minsWorked <= MINS_PER_SHIFT ? 0 :(minsWorked - MINS_PER_SHIFT) * payRate / 2;\n            }\n        },\n        WEEKEND {\n            int overtimePay(int minsWorked, int payRate) {\n                return minsWorked * payRate / 2;\n            }\n        };\n\n        abstract int overtimePay(int mins, int payRate);\n\n        private static final int MINS_PER_SHIFT = 8 * 60;\n\n        int pay(int minsWorked, int payRate) {\n            int basePay = minsWorked * payRate;\n            return basePay + overtimePay(minsWorked, payRate);\n        }\n    }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a\u4e0a\u8ff0\u4ee3\u7801 pay \u65b9\u6cd5\u4e5f\u5b58\u5c06\u52a0\u73ed\u65f6\u95f4\u8ba1\u5165\u57fa\u672c\u5de5\u8d44\u8ba1\u7b97\u7684\u95ee\u9898\uff0c\u4fee\u6539\u5982\u4e0b\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"int pay(int minsWorked, int payRate) {\n    int basePay = minsWorked <= MINS_PER_SHIFT ? minsWorked * payRate : MINS_PER_SHIFT * payRate;\n    return basePay + overtimePay(minsWorked, payRate);\n}\n")),(0,i.kt)("p",null,"If switch statements on enums are not a good choice for implementing constant-specific behavior on enums, what are they good for? ",(0,i.kt)("strong",{parentName:"p"},"Switches on enums are good for augmenting enum types with constant-specific behavior.")," For example, suppose the Operation enum is not under your control and you wish it had an instance method to return the inverse of each operation. You could simulate the effect with the following static method:"),(0,i.kt)("p",null,"\u5982\u679c\u5728\u679a\u4e3e\u4e0a\u5b9e\u73b0\u7279\u5b9a\u5e38\u91cf\u7684\u884c\u4e3a\u65f6 switch \u8bed\u53e5\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u9009\u62e9\uff0c\u90a3\u4e48\u5b83\u4eec\u6709\u4ec0\u4e48\u7528\u5462\uff1f",(0,i.kt)("strong",{parentName:"p"},"\u679a\u4e3e\u4e2d\u7684 switch \u6709\u5229\u4e8e\u6269\u5c55\u5177\u6709\u7279\u5b9a\u5e38\u91cf\u884c\u4e3a\u7684\u679a\u4e3e\u7c7b\u578b\u3002")," \u4f8b\u5982\uff0c\u5047\u8bbe Operation \u679a\u4e3e\u4e0d\u5728\u4f60\u7684\u63a7\u5236\u4e4b\u4e0b\uff0c\u4f60\u5e0c\u671b\u5b83\u6709\u4e00\u4e2a\u5b9e\u4f8b\u65b9\u6cd5\u6765\u8fd4\u56de\u6bcf\u4e2a\u64cd\u4f5c\u7684\u9006\u64cd\u4f5c\u3002\u4f60\u53ef\u4ee5\u7528\u4ee5\u4e0b\u9759\u6001\u65b9\u6cd5\u6a21\u62df\u6548\u679c\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Switch on an enum to simulate a missing method\npublic static Operation inverse(Operation op) {\n    switch(op) {\n        case PLUS: return Operation.MINUS;\n        case MINUS: return Operation.PLUS;\n        case TIMES: return Operation.DIVIDE;\n        case DIVIDE: return Operation.TIMES;\n        default: throw new AssertionError("Unknown op: " + op);\n    }\n}\n')),(0,i.kt)("p",null,"You should also use this technique on enum types that are under your control if a method simply doesn\u2019t belong in the enum type. The method may be required for some use but is not generally useful enough to merit inclusion in the enum type."),(0,i.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u4e0d\u5c5e\u4e8e\u679a\u4e3e\u7c7b\u578b\uff0c\u90a3\u4e48\u8fd8\u5e94\u8be5\u5728\u4f60\u63a7\u5236\u7684\u679a\u4e3e\u7c7b\u578b\u4e0a\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u3002\u8be5\u65b9\u6cd5\u53ef\u80fd\u9002\u7528\u4e8e\u67d0\u4e9b\u7279\u6b8a\u7528\u9014\uff0c\u4f46\u901a\u5e38\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7684\u597d\u5904\uff0c\u5c31\u4e0d\u503c\u5f97\u5305\u542b\u5728\u679a\u4e3e\u7c7b\u578b\u4e2d\u3002"),(0,i.kt)("p",null,"Enums are, generally speaking, comparable in performance to int constants. A minor performance disadvantage of enums is that there is a space and time cost to load and initialize enum types, but it is unlikely to be noticeable in practice."),(0,i.kt)("p",null,"\u4e00\u822c\u6765\u8bf4\uff0c\u679a\u4e3e\u5728\u6027\u80fd\u4e0a\u53ef\u4e0e int \u5e38\u91cf\u76f8\u6bd4\u3002\u679a\u4e3e\u5728\u6027\u80fd\u4e0a\u6709\u4e00\u4e2a\u5c0f\u7f3a\u70b9\uff0c\u52a0\u8f7d\u548c\u521d\u59cb\u5316\u679a\u4e3e\u7c7b\u578b\u9700\u8981\u82b1\u8d39\u7a7a\u95f4\u548c\u65f6\u95f4\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u8fd9\u4e00\u70b9\u53ef\u80fd\u4e0d\u592a\u660e\u663e\u3002"),(0,i.kt)("p",null,"So when should you use enums? ",(0,i.kt)("strong",{parentName:"p"},"Use enums any time you need a set of constants whose members are known at compile time.")," Of course, this includes \u201cnatural enumerated types,\u201d such as the planets, the days of the week, and the chess pieces. But it also includes other sets for which you know all the possible values at compile time, such as choices on a menu, operation codes, and command line flags. ",(0,i.kt)("strong",{parentName:"p"},"It is not necessary that the set of constants in an enum type stay fixed for all time.")," The enum feature was specifically designed to allow for binary compatible evolution of enum types."),(0,i.kt)("p",null,"\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u4f7f\u7528\u679a\u4e3e\u5462\uff1f",(0,i.kt)("strong",{parentName:"p"},"\u5728\u9700\u8981\u4e00\u7ec4\u5e38\u91cf\u65f6\u4f7f\u7528\u679a\u4e3e\uff0c\u8fd9\u4e9b\u5e38\u91cf\u7684\u6210\u5458\u5728\u7f16\u8bd1\u65f6\u662f\u5df2\u77e5\u7684\u3002")," \u5f53\u7136\uff0c\u8fd9\u5305\u62ec\u300c\u81ea\u7136\u679a\u4e3e\u7c7b\u578b\u300d\uff0c\u5982\u884c\u661f\u3001\u661f\u671f\u51e0\u548c\u68cb\u5b50\u3002\u4f46\u662f\u5b83\u8fd8\u5305\u62ec\u5176\u4ed6\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\u6240\u6709\u53ef\u80fd\u503c\u7684\u96c6\u5408\uff0c\u4f8b\u5982\u83dc\u5355\u4e0a\u7684\u9009\u9879\u3001\u64cd\u4f5c\u4ee3\u7801\u548c\u547d\u4ee4\u884c\u6807\u5fd7\u3002",(0,i.kt)("strong",{parentName:"p"},"\u679a\u4e3e\u7c7b\u578b\u4e2d\u7684\u5e38\u91cf\u96c6\u6ca1\u6709\u5fc5\u8981\u4e00\u76f4\u4fdd\u6301\u56fa\u5b9a\u3002")," \u679a\u4e3e\u7684\u7279\u6027\u662f\u4e13\u95e8\u4e3a\u679a\u4e3e\u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u517c\u5bb9\u8fdb\u5316\u800c\u8bbe\u8ba1\u7684\u3002"),(0,i.kt)("p",null,"In summary, the advantages of enum types over int constants are compelling. Enums are more readable, safer, and more powerful. Many enums require no explicit constructors or members, but others benefit from associating data with each constant and providing methods whose behavior is affected by this data. Fewer enums benefit from associating multiple behaviors with a single method. In this relatively rare case, prefer constant-specific methods to enums that switch on their own values. Consider the strategy enum pattern if some, but not all, enum constants share common behaviors."),(0,i.kt)("p",null,"\u603b\u4e4b\uff0c\u679a\u4e3e\u7c7b\u578b\u76f8\u5bf9\u4e8e int \u5e38\u91cf\u7684\u4f18\u52bf\u662f\u6bcb\u5eb8\u7f6e\u7591\u7684\u3002\u679a\u4e3e\u66f4\u6613\u4e8e\u9605\u8bfb\u3001\u66f4\u5b89\u5168\u3001\u66f4\u5f3a\u5927\u3002\u8bb8\u591a\u679a\u4e3e\u4e0d\u9700\u8981\u663e\u5f0f\u6784\u9020\u51fd\u6570\u6216\u6210\u5458\uff0c\u4f46\u6709\u4e9b\u679a\u4e3e\u5219\u53d7\u76ca\u4e8e\u5c06\u6570\u636e\u4e0e\u6bcf\u4e2a\u5e38\u91cf\u5173\u8054\uff0c\u5e76\u63d0\u4f9b\u884c\u4e3a\u53d7\u6570\u636e\u5f71\u54cd\u7684\u65b9\u6cd5\u3002\u5c06\u591a\u4e2a\u884c\u4e3a\u4e0e\u4e00\u4e2a\u65b9\u6cd5\u5173\u8054\u8d77\u6765\uff0c\u8fd9\u6837\u7684\u679a\u4e3e\u66f4\u5c11\u3002\u5728\u8fd9\u79cd\u76f8\u5bf9\u5c11\u89c1\u7684\u60c5\u51b5\u4e0b\uff0c\u76f8\u5bf9\u4e8e\u4f7f\u7528 switch \u7684\u679a\u4e3e\uff0c\u7279\u5b9a\u5e38\u91cf\u65b9\u6cd5\u66f4\u597d\u3002\u5982\u679c\u679a\u4e3e\u5e38\u91cf\u6709\u4e00\u4e9b\uff08\u4f46\u4e0d\u662f\u5168\u90e8\uff09\u5171\u4eab\u516c\u5171\u884c\u4e3a\uff0c\u8bf7\u8003\u8651\u7b56\u7565\u679a\u4e3e\u6a21\u5f0f\u3002"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"./Chapter-6-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,i.kt)("a",{parentName:"strong",href:"./Chapter-6-Item-35-Use-instance-fields-instead-of-ordinals"},"Item 35: Use instance fields instead of ordinals\uff08\u4f7f\u7528\u5b9e\u4f8b\u5b57\u6bb5\u66ff\u4ee3\u5e8f\u6570\uff09")))))}c.isMDXComponent=!0}}]);