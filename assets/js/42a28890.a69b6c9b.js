"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4171],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,f=u["".concat(c,".").concat(h)]||u[h]||m[h]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={},o=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-65-Prefer-interfaces-to-reflection",id:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-65-Prefer-interfaces-to-reflection",title:"Chapter-9-Item-65-Prefer-interfaces-to-reflection",description:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-65-Prefer-interfaces-to-reflection.md",sourceDirName:"Books/EffectiveJava3/Chapter-9",slug:"/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-65-Prefer-interfaces-to-reflection",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-65-Prefer-interfaces-to-reflection",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-65-Prefer-interfaces-to-reflection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-9-Item-64-Refer-to-objects-by-their-interfaces",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-64-Refer-to-objects-by-their-interfaces"},next:{title:"Chapter-9-Item-66-Use-native-methods-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-66-Use-native-methods-judiciously"}},c={},l=[{value:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1",level:2},{value:"Item 65: Prefer interfaces to reflection\uff08\u63a5\u53e3\u4f18\u4e8e\u53cd\u5c04\uff09",id:"item-65-prefer-interfaces-to-reflection\u63a5\u53e3\u4f18\u4e8e\u53cd\u5c04",level:3}],p={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1"},"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09"),(0,r.kt)("h3",{id:"item-65-prefer-interfaces-to-reflection\u63a5\u53e3\u4f18\u4e8e\u53cd\u5c04"},"Item 65: Prefer interfaces to reflection\uff08\u63a5\u53e3\u4f18\u4e8e\u53cd\u5c04\uff09"),(0,r.kt)("p",null,"The core reflection facility, java.lang.reflect, offers programmatic access to arbitrary classes. Given a Class object, you can obtain Constructor, Method, and Field instances representing the constructors, methods, and fields of the class represented by the Class instance. These objects provide programmatic access to the class\u2019s member names, field types, method signatures, and so on."),(0,r.kt)("p",null,"\u6838\u5fc3\u53cd\u5c04\u673a\u5236 ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.reflect")," \u63d0\u4f9b\u5bf9\u4efb\u610f\u7c7b\u7684\u7f16\u7a0b\u8bbf\u95ee\u3002\u7ed9\u5b9a\u4e00\u4e2a Class \u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97 Constructor\u3001Method \u548c Field \u5b9e\u4f8b\uff0c\u5206\u522b\u4ee3\u8868\u4e86\u8be5 Class \u5b9e\u4f8b\u6240\u8868\u793a\u7684\u7c7b\u7684\u6784\u9020\u5668\u3001\u65b9\u6cd5\u548c\u5b57\u6bb5\u3002\u8fd9\u4e9b\u5bf9\u8c61\u63d0\u4f9b\u5bf9\u7c7b\u7684\u6210\u5458\u540d\u3001\u5b57\u6bb5\u7c7b\u578b\u3001\u65b9\u6cd5\u7b7e\u540d\u7b49\u7684\u7f16\u7a0b\u8bbf\u95ee\u3002"),(0,r.kt)("p",null,"Moreover, Constructor, Method, and Field instances let you manipulate their underlying counterparts reflectively: you can construct instances, invoke methods, and access fields of the underlying class by invoking methods on the Constructor, Method, and Field instances. For example, Method.invoke lets you invoke any method on any object of any class (subject to the usual security constraints). Reflection allows one class to use another, even if the latter class did not exist when the former was compiled. This power, however, comes at a price:"),(0,r.kt)("p",null,"\u6b64\u5916\uff0cConstructor\u3001Method \u548c Field \u5b9e\u4f8b\u5141\u8bb8\u4f60\u53cd\u5c04\u6027\u5730\u64cd\u4f5c\u5b83\u4eec\u7684\u5e95\u5c42\u5bf9\u5e94\u9879\uff1a\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 Constructor\u3001Method \u548c Field \u5b9e\u4f8b\u4e0a\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6784\u9020\u5e95\u5c42\u7c7b\u7684\u5b9e\u4f8b\u3001\u8c03\u7528\u5e95\u5c42\u7c7b\u7684\u65b9\u6cd5\uff0c\u5e76\u8bbf\u95ee\u5e95\u5c42\u7c7b\u4e2d\u7684\u5b57\u6bb5\u3002\u4f8b\u5982\uff0cMethod.invoke \u5141\u8bb8\u4f60\u5728\u4efb\u4f55\u7c7b\u7684\u4efb\u4f55\u5bf9\u8c61\u4e0a\u8c03\u7528\u4efb\u4f55\u65b9\u6cd5\uff08\u53d7\u9ed8\u8ba4\u7684\u5b89\u5168\u7ea6\u675f\uff09\u3002\u53cd\u5c04\u5141\u8bb8\u4e00\u4e2a\u7c7b\u4f7f\u7528\u53e6\u4e00\u4e2a\u7c7b\uff0c\u5373\u4f7f\u5728\u7f16\u8bd1\u524d\u8005\u65f6\u540e\u8005\u5e76\u4e0d\u5b58\u5728\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u80fd\u529b\u662f\u6709\u4ee3\u4ef7\u7684\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"You lose all the benefits of compile-time type checking,")," including exception checking. If a program attempts to invoke a nonexistent or inaccessible method reflectively, it will fail at runtime unless you\u2019ve taken special precautions.")),(0,r.kt)("p",null,"\u4f60\u5931\u53bb\u4e86\u7f16\u8bd1\u65f6\u7c7b\u578b\u68c0\u67e5\u7684\u6240\u6709\u597d\u5904\uff0c\u5305\u62ec\u5f02\u5e38\u68c0\u67e5\u3002\u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u8bd5\u56fe\u53cd\u5c04\u6027\u5730\u8c03\u7528\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6216\u4e0d\u53ef\u8bbf\u95ee\u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u5728\u8fd0\u884c\u65f6\u5931\u8d25\uff0c\u9664\u975e\u4f60\u91c7\u53d6\u4e86\u7279\u6b8a\u7684\u9884\u9632\u63aa\u65bd\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"The code required to perform reflective access is clumsy and verbose.")," It is tedious to write and difficult to read.")),(0,r.kt)("p",null,"\u6267\u884c\u53cd\u5c04\u8bbf\u95ee\u6240\u9700\u7684\u4ee3\u7801\u65e2\u7b28\u62d9\u53c8\u5197\u957f\u3002\u5199\u8d77\u6765\u5f88\u4e4f\u5473\uff0c\u8bfb\u8d77\u6765\u4e5f\u5f88\u56f0\u96be\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Performance suffers.")," Reflective method invocation is much slower than normal method invocation. Exactly how much slower is hard to say, as there are many factors at work. On my machine, invoking a method with no input parameters and an int return was eleven times slower when done reflectively.")),(0,r.kt)("p",null,"\u6027\u80fd\u964d\u4f4e\u3002\u53cd\u5c04\u65b9\u6cd5\u8c03\u7528\u6bd4\u666e\u901a\u65b9\u6cd5\u8c03\u7528\u6162\u5f97\u591a\u3002\u5230\u5e95\u6162\u4e86\u591a\u5c11\u8fd8\u5f88\u96be\u8bf4\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u56e0\u7d20\u5728\u8d77\u4f5c\u7528\u3002\u5728\u6211\u7684\u673a\u5668\u4e0a\uff0c\u8c03\u7528\u4e00\u4e2a\u6ca1\u6709\u8f93\u5165\u53c2\u6570\u548c\u8fd4\u56de int \u7c7b\u578b\u7684\u65b9\u6cd5\u65f6\uff0c\u7528\u53cd\u5c04\u6267\u884c\u8981\u6162 11 \u500d\u3002"),(0,r.kt)("p",null,"There are a few sophisticated applications that require reflection. Examples include code analysis tools and dependency injection frameworks. Even such tools have been moving away from reflection of late, as its disadvantages become clearer. If you have any doubts as to whether your application requires reflection, it probably doesn\u2019t."),(0,r.kt)("p",null,"\u6709\u4e00\u4e9b\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u53cd\u5c04\u3002\u5305\u62ec\u4ee3\u7801\u5206\u6790\u5de5\u5177\u548c\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u3002\u5373\u4f7f\u662f\u8fd9\u6837\u7684\u5de5\u5177\uff0c\u968f\u7740\u5b83\u7684\u7f3a\u70b9\u53d8\u5f97\u8d8a\u6765\u8d8a\u660e\u663e\uff0c\u4eba\u4eec\u4e5f\u5728\u9010\u6e10\u8fdc\u79bb\u5e76\u53cd\u601d\u8fd9\u79cd\u7528\u6cd5\u3002\u5982\u679c\u4f60\u5bf9\u5e94\u7528\u7a0b\u5e8f\u662f\u5426\u9700\u8981\u53cd\u5c04\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u4e0d\u9700\u8981\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"You can obtain many of the benefits of reflection while incurring few of its costs by using it only in a very limited form.")," For many programs that must use a class that is unavailable at compile time, there exists at compile time an appropriate interface or superclass by which to refer to the class (Item 64). If this is the case, you can ",(0,r.kt)("strong",{parentName:"p"},"create instances reflectively and access them normally via their interface or superclass.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u901a\u8fc7\u975e\u5e38\u6709\u9650\u7684\u5f62\u5f0f\u4f7f\u7528\u53cd\u5c04\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u53cd\u5c04\u7684\u8bb8\u591a\u597d\u5904\uff0c\u540c\u65f6\u82b1\u8d39\u7684\u4ee3\u4ef7\u5f88\u5c11\u3002")," \u5bf9\u4e8e\u8bb8\u591a\u7a0b\u5e8f\uff0c\u5b83\u4eec\u5fc5\u987b\u7528\u5230\u5728\u7f16\u8bd1\u65f6\u65e0\u6cd5\u83b7\u53d6\u7684\u7c7b\uff0c\u5728\u7f16\u8bd1\u65f6\u5b58\u5728\u4e00\u4e2a\u9002\u5f53\u7684\u63a5\u53e3\u6216\u8d85\u7c7b\u6765\u5f15\u7528\u8be5\u7c7b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-9-Item-64-Refer-to-objects-by-their-interfaces"},"Item-64"),"\uff09\u3002\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c",(0,r.kt)("strong",{parentName:"p"},"\u53ef\u4ee5\u7528\u53cd\u5c04\u65b9\u5f0f\u521b\u5efa\u5b9e\u4f8b\uff0c\u5e76\u901a\u8fc7\u5b83\u4eec\u7684\u63a5\u53e3\u6216\u8d85\u7c7b\u6b63\u5e38\u5730\u8bbf\u95ee\u5b83\u4eec\u3002")),(0,r.kt)("p",null,"For example, here is a program that creates a ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<String>")," instance whose class is specified by the first command line argument. The program inserts the remaining command line arguments into the set and prints it. Regardless of the first argument, the program prints the remaining arguments with duplicates eliminated. The order in which these arguments are printed, however, depends on the class specified in the first argument. If you specify java.util.HashSet, they\u2019re printed in apparently random order; if you specify java.util.TreeSet, they\u2019re printed in alphabetical order because the elements in a TreeSet are sorted:"),(0,r.kt)("p",null,"\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u521b\u5efa ",(0,r.kt)("inlineCode",{parentName:"p"},"Set<String>")," \u5b9e\u4f8b\u7684\u7a0b\u5e8f\uff0c\u7c7b\u7531\u7b2c\u4e00\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\u6307\u5b9a\u3002\u7a0b\u5e8f\u5c06\u5269\u4f59\u7684\u547d\u4ee4\u884c\u53c2\u6570\u63d2\u5165\u5230\u96c6\u5408\u4e2d\u5e76\u6253\u5370\u51fa\u6765\u3002\u4e0d\u7ba1\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4ec0\u4e48\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u6253\u5370\u5269\u4f59\u7684\u53c2\u6570\uff0c\u5e76\u53bb\u6389\u91cd\u590d\u9879\u3002\u7136\u800c\uff0c\u6253\u5370\u8fd9\u4e9b\u53c2\u6570\u7684\u987a\u5e8f\u53d6\u51b3\u4e8e\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\u6307\u5b9a\u7684\u7c7b\u3002\u5982\u679c\u4f60\u6307\u5b9a ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.HashSet"),"\uff0c\u5b83\u4eec\u663e\u7136\u662f\u968f\u673a\u6392\u5217\u7684\uff1b\u5982\u679c\u4f60\u6307\u5b9a ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.TreeSet"),"\uff0c\u5b83\u4eec\u662f\u6309\u5b57\u6bcd\u987a\u5e8f\u6253\u5370\u7684\uff0c\u56e0\u4e3a TreeSet \u4e2d\u7684\u5143\u7d20\u662f\u6709\u5e8f\u7684\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// Reflective instantiation with interface access\npublic static void main(String[] args) {\n\n    // Translate the class name into a Class object\n    Class<? extends Set<String>> cl = null;\n    try {\n        cl = (Class<? extends Set<String>>) // Unchecked cast!\n        Class.forName(args[0]);\n    } catch (ClassNotFoundException e) {\n        fatalError("Class not found.");\n    }\n\n    // Get the constructor\n    Constructor<? extends Set<String>> cons = null;\n    try {\n        cons = cl.getDeclaredConstructor();\n    } catch (NoSuchMethodException e) {\n        fatalError("No parameterless constructor");\n    }\n\n    // Instantiate the set\n    Set<String> s = null;\n    try {\n        s = cons.newInstance();\n    } catch (IllegalAccessException e) {\n        fatalError("Constructor not accessible");\n    } catch (InstantiationException e) {\n        fatalError("Class not instantiable.");\n    } catch (InvocationTargetException e) {\n        fatalError("Constructor threw " + e.getCause());\n    } catch (ClassCastException e) {\n        fatalError("Class doesn\'t implement Set");\n    }\n\n    // Exercise the set\n    s.addAll(Arrays.asList(args).subList(1, args.length));\n    System.out.println(s);\n}\n\nprivate static void fatalError(String msg) {\n    System.err.println(msg);\n    System.exit(1);\n}\n')),(0,r.kt)("p",null,"While this program is just a toy, the technique it demonstrates is quite powerful. The toy program could easily be turned into a generic set tester that validates the specified Set implementation by aggressively manipulating one or more instances and checking that they obey the Set contract. Similarly, it could be turned into a generic set performance analysis tool. In fact, this technique is sufficiently powerful to implement a full-blown service provider framework (Item 1). Usually, this technique is all that you need in the way of reflection."),(0,r.kt)("p",null,"\u867d\u7136\u8fd9\u4e2a\u7a0b\u5e8f\u53ea\u662f\u4e00\u4e2a\u5c0f\u628a\u620f\uff0c\u4f46\u5b83\u6f14\u793a\u7684\u6280\u672f\u975e\u5e38\u5f3a\u5927\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8f6c\u6362\u6210\u4e00\u4e2a\u901a\u7528\u7684\u96c6\u5408\u6d4b\u8bd5\u5668\uff0c\u901a\u8fc7\u79ef\u6781\u5730\u64cd\u4f5c\u4e00\u4e2a\u6216\u591a\u4e2a\u5b9e\u4f8b\u5e76\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u9075\u5b88 Set \u63a5\u53e3\u7ea6\u5b9a\u6765\u9a8c\u8bc1\u6307\u5b9a\u7684 Set \u5b9e\u73b0\u3002\u7c7b\u4f3c\u5730\uff0c\u5b83\u53ef\u4ee5\u53d8\u6210\u4e00\u4e2a\u901a\u7528\u7684\u96c6\u5408\u6027\u80fd\u5206\u6790\u5de5\u5177\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8be5\u6280\u672f\u8db3\u591f\u5f3a\u5927\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6210\u719f\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u6846\u67b6\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors"},"Item-1"),"\uff09\u3002"),(0,r.kt)("p",null,"This example demonstrates two disadvantages of reflection. First, the example can generate six different exceptions at runtime, all of which would have been compile-time errors if reflective instantiation were not used. (For fun, you can cause the program to generate each of the six exceptions by passing in appropriate command line arguments.) The second disadvantage is that it takes twenty-five lines of tedious code to generate an instance of the class from its name, whereas a constructor invocation would fit neatly on a single line. The length of the program could be reduced by catching ReflectiveOperationException, a superclass of the various reflective exceptions that was introduced in Java 7. Both disadvantages are restricted to the part of the program that instantiates the object. Once instantiated, the set is indistinguishable from any other Set instance. In a real program, the great bulk of the code is thus unaffected by this limited use of reflection."),(0,r.kt)("p",null,"\u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u8bf4\u660e\u4e86\u53cd\u5c04\u7684\u4e24\u4e2a\u7f3a\u70b9\u3002\u9996\u5148\uff0c\u8be5\u793a\u4f8b\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u751f\u6210\u516d\u4e2a\u4e0d\u540c\u7684\u5f02\u5e38\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u53cd\u5c04\u5b9e\u4f8b\u5316\uff0c\u6240\u6709\u8fd9\u4e9b\u5f02\u5e38\u90fd\u5c06\u662f\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\uff08\u6709\u8da3\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u5165\u9002\u5f53\u7684\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u4f7f\u7a0b\u5e8f\u751f\u6210\u516d\u4e2a\u5f02\u5e38\u4e2d\u7684\u6bcf\u4e00\u4e2a\u3002\uff09\u7b2c\u4e8c\u4e2a\u7f3a\u70b9\u662f\uff0c\u6839\u636e\u7c7b\u7684\u540d\u79f0\u751f\u6210\u7c7b\u7684\u5b9e\u4f8b\u9700\u8981 25 \u884c\u5197\u957f\u7684\u4ee3\u7801\uff0c\u800c\u6784\u9020\u51fd\u6570\u8c03\u7528\u53ea\u9700\u8981\u4e00\u884c\u3002\u901a\u8fc7\u6355\u83b7 ReflectiveOperationException\uff08Java 7 \u4e2d\u5f15\u5165\u7684\u5404\u79cd\u53cd\u5c04\u5f02\u5e38\u7684\u8d85\u7c7b\uff09\uff0c\u53ef\u4ee5\u51cf\u5c11\u7a0b\u5e8f\u7684\u957f\u5ea6\u3002\u8fd9\u4e24\u4e2a\u7f3a\u70b9\u90fd\u53ea\u9650\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u7a0b\u5e8f\u90e8\u5206\u3002\u5b9e\u4f8b\u5316\u540e\uff0c\u4e0e\u4efb\u4f55\u5176\u4ed6 Set \u5b9e\u4f8b\u5c06\u96be\u4ee5\u533a\u5206\u3002\u5728\u5b9e\u9645\u7684\u7a0b\u5e8f\u4e2d\uff0c\u901a\u8fc7\u8fd9\u79cd\u9650\u5b9a\u4f7f\u7528\u53cd\u5c04\u7684\u65b9\u6cd5\uff0c\u5927\u90e8\u5206\u4ee3\u7801\u53ef\u4ee5\u514d\u53d7\u5f71\u54cd\u3002"),(0,r.kt)("p",null,"If you compile this program, you\u2019ll get an unchecked cast warning. This warning is legitimate, in that the cast to ",(0,r.kt)("inlineCode",{parentName:"p"},"Class<? extends Set<String>>")," will succeed even if the named class is not a Set implementation, in which case the program with throw a ClassCastException when it instantiates the class. To learn about suppressing the warning, read Item 27."),(0,r.kt)("p",null,"\u5982\u679c\u7f16\u8bd1\u6b64\u7a0b\u5e8f\uff0c\u5c06\u5f97\u5230 unchecked \u7684\u5f3a\u5236\u8f6c\u6362\u8b66\u544a\u3002\u8fd9\u4e2a\u8b66\u544a\u662f\u5408\u6cd5\u7684\uff0c\u5373\u4f7f\u6307\u5b9a\u7684\u7c7b\u4e0d\u662f Set \u5b9e\u73b0\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"Class<? extends Set<String>>")," \u4e5f\u4f1a\u6210\u529f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u5728\u5b9e\u4f8b\u5316\u7c7b\u65f6\u629b\u51fa ClassCastException\u3002\u8981\u4e86\u89e3\u5982\u4f55\u6291\u5236\u8b66\u544a\uff0c\u8bf7\u9605\u8bfb ",(0,r.kt)("a",{parentName:"p",href:"./Chapter-5-Item-27-Eliminate-unchecked-warnings"},"Item-27"),"\u3002"),(0,r.kt)("p",null,"A legitimate, if rare, use of reflection is to manage a class\u2019s dependencies on other classes, methods, or fields that may be absent at runtime. This can be useful if you are writing a package that must run against multiple versions of some other package. The technique is to compile your package against the minimal environment required to support it, typically the oldest version, and to access any newer classes or methods reflectively. To make this work, you have to take appropriate action if a newer class or method that you are attempting to access does not exist at runtime. Appropriate action might consist of using some alternate means to accomplish the same goal or operating with reduced functionality."),(0,r.kt)("p",null,"\u53cd\u5c04\u7684\u5408\u6cd5\u7528\u9014\uff08\u5f88\u5c11\uff09\u662f\u7ba1\u7406\u7c7b\u5bf9\u8fd0\u884c\u65f6\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\u5176\u4ed6\u7c7b\u3001\u65b9\u6cd5\u6216\u5b57\u6bb5\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5982\u679c\u4f60\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u5305\uff0c\u5e76\u4e14\u5fc5\u987b\u9488\u5bf9\u5176\u4ed6\u5305\u7684\u591a\u4e2a\u7248\u672c\u8fd0\u884c\uff0c\u6b64\u65f6\u53cd\u5c04\u5c06\u975e\u5e38\u6709\u7528\u3002\u8be5\u6280\u672f\u662f\u6839\u636e\u652f\u6301\u5305\u6240\u9700\u7684\u6700\u5c0f\u73af\u5883\uff08\u901a\u5e38\u662f\u6700\u8001\u7684\u7248\u672c\uff09\u7f16\u8bd1\u5305\uff0c\u5e76\u53cd\u5c04\u6027\u5730\u8bbf\u95ee\u4efb\u4f55\u8f83\u65b0\u7684\u7c7b\u6216\u65b9\u6cd5\u3002\u5982\u679c\u4f60\u8bd5\u56fe\u8bbf\u95ee\u7684\u65b0\u7c7b\u6216\u65b9\u6cd5\u5728\u8fd0\u884c\u65f6\u4e0d\u5b58\u5728\uff0c\u8981\u4f7f\u6b64\u5de5\u4f5c\u6b63\u5e38\u8fdb\u884c\uff0c\u5219\u5fc5\u987b\u91c7\u53d6\u9002\u5f53\u7684\u64cd\u4f5c\u3002\u9002\u5f53\u7684\u64cd\u4f5c\u53ef\u80fd\u5305\u62ec\u4f7f\u7528\u4e00\u4e9b\u66ff\u4ee3\u65b9\u6cd5\u6765\u5b8c\u6210\u76f8\u540c\u7684\u76ee\u6807\uff0c\u6216\u8005\u4f7f\u7528\u7b80\u5316\u7684\u529f\u80fd\u8fdb\u884c\u64cd\u4f5c\u3002"),(0,r.kt)("p",null,"In summary, reflection is a powerful facility that is required for certain sophisticated system programming tasks, but it has many disadvantages. If you are writing a program that has to work with classes unknown at compile time, you should, if at all possible, use reflection only to instantiate objects, and access the objects using some interface or superclass that is known at compile time."),(0,r.kt)("p",null,"\u603b\u4e4b\uff0c\u53cd\u5c04\u662f\u4e00\u79cd\u529f\u80fd\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u590d\u6742\u7684\u7cfb\u7edf\u7f16\u7a0b\u4efb\u52a1\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u662f\u5b83\u6709\u5f88\u591a\u7f3a\u70b9\u3002\u5982\u679c\u7f16\u5199\u7684\u7a0b\u5e8f\u5fc5\u987b\u5728\u7f16\u8bd1\u65f6\u5904\u7406\u672a\u77e5\u7684\u7c7b\uff0c\u5219\u5e94\u8be5\u5c3d\u53ef\u80fd\u53ea\u4f7f\u7528\u53cd\u5c04\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\u7684\u63a5\u53e3\u6216\u8d85\u7c7b\u8bbf\u95ee\u5bf9\u8c61\u3002"),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"./Chapter-9-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-9-Item-64-Refer-to-objects-by-their-interfaces"},"Item 64: Refer to objects by their interfaces\uff08\u901a\u8fc7\u63a5\u53e3\u5f15\u7528\u5bf9\u8c61\uff09"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-9-Item-66-Use-native-methods-judiciously"},"Item 66: Use native methods judiciously\uff08\u660e\u667a\u5730\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\uff09")))))}m.isMDXComponent=!0}}]);