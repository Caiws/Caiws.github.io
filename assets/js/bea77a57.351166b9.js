"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4270],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=c(r),u=n,f=h["".concat(l,".").concat(u)]||h[u]||d[u]||s;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var c=2;c<s;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},4513:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const s={},i=void 0,o={unversionedId:"Books/EffectiveJava3/Chapter-12/Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve",id:"Books/EffectiveJava3/Chapter-12/Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve",title:"Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve",description:"Chapter 12. Serialization\uff08\u5e8f\u5217\u5316\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve.md",sourceDirName:"Books/EffectiveJava3/Chapter-12",slug:"/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-12-Item-88-Write-readObject-methods-defensively",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"},next:{title:"Chapter-12-Item-90-Consider-serialization-proxies-instead-of-serialized-instances",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-90-Consider-serialization-proxies-instead-of-serialized-instances"}},l={},c=[{value:"Chapter 12. Serialization\uff08\u5e8f\u5217\u5316\uff09",id:"chapter-12-serialization\u5e8f\u5217\u5316",level:2},{value:"Item 89: For instance control, prefer enum types to readResolve\uff08\u5bf9\u4e8e\u5b9e\u4f8b\u63a7\u5236\uff0c\u679a\u4e3e\u7c7b\u578b\u4f18\u4e8e readResolve\uff09",id:"item-89-for-instance-control-prefer-enum-types-to-readresolve\u5bf9\u4e8e\u5b9e\u4f8b\u63a7\u5236\u679a\u4e3e\u7c7b\u578b\u4f18\u4e8e-readresolve",level:3}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-12-serialization\u5e8f\u5217\u5316"},"Chapter 12. Serialization\uff08\u5e8f\u5217\u5316\uff09"),(0,n.kt)("h3",{id:"item-89-for-instance-control-prefer-enum-types-to-readresolve\u5bf9\u4e8e\u5b9e\u4f8b\u63a7\u5236\u679a\u4e3e\u7c7b\u578b\u4f18\u4e8e-readresolve"},"Item 89: For instance control, prefer enum types to readResolve\uff08\u5bf9\u4e8e\u5b9e\u4f8b\u63a7\u5236\uff0c\u679a\u4e3e\u7c7b\u578b\u4f18\u4e8e readResolve\uff09"),(0,n.kt)("p",null,"Item 3 describes the Singleton pattern and gives the following example of a singleton class. This class restricts access to its constructor to ensure that only a single instance is ever created:"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"./Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"},"Item-3")," \u63cf\u8ff0\u4e86\u5355\u4f8b\u6a21\u5f0f\uff0c\u5e76\u7ed9\u51fa\u4e86\u4e0b\u9762\u7684\u5355\u4f8b\u7c7b\u793a\u4f8b\u3002\u8be5\u7c7b\u9650\u5236\u5bf9\u5176\u6784\u9020\u51fd\u6570\u7684\u8bbf\u95ee\uff0c\u4ee5\u786e\u4fdd\u53ea\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"public class Elvis {\n    public static final Elvis INSTANCE = new Elvis();\n    private Elvis() { ... }\n    public void leaveTheBuilding() { ... }\n}\n")),(0,n.kt)("p",null,"As noted in Item 3, this class would no longer be a singleton if the words implements Serializable were added to its declaration. It doesn\u2019t matter whether the class uses the default serialized form or a custom serialized form (Item 87), nor does it matter whether the class provides an explicit readObject method (Item 88). Any readObject method, whether explicit or default, returns a newly created instance, which will not be the same instance that was created at class initialization time."),(0,n.kt)("p",null,"\u5982 ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"},"Item-3")," \u6240\u8ff0\uff0c\u5982\u679c\u5b9e\u73b0 Serializable \u63a5\u53e3\uff0c\u8be5\u7c7b\u5c06\u4e0d\u518d\u662f\u5355\u4f8b\u7684\u3002\u7c7b\u4f7f\u7528\u9ed8\u8ba4\u5e8f\u5217\u5316\u5f62\u5f0f\u8fd8\u662f\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5f62\u5f0f\u5e76\u4e0d\u91cd\u8981\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-87-Consider-using-a-custom-serialized-form"},"Item-87"),"\uff09\uff0c\u7c7b\u662f\u5426\u63d0\u4f9b\u663e\u5f0f readObject \u65b9\u6cd5\u4e5f\u4e0d\u91cd\u8981\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"},"Item-88"),"\uff09\u3002\u4efb\u4f55 readObject \u65b9\u6cd5\uff0c\u4e0d\u7ba1\u662f\u663e\u5f0f\u7684\u8fd8\u662f\u9ed8\u8ba4\u7684\uff0c\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b\uff0c\u8fd9\u4e2a\u5b9e\u4f8b\u4e0e\u7c7b\u521d\u59cb\u5316\u65f6\u521b\u5efa\u7684\u5b9e\u4f8b\u4e0d\u540c\u3002"),(0,n.kt)("p",null,"The readResolve feature allows you to substitute another instance for the one created by readObject ","[Serialization, 3.7]",". If the class of an object being deserialized defines a readResolve method with the proper declaration, this method is invoked on the newly created object after it is deserialized. The object reference returned by this method is then returned in place of the newly created object. In most uses of this feature, no reference to the newly created object is retained, so it immediately becomes eligible for garbage collection."),(0,n.kt)("p",null,"readResolve \u7279\u6027\u5141\u8bb8\u4f60\u7528\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u66ff\u6362 readObject","[Serialization, 3.7]"," \u521b\u5efa\u7684\u5b9e\u4f8b\u3002\u5982\u679c\u6b63\u5728\u53cd\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u7684\u7c7b\u5b9a\u4e49\u4e86 readResolve \u65b9\u6cd5\uff0c\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u53cd\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5c06\u5728\u8be5\u5bf9\u8c61\u4e0a\u8c03\u7528\u8be5\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u5f15\u7528\u5c06\u4ee3\u66ff\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u8fd4\u56de\u3002\u5728\u8be5\u7279\u6027\u7684\u5927\u591a\u6570\u4f7f\u7528\u4e2d\uff0c\u4e0d\u4fdd\u7559\u5bf9\u65b0\u521b\u5efa\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u5b83\u7acb\u5373\u5c31\u6709\u8d44\u683c\u8fdb\u884c\u5783\u573e\u6536\u96c6\u3002"),(0,n.kt)("p",null,"If the Elvis class is made to implement Serializable, the following readResolve method suffices to guarantee the singleton property:"),(0,n.kt)("p",null,"\u5982\u679c Elvis \u7c7b\u8981\u5b9e\u73b0 Serializable \u63a5\u53e3\uff0c\u4e0b\u9762\u7684 readResolve \u65b9\u6cd5\u5c31\u8db3\u4ee5\u4fdd\u8bc1\u5176\u5355\u4f8b\u5c5e\u6027\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// readResolve for instance control - you can do better!\nprivate Object readResolve() {\n    // Return the one true Elvis and let the garbage collector\n    // take care of the Elvis impersonator.\n    return INSTANCE;\n}\n")),(0,n.kt)("p",null,"This method ignores the deserialized object, returning the distinguished Elvis instance that was created when the class was initialized. Therefore, the serialized form of an Elvis instance need not contain any real data; all instance fields should be declared transient. In fact, ",(0,n.kt)("strong",{parentName:"p"},"if you depend on readResolve for instance control, all instance fields with object reference types must be declared transient.")," Otherwise, it is possible for a determined attacker to secure a reference to the deserialized object before its readResolve method is run, using a technique that is somewhat similar to the MutablePeriod attack in Item 88."),(0,n.kt)("p",null,"\u6b64\u65b9\u6cd5\u5ffd\u7565\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\uff0c\u8fd4\u56de\u521d\u59cb\u5316\u7c7b\u65f6\u521b\u5efa\u7684\u7279\u6b8a Elvis \u5b9e\u4f8b\u3002\u56e0\u6b64\uff0cElvis \u5b9e\u4f8b\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u4e0d\u9700\u8981\u5305\u542b\u4efb\u4f55\u5b9e\u9645\u6570\u636e\uff1b\u6240\u6709\u5b9e\u4f8b\u5b57\u6bb5\u90fd\u5e94\u8be5\u58f0\u660e\u4e3a transient\u3002\u4e8b\u5b9e\u4e0a\uff0c",(0,n.kt)("strong",{parentName:"p"},"\u5982\u679c\u4f60\u4f9d\u8d56 readResolve \u8fdb\u884c\u5b9e\u4f8b\u63a7\u5236\uff0c\u90a3\u4e48\u6240\u6709\u5177\u6709\u5bf9\u8c61\u5f15\u7528\u7c7b\u578b\u7684\u5b9e\u4f8b\u5b57\u6bb5\u90fd\u5fc5\u987b\u58f0\u660e\u4e3a transient\u3002")," \u5426\u5219\uff0c\u6709\u7684\u653b\u51fb\u8005\u6709\u53ef\u80fd\u5728\u8fd0\u884c\u53cd\u5e8f\u5217\u5316\u5bf9\u8c61\u7684 readResolve \u65b9\u6cd5\u4e4b\u524d\u4fdd\u62a4\u5bf9\u8be5\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u4f7f\u7528\u7684\u6280\u672f\u6709\u70b9\u7c7b\u4f3c\u4e8e ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"},"Item-88")," \u4e2d\u7684 MutablePeriod \u653b\u51fb\u3002"),(0,n.kt)("p",null,"The attack is a bit complicated, but the underlying idea is simple. If a singleton contains a nontransient object reference field, the contents of this field will be deserialized before the singleton\u2019s readResolve method is run. This allows a carefully crafted stream to \u201csteal\u201d a reference to the originally deserialized singleton at the time the contents of the object reference field are deserialized."),(0,n.kt)("p",null,"\u653b\u51fb\u6709\u70b9\u590d\u6742\uff0c\u4f46\u5176\u57fa\u672c\u601d\u60f3\u5f88\u7b80\u5355\u3002\u5982\u679c\u5355\u4f8b\u5305\u542b\u4e00\u4e2a\u975e transient \u5bf9\u8c61\u5f15\u7528\u5b57\u6bb5\uff0c\u5219\u5728\u8fd0\u884c\u5355\u4f8b\u7684 readResolve \u65b9\u6cd5\u4e4b\u524d\uff0c\u5c06\u5bf9\u8be5\u5b57\u6bb5\u7684\u5185\u5bb9\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u5141\u8bb8\u4e00\u4e2a\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6d41\u5728\u5bf9\u8c61\u5f15\u7528\u5b57\u6bb5\u7684\u5185\u5bb9\u88ab\u53cd\u5e8f\u5217\u5316\u65f6\u300c\u7a83\u53d6\u300d\u5bf9\u539f\u6765\u53cd\u5e8f\u5217\u5316\u7684\u5355\u4f8b\u5bf9\u8c61\u7684\u5f15\u7528\u3002"),(0,n.kt)("p",null,"Here\u2019s how it works in more detail. First, write a \u201cstealer\u201d class that has both a readResolve method and an instance field that refers to the serialized singleton in which the stealer \u201chides.\u201d In the serialization stream, replace the singleton\u2019s nontransient field with an instance of the stealer. You now have a circularity: the singleton contains the stealer, and the stealer refers to the singleton."),(0,n.kt)("p",null,"\u4e0b\u9762\u662f\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u3002\u9996\u5148\uff0c\u7f16\u5199\u4e00\u4e2a stealer \u7c7b\uff0c\u8be5\u7c7b\u5177\u6709 readResolve \u65b9\u6cd5\u548c\u4e00\u4e2a\u5b9e\u4f8b\u5b57\u6bb5\uff0c\u8be5\u5b9e\u4f8b\u5b57\u6bb5\u5f15\u7528\u5e8f\u5217\u5316\u7684\u5355\u4f8b\uff0c\u5176\u4e2d stealer \u300c\u9690\u85cf\u300d\u5728\u5176\u4e2d\u3002\u5728\u5e8f\u5217\u5316\u6d41\u4e2d\uff0c\u7528\u4e00\u4e2a stealer \u5b9e\u4f8b\u66ff\u6362\u5355\u4f8b\u7684\u975e transient \u5b57\u6bb5\u3002\u73b0\u5728\u4f60\u6709\u4e86\u4e00\u4e2a\u5faa\u73af\uff1a\u5355\u4f8b\u5305\u542b\u4e86 stealer\uff0c\u800c stealer \u5f15\u7528\u4e86\u5355\u4f8b\u3002"),(0,n.kt)("p",null,"Because the singleton contains the stealer, the stealer\u2019s readResolve method runs first when the singleton is deserialized. As a result, when the stealer\u2019s readResolve method runs, its instance field still refers to the partially deserialized (and as yet unresolved) singleton."),(0,n.kt)("p",null,"\u56e0\u4e3a\u5355\u4f8b\u5305\u542b stealer\uff0c\u6240\u4ee5\u5f53\u53cd\u5e8f\u5217\u5316\u5355\u4f8b\u65f6\uff0c\u7a83\u53d6\u5668\u7684 readResolve \u65b9\u6cd5\u9996\u5148\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u5f53 stealer \u7684 readResolve \u65b9\u6cd5\u8fd0\u884c\u65f6\uff0c\u5b83\u7684\u5b9e\u4f8b\u5b57\u6bb5\u4ecd\u7136\u5f15\u7528\u90e8\u5206\u53cd\u5e8f\u5217\u5316\uff08\u4e14\u5c1a\u672a\u89e3\u6790\uff09\u7684\u5355\u4f8b\u3002"),(0,n.kt)("p",null,"The stealer\u2019s readResolve method copies the reference from its instance field into a static field so that the reference can be accessed after the readResolve method runs. The method then returns a value of the correct type for the field in which it\u2019s hiding. If it didn\u2019t do this, the VM would throw a ClassCastException when the serialization system tried to store the stealer reference into this field."),(0,n.kt)("p",null,"stealer \u7684 readResolve \u65b9\u6cd5\u5c06\u5f15\u7528\u4ece\u5176\u5b9e\u4f8b\u5b57\u6bb5\u590d\u5236\u5230\u9759\u6001\u5b57\u6bb5\uff0c\u4ee5\u4fbf\u5728 readResolve \u65b9\u6cd5\u8fd0\u884c\u540e\u8bbf\u95ee\u5f15\u7528\u3002\u7136\u540e\uff0c\u8be5\u65b9\u6cd5\u4e3a\u5176\u9690\u85cf\u7684\u5b57\u6bb5\u8fd4\u56de\u6b63\u786e\u7c7b\u578b\u7684\u503c\u3002\u5982\u679c\u4e0d\u8fd9\u6837\u505a\uff0c\u5f53\u5e8f\u5217\u5316\u7cfb\u7edf\u8bd5\u56fe\u5c06 stealer \u5f15\u7528\u5b58\u50a8\u5230\u8be5\u5b57\u6bb5\u65f6\uff0cVM \u5c06\u629b\u51fa ClassCastException\u3002"),(0,n.kt)("p",null,"To make this concrete, consider the following broken singleton:"),(0,n.kt)("p",null,"\u8981\u4f7f\u95ee\u9898\u5177\u4f53\u5316\uff0c\u8bf7\u8003\u8651\u4ee5\u4e0b\u88ab\u7834\u574f\u7684\u5355\u4f8b\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'// Broken singleton - has nontransient object reference field!\npublic class Elvis implements Serializable {\n    public static final Elvis INSTANCE = new Elvis();\n    private Elvis() { }\n    private String[] favoriteSongs ={ "Hound Dog", "Heartbreak Hotel" };\n    public void printFavorites() {\n        System.out.println(Arrays.toString(favoriteSongs));\n    }\n    private Object readResolve() {\n    return INSTANCE;\n    }\n}\n')),(0,n.kt)("p",null,"Here is a \u201cstealer\u201d class, constructed as per the description above:"),(0,n.kt)("p",null,"\u8fd9\u91cc\u662f\u4e00\u4e2a stealer \u7c7b\uff0c\u6309\u7167\u4e0a\u9762\u7684\u63cf\u8ff0\u6784\u9020\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'public class ElvisStealer implements Serializable {\n    static Elvis impersonator;\n    private Elvis payload;\n\n    private Object readResolve() {\n        // Save a reference to the "unresolved" Elvis instance\n        impersonator = payload;\n        // Return object of correct type for favoriteSongs field\n        return new String[] { "A Fool Such as I" };\n    }\n\n    private static final long serialVersionUID =0;\n}\n')),(0,n.kt)("p",null,"Finally, here is an ugly program that deserializes a handcrafted stream to produce two distinct instances of the flawed singleton. The deserialize method is omitted from this program because it\u2019s identical to the one on page 354:"),(0,n.kt)("p",null,"\u6700\u540e\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u95ee\u9898\u7684\u7a0b\u5e8f\uff0c\u5b83\u53cd\u5e8f\u5217\u5316\u4e86\u4e00\u4e2a\u624b\u5de5\u5236\u4f5c\u7684\u6d41\uff0c\u4ee5\u751f\u6210\u6709\u7f3a\u9677\u7684\u5355\u4f8b\u7684\u4e24\u4e2a\u4e0d\u540c\u5b9e\u4f8b\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u7701\u7565\u4e86\u53cd\u5e8f\u5217\u5316\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4e0e\u7b2c 354 \u9875\u7684\u65b9\u6cd5\u76f8\u540c\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"public class ElvisImpersonator {\n// Byte stream couldn't have come from a real Elvis instance!\n    private static final byte[] serializedForm = {\n        (byte)0xac, (byte)0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x05,\n        0x45, 0x6c, 0x76, 0x69, 0x73, (byte)0x84, (byte)0xe6,\n        (byte)0x93, 0x33, (byte)0xc3, (byte)0xf4, (byte)0x8b,\n        0x32, 0x02, 0x00, 0x01, 0x4c, 0x00, 0x0d, 0x66, 0x61, 0x76,\n        0x6f, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x73,\n        0x74, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,\n        0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,\n        0x3b, 0x78, 0x70, 0x73, 0x72, 0x00, 0x0c, 0x45, 0x6c, 0x76,\n        0x69, 0x73, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01,\n        0x4c, 0x00, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,\n        0x74, 0x00, 0x07, 0x4c, 0x45, 0x6c, 0x76, 0x69, 0x73, 0x3b,\n        0x78, 0x70, 0x71, 0x00, 0x7e, 0x00, 0x02\n    };\n\n    public static void main(String[] args) {\n        // Initializes ElvisStealer.impersonator and returns\n        // the real Elvis (which is Elvis.INSTANCE)\n        Elvis elvis = (Elvis) deserialize(serializedForm);\n        Elvis impersonator = ElvisStealer.impersonator;\n        elvis.printFavorites();\n        impersonator.printFavorites();\n    }\n}\n")),(0,n.kt)("p",null,"Running this program produces the following output, conclusively proving that it\u2019s possible to create two distinct Elvis instances (with different tastes in music):"),(0,n.kt)("p",null,"\u8fd0\u884c\u6b64\u7a0b\u5e8f\u5c06\u751f\u6210\u4ee5\u4e0b\u8f93\u51fa\uff0c\u6700\u7ec8\u8bc1\u660e\u53ef\u4ee5\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u7684 Elvis \u5b9e\u4f8b\uff08\u5177\u6709\u4e0d\u540c\u7684\u97f3\u4e50\u54c1\u5473\uff09\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"[Hound Dog, Heartbreak Hotel]\n[A Fool Such as I]\n")),(0,n.kt)("p",null,"You could fix the problem by declaring the favoriteSongs field transient, but you\u2019re better off fixing it by making Elvis a single-element enum type (Item 3). As demonstrated by the ElvisStealer attack, using a readResolve method to prevent a \u201ctemporary\u201d deserialized instance from being accessed by an attacker is fragile and demands great care."),(0,n.kt)("p",null,"\u901a\u8fc7\u5c06 favorites \u5b57\u6bb5\u58f0\u660e\u4e3a transient \u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u6700\u597d\u628a Elvis \u505a\u6210\u662f\u4e00\u4e2a\u5355\u5143\u7d20\u7684\u679a\u4e3e\u7c7b\u578b\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"},"Item-3"),"\uff09\u3002ElvisStealer \u6240\u793a\u7684\u653b\u51fb\u8868\u540d\uff0c\u4f7f\u7528 readResolve \u65b9\u6cd5\u9632\u6b62\u300ctemporary\u300d\u53cd\u5e8f\u5217\u5316\u5b9e\u4f8b\u88ab\u653b\u51fb\u8005\u8bbf\u95ee\u7684\u65b9\u5f0f\u662f\u8106\u5f31\u7684\uff0c\u9700\u8981\u975e\u5e38\u5c0f\u5fc3\u3002"),(0,n.kt)("p",null,"If you write your serializable instance-controlled class as an enum, Java guarantees you that there can be no instances besides the declared constants, unless an attacker abuses a privileged method such as AccessibleObject.setAccessible. Any attacker who can do that already has sufficient privileges to execute arbitrary native code, and all bets are off. Here\u2019s how our Elvis example looks as an enum:"),(0,n.kt)("p",null,"\u5982\u679c\u4f60\u5c06\u53ef\u5e8f\u5217\u5316\u7684\u5b9e\u4f8b\u63a7\u5236\u7c7b\u7f16\u5199\u4e3a\u679a\u4e3e\u7c7b\u578b, Java \u4fdd\u8bc1\u9664\u4e86\u58f0\u660e\u7684\u5e38\u91cf\u4e4b\u5916\u4e0d\u4f1a\u6709\u4efb\u4f55\u5b9e\u4f8b\uff0c\u9664\u975e\u653b\u51fb\u8005\u6ee5\u7528\u4e86\u7279\u6743\u65b9\u6cd5\uff0c\u5982 ",(0,n.kt)("inlineCode",{parentName:"p"},"AccessibleObject.setAccessible"),"\u3002\u4efb\u4f55\u80fd\u591f\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u653b\u51fb\u8005\u90fd\u5df2\u7ecf\u62e5\u6709\u8db3\u591f\u7684\u7279\u6743\u6765\u6267\u884c\u4efb\u610f\u7684\u672c\u5730\u4ee3\u7801\uff0call bets are off\u3002\u4ee5\u4e0b\u662f\u628a Elvis \u5199\u6210\u679a\u4e3e\u7684\u4f8b\u5b50\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'// Enum singleton - the preferred approach\npublic enum Elvis {\n    INSTANCE;\n    private String[] favoriteSongs ={ "Hound Dog", "Heartbreak Hotel" };\n    public void printFavorites() {\n        System.out.println(Arrays.toString(favoriteSongs));\n    }\n}\n')),(0,n.kt)("p",null,"The use of readResolve for instance control is not obsolete. If you have to write a serializable instance-controlled class whose instances are not known at compile time, you will not be able to represent the class as an enum type."),(0,n.kt)("p",null,"\u4f7f\u7528 readResolve \u8fdb\u884c\u5b9e\u4f8b\u63a7\u5236\u5e76\u4e0d\u8fc7\u65f6\u3002\u5982\u679c\u5fc5\u987b\u7f16\u5199\u4e00\u4e2a\u53ef\u5e8f\u5217\u5316\u7684\u5b9e\u4f8b\u63a7\u5236\u7c7b\uff0c\u800c\u8be5\u7c7b\u7684\u5b9e\u4f8b\u5728\u7f16\u8bd1\u65f6\u662f\u672a\u77e5\u7684\uff0c\u5219\u4e0d\u80fd\u5c06\u8be5\u7c7b\u8868\u793a\u4e3a\u679a\u4e3e\u7c7b\u578b\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"The accessibility of readResolve is significant.")," If you place a readResolve method on a final class, it should be private. If you place a readResolve method on a nonfinal class, you must carefully consider its accessibility. If it is private, it will not apply to any subclasses. If it is packageprivate, it will apply only to subclasses in the same package. If it is protected or public, it will apply to all subclasses that do not override it. If a readResolve method is protected or public and a subclass does not override it, deserializing a subclass instance will produce a superclass instance, which is likely to cause a ClassCastException."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"readResolve \u7684\u53ef\u8bbf\u95ee\u6027\u975e\u5e38\u91cd\u8981\u3002")," \u5982\u679c\u4f60\u5c06 readResolve \u65b9\u6cd5\u653e\u5728 final \u7c7b\u4e0a\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u662f\u79c1\u6709\u7684\u3002\u5982\u679c\u5c06 readResolve \u65b9\u6cd5\u653e\u5728\u975e final \u7c7b\u4e0a\uff0c\u5fc5\u987b\u4ed4\u7ec6\u8003\u8651\u5176\u53ef\u8bbf\u95ee\u6027\u3002\u5982\u679c\u5b83\u662f\u79c1\u6709\u7684\uff0c\u5b83\u5c06\u4e0d\u5e94\u7528\u4e8e\u4efb\u4f55\u5b50\u7c7b\u3002\u5982\u679c\u5b83\u662f\u5305\u7ea7\u79c1\u6709\u7684\uff0c\u5b83\u5c06\u53ea\u9002\u7528\u4e8e\u540c\u4e00\u5305\u4e2d\u7684\u5b50\u7c7b\u3002\u5982\u679c\u5b83\u662f\u53d7\u4fdd\u62a4\u7684\u6216\u516c\u5171\u7684\uff0c\u5b83\u5c06\u5e94\u7528\u4e8e\u4e0d\u8986\u76d6\u5b83\u7684\u6240\u6709\u5b50\u7c7b\u3002\u5982\u679c readResolve \u65b9\u6cd5\u662f\u53d7\u4fdd\u62a4\u7684\u6216\u516c\u5171\u7684\uff0c\u800c\u5b50\u7c7b\u6ca1\u6709\u8986\u76d6\u5b83\uff0c\u53cd\u5e8f\u5217\u5316\u5b50\u7c7b\u5b9e\u4f8b\u5c06\u751f\u6210\u8d85\u7c7b\u5b9e\u4f8b\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4 ClassCastException\u3002"),(0,n.kt)("p",null,"To summarize, use enum types to enforce instance control invariants wherever possible. If this is not possible and you need a class to be both serializable and instance-controlled, you must provide a readResolve method and ensure that all of the class\u2019s instance fields are either primitive or transient."),(0,n.kt)("p",null,"\u603b\u4e4b\uff0c\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u679a\u4e3e\u7c7b\u578b\u5f3a\u5236\u5b9e\u4f8b\u63a7\u5236\u4e0d\u53d8\u91cf\u3002\u5982\u679c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5e76\u4e14\u4f60\u9700\u8981\u4e00\u4e2a\u65e2\u53ef\u5e8f\u5217\u5316\u53c8\u5b9e\u4f8b\u63a7\u5236\u7684\u7c7b\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a readResolve \u65b9\u6cd5\uff0c\u5e76\u786e\u4fdd\u8be5\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u5b57\u6bb5\u90fd\u662f\u57fa\u672c\u7c7b\u578b\uff0c\u6216\u4f7f\u7528 transient \u4fee\u9970\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-12/Chapter-12-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"},"Item 88: Write readObject methods defensively\uff08\u9632\u5fa1\u6027\u5730\u7f16\u5199 readObject \u65b9\u6cd5\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-12/Chapter-12-Item-90-Consider-serialization-proxies-instead-of-serialized-instances"},"Item 90: Consider serialization proxies instead of serialized instances\uff08\u8003\u8651\u4ee5\u5e8f\u5217\u5316\u4ee3\u7406\u4ee3\u66ff\u5e8f\u5217\u5316\u5b9e\u4f8b\uff09")))))}d.isMDXComponent=!0}}]);