"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4635],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=i.createContext({}),d=function(e){var t=i.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(a),m=n,u=p["".concat(l,".").concat(m)]||p[m]||h[m]||r;return a?i.createElement(u,s(s({ref:t},c),{},{components:a})):i.createElement(u,s({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var d=2;d<r;d++)s[d]=a[d];return i.createElement.apply(null,s)}return i.createElement.apply(null,a)}p.displayName="MDXCreateElement"},6048:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=a(7462),n=(a(7294),a(3905));const r={},s=void 0,o={unversionedId:"Books/EffectiveJava3/Chapter-12/Chapter-12-Item-87-Consider-using-a-custom-serialized-form",id:"Books/EffectiveJava3/Chapter-12/Chapter-12-Item-87-Consider-using-a-custom-serialized-form",title:"Chapter-12-Item-87-Consider-using-a-custom-serialized-form",description:"Chapter 12. Serialization\uff08\u5e8f\u5217\u5316\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-87-Consider-using-a-custom-serialized-form.md",sourceDirName:"Books/EffectiveJava3/Chapter-12",slug:"/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-87-Consider-using-a-custom-serialized-form",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-87-Consider-using-a-custom-serialized-form",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-87-Consider-using-a-custom-serialized-form.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-12-Item-86-Implement-Serializable-with-great-caution",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-86-Implement-Serializable-with-great-caution"},next:{title:"Chapter-12-Item-88-Write-readObject-methods-defensively",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"}},l={},d=[{value:"Chapter 12. Serialization\uff08\u5e8f\u5217\u5316\uff09",id:"chapter-12-serialization\u5e8f\u5217\u5316",level:2},{value:"Item 87: Consider using a custom serialized form\uff08\u8003\u8651\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5f62\u5f0f\uff09",id:"item-87-consider-using-a-custom-serialized-form\u8003\u8651\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5f62\u5f0f",level:3}],c={toc:d};function h(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"chapter-12-serialization\u5e8f\u5217\u5316"},"Chapter 12. Serialization\uff08\u5e8f\u5217\u5316\uff09"),(0,n.kt)("h3",{id:"item-87-consider-using-a-custom-serialized-form\u8003\u8651\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5f62\u5f0f"},"Item 87: Consider using a custom serialized form\uff08\u8003\u8651\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5f62\u5f0f\uff09"),(0,n.kt)("p",null,"When you are writing a class under time pressure, it is generally appropriate to concentrate your efforts on designing the best API. Sometimes this means releasing a \u201cthrowaway\u201d implementation that you know you\u2019ll replace in a future release. Normally this is not a problem, but if the class implements Serializable and uses the default serialized form, you\u2019ll never be able to escape completely from the throwaway implementation. It will dictate the serialized form forever. This is not just a theoretical problem. It happened to several classes in the Java libraries, including BigInteger."),(0,n.kt)("p",null,"\u5f53\u4f60\u5728\u65f6\u95f4\u7d27\u8feb\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u7c7b\u65f6\uff0c\u901a\u5e38\u5e94\u8be5\u5c06\u7cbe\u529b\u96c6\u4e2d\u5728\u8bbe\u8ba1\u6700\u4f73 API \u4e0a\u3002\u6709\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u53d1\u5e03\u4e00\u4e2a\u300c\u4e00\u6b21\u6027\u300d\u5b9e\u73b0\uff0c\u4f60\u4e5f\u77e5\u9053\u5728\u5c06\u6765\u7684\u7248\u672c\u4e2d\u4f1a\u66ff\u6362\u5b83\u3002\u901a\u5e38\u8fd9\u4e0d\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u7c7b\u5b9e\u73b0 Serializable \u63a5\u53e3\u5e76\u4f7f\u7528\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u4f60\u5c06\u6c38\u8fdc\u65e0\u6cd5\u5b8c\u5168\u6446\u8131\u8fd9\u4e2a\u300c\u4e00\u6b21\u6027\u300d\u7684\u5b9e\u73b0\u3002\u5b83\u5c06\u6c38\u8fdc\u5f71\u54cd\u5e8f\u5217\u5316\u7684\u5f62\u5f0f\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u7406\u8bba\u95ee\u9898\u3002\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728 Java \u5e93\u4e2d\u7684\u51e0\u4e2a\u7c7b\u4e0a\uff0c\u5305\u62ec BigInteger\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Do not accept the default serialized form without first considering whether it is appropriate.")," Accepting the default serialized form should be a conscious decision that this encoding is reasonable from the standpoint of flexibility, performance, and correctness. Generally speaking, you should accept the default serialized form only if it is largely identical to the encoding that you would choose if you were designing a custom serialized form."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5728\u6ca1\u6709\u8003\u8651\u9ed8\u8ba4\u5e8f\u5217\u5316\u5f62\u5f0f\u662f\u5426\u5408\u9002\u4e4b\u524d\uff0c\u4e0d\u8981\u63a5\u53d7\u5b83\u3002")," \u63a5\u53d7\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u5e94\u8be5\u662f\u4e00\u4e2a\u4e09\u601d\u800c\u540e\u884c\u7684\u51b3\u5b9a\uff0c\u5373\u4ece\u7075\u6d3b\u6027\u3001\u6027\u80fd\u548c\u6b63\u786e\u6027\u7684\u89d2\u5ea6\u7efc\u5408\u6765\u770b\uff0c\u8fd9\u79cd\u7f16\u7801\u662f\u5408\u7406\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8bbe\u8ba1\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5f62\u5f0f\u65f6\uff0c\u53ea\u6709\u4e0e\u9ed8\u8ba4\u5e8f\u5217\u5316\u5f62\u5f0f\u6240\u9009\u62e9\u7684\u7f16\u7801\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u76f8\u540c\u65f6\uff0c\u624d\u5e94\u8be5\u63a5\u53d7\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u3002"),(0,n.kt)("p",null,"The default serialized form of an object is a reasonably efficient encoding of the physical representation of the object graph rooted at the object. In other words, it describes the data contained in the object and in every object that is reachable from this object. It also describes the topology by which all of these objects are interlinked. The ideal serialized form of an object contains only the logical data represented by the object. It is independent of the physical representation."),(0,n.kt)("p",null,"\u5bf9\u8c61\u7684\u9ed8\u8ba4\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u76f8\u5bf9\u4e8e\u5b83\u7684\u7269\u7406\u8868\u793a\u6cd5\u800c\u8a00\u662f\u4e00\u79cd\u6bd4\u8f83\u6709\u6548\u7684\u7f16\u7801\u5f62\u5f0f\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u63cf\u8ff0\u4e86\u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u6570\u636e\u4ee5\u53ca\u4ece\u8be5\u5bf9\u8c61\u53ef\u4ee5\u8bbf\u95ee\u7684\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6570\u636e\u3002\u5b83\u8fd8\u63cf\u8ff0\u4e86\u6240\u6709\u8fd9\u4e9b\u5bf9\u8c61\u76f8\u4e92\u5173\u8054\u7684\u62d3\u6251\u7ed3\u6784\u3002\u7406\u60f3\u7684\u5bf9\u8c61\u5e8f\u5217\u5316\u5f62\u5f0f\u53ea\u5305\u542b\u5bf9\u8c61\u6240\u8868\u793a\u7684\u903b\u8f91\u6570\u636e\u3002\u5b83\u72ec\u7acb\u4e8e\u7269\u7406\u8868\u5f81\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"The default serialized form is likely to be appropriate if an object\u2019s physical representation is identical to its logical content.")," For example, the default serialized form would be reasonable for the following class, which simplistically represents a person\u2019s name:"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5982\u679c\u5bf9\u8c61\u7684\u7269\u7406\u8868\u793a\u4e0e\u5176\u903b\u8f91\u5185\u5bb9\u76f8\u540c\uff0c\u5219\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u53ef\u80fd\u662f\u5408\u9002\u7684\u3002")," \u4f8b\u5982\uff0c\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u5bf9\u4e8e\u4e0b\u9762\u7684\u7c7b\u6765\u8bf4\u662f\u5408\u7406\u7684\uff0c\u5b83\u7b80\u5355\u5730\u8868\u793a\u4e00\u4e2a\u4eba\u7684\u540d\u5b57\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Good candidate for default serialized form\npublic class Name implements Serializable {\n    /**\n    * Last name. Must be non-null.\n    * @serial\n    */\n    private final String lastName;\n\n    /**\n    * First name. Must be non-null.\n    * @serial\n    */\n    private final String firstName;\n\n    /**\n    * Middle name, or null if there is none.\n    * @serial\n    */\n    private final String middleName;\n    ... // Remainder omitted\n}\n")),(0,n.kt)("p",null,"Logically speaking, a name consists of three strings that represent a last name, a first name, and a middle name. The instance fields in Name precisely mirror this logical content."),(0,n.kt)("p",null,"\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u540d\u5b57\u7531\u4e09\u4e2a\u5b57\u7b26\u4e32\u7ec4\u6210\uff0c\u5206\u522b\u8868\u793a\u59d3\u3001\u540d\u548c\u4e2d\u95f4\u540d\u3002Name \u7684\u5b9e\u4f8b\u5b57\u6bb5\u7cbe\u786e\u5730\u53cd\u6620\u4e86\u8fd9\u4e2a\u903b\u8f91\u5185\u5bb9\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Even if you decide that the default serialized form is appropriate, you often must provide a readObject method to ensure invariants and security.")," In the case of Name, the readObject method must ensure that the fields lastName and firstName are non-null. This issue is discussed at length in Items 88 and 90."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5373\u4f7f\u4f60\u8ba4\u4e3a\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u662f\u5408\u9002\u7684\uff0c\u4f60\u901a\u5e38\u4e5f\u5fc5\u987b\u63d0\u4f9b readObject \u65b9\u6cd5\u6765\u786e\u4fdd\u4e0d\u53d8\u6027\u548c\u5b89\u5168\u6027\u3002")," \u5bf9\u4e8e Name \u7c7b\u800c\u8a00, readObject \u65b9\u6cd5\u5fc5\u987b\u786e\u4fdd\u5b57\u6bb5 lastName \u548c firstName \u662f\u975e\u7a7a\u7684\u3002",(0,n.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"},"Item-88")," \u548c ",(0,n.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-90-Consider-serialization-proxies-instead-of-serialized-instances"},"Item-90")," \u8be6\u7ec6\u8ba8\u8bba\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002"),(0,n.kt)("p",null,"Note that there are documentation comments on the lastName, firstName, and middleName fields, even though they are private. That is because these private fields define a public API, which is the serialized form of the class, and this public API must be documented. The presence of the @serial tag tells Javadoc to place this documentation on a special page that documents serialized forms."),(0,n.kt)("p",null,"\u6ce8\u610f\uff0c\u867d\u7136 lastName\u3001firstName \u548c middleName \u5b57\u6bb5\u662f\u79c1\u6709\u7684\uff0c\u4f46\u662f\u5b83\u4eec\u90fd\u6709\u6587\u6863\u6ce8\u91ca\u3002\u8fd9\u662f\u56e0\u4e3a\u8fd9\u4e9b\u79c1\u6709\u5b57\u6bb5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u516c\u5171 API\uff0c\u5b83\u662f\u7c7b\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u5e76\u4e14\u5fc5\u987b\u5bf9\u8fd9\u4e2a\u516c\u5171 API \u8fdb\u884c\u6587\u6863\u5316\u3002",(0,n.kt)("inlineCode",{parentName:"p"},"@serial")," \u6807\u8bb0\u7684\u5b58\u5728\u544a\u8bc9 Javadoc \u5c06\u6b64\u6587\u6863\u653e\u5728\u4e00\u4e2a\u7279\u6b8a\u7684\u9875\u9762\u4e0a\uff0c\u8be5\u9875\u9762\u8bb0\u5f55\u5e8f\u5217\u5316\u7684\u5f62\u5f0f\u3002"),(0,n.kt)("p",null,"Near the opposite end of the spectrum from Name, consider the following class, which represents a list of strings (ignoring for the moment that you would probably be better off using one of the standard List implementations):"),(0,n.kt)("p",null,"\u4e0e Name \u7c7b\u4e0d\u540c\uff0c\u8003\u8651\u4e0b\u9762\u7684\u7c7b\uff0c\u5b83\u662f\u53e6\u4e00\u4e2a\u6781\u7aef\u3002\u5b83\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff08\u4f7f\u7528\u6807\u51c6 List \u5b9e\u73b0\u53ef\u80fd\u66f4\u597d\uff0c\u4f46\u6b64\u65f6\u6682\u4e0d\u8fd9\u4e48\u505a\uff09\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// Awful candidate for default serialized form\npublic final class StringList implements Serializable {\n    private int size = 0;\n    private Entry head = null;\n    private static class Entry implements Serializable {\n        String data;\n        Entry next;\n        Entry previous;\n    }\n    ... // Remainder omitted\n}\n")),(0,n.kt)("p",null,"Logically speaking, this class represents a sequence of strings. Physically, it represents the sequence as a doubly linked list. If you accept the default serialized form, the serialized form will painstakingly mirror every entry in the linked list and all the links between the entries, in both directions."),(0,n.kt)("p",null,"\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u8fd9\u4e2a\u7c7b\u8868\u793a\u5b57\u7b26\u4e32\u5e8f\u5217\u3002\u5728\u7269\u7406\u4e0a\uff0c\u5b83\u5c06\u5e8f\u5217\u8868\u793a\u4e3a\u53cc\u5411\u94fe\u8868\u3002\u5982\u679c\u63a5\u53d7\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u8be5\u5e8f\u5217\u5316\u5f62\u5f0f\u5c06\u4e0d\u9057\u4f59\u529b\u5730\u955c\u50cf\u51fa\u94fe\u8868\u4e2d\u7684\u6240\u6709\u9879\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u9879\u4e4b\u95f4\u7684\u6240\u6709\u53cc\u5411\u94fe\u63a5\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Using the default serialized form when an object\u2019s physical representation differs substantially from its logical data content has four disadvantages:")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5f53\u5bf9\u8c61\u7684\u7269\u7406\u8868\u793a\u4e0e\u5176\u903b\u8f91\u6570\u636e\u5185\u5bb9\u6709\u5f88\u5927\u5dee\u5f02\u65f6\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u6709\u56db\u4e2a\u7f3a\u70b9\uff1a")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"It permanently ties the exported API to the current internal representation.")," In the above example, the private StringList.Entry class becomes part of the public API. If the representation is changed in a future release, the StringList class will still need to accept the linked list representation on input and generate it on output. The class will never be rid of all the code dealing with linked list entries, even if it doesn\u2019t use them anymore.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5b83\u5c06\u5bfc\u51fa\u7684 API \u6c38\u4e45\u5730\u7ed1\u5b9a\u5230\u5f53\u524d\u7684\u5185\u90e8\u5b9e\u73b0\u3002")," \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u79c1\u6709 ",(0,n.kt)("inlineCode",{parentName:"p"},"StringList.Entry")," \u7c7b\u6210\u4e3a\u516c\u5171 API \u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u5728\u5c06\u6765\u7684\u7248\u672c\u4e2d\u66f4\u6539\u4e86\u5b9e\u73b0\uff0cStringList \u7c7b\u4ecd\u7136\u9700\u8981\u63a5\u53d7\u94fe\u8868\u5f62\u5f0f\u7684\u8f93\u51fa\uff0c\u5e76\u4ea7\u751f\u94fe\u8868\u5f62\u5f0f\u7684\u8f93\u51fa\u3002\u8fd9\u4e2a\u7c7b\u6c38\u8fdc\u4e5f\u6446\u8131\u4e0d\u6389\u5904\u7406\u94fe\u8868\u9879\u6240\u9700\u8981\u7684\u6240\u6709\u4ee3\u7801\uff0c\u5373\u4f7f\u4e0d\u518d\u4f7f\u7528\u94fe\u8868\u4f5c\u4e3a\u5185\u90e8\u6570\u636e\u7ed3\u6784\u3002"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"It can consume excessive space.")," In the above example, the serialized form unnecessarily represents each entry in the linked list and all the links. These entries and links are mere implementation details, not worthy of inclusion in the serialized form. Because the serialized form is excessively large, writing it to disk or sending it across the network will be excessively slow.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5b83\u4f1a\u5360\u7528\u8fc7\u591a\u7684\u7a7a\u95f4\u3002")," \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5e8f\u5217\u5316\u7684\u5f62\u5f0f\u4e0d\u5fc5\u8981\u5730\u8868\u793a\u94fe\u8868\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u548c\u6240\u6709\u94fe\u63a5\u5173\u7cfb\u3002\u8fd9\u4e9b\u94fe\u8868\u9879\u4ee5\u53ca\u94fe\u63a5\u53ea\u4e0d\u8fc7\u662f\u5b9e\u73b0\u7ec6\u8282\uff0c\u4e0d\u503c\u5f97\u8bb0\u5f55\u5728\u5e8f\u5217\u5316\u5f62\u5f0f\u4e2d\u3002\u56e0\u4e3a\u8fd9\u6837\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u8fc7\u4e8e\u5e9e\u5927\uff0c\u5c06\u5176\u5199\u5165\u78c1\u76d8\u6216\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u5c06\u975e\u5e38\u6162\u3002"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"It can consume excessive time.")," The serialization logic has no knowledge of the topology of the object graph, so it must go through an expensive graph traversal. In the example above, it would be sufficient simply to follow the next references.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5b83\u4f1a\u6d88\u8017\u8fc7\u591a\u7684\u65f6\u95f4\u3002")," \u5e8f\u5217\u5316\u903b\u8f91\u4e0d\u77e5\u9053\u5bf9\u8c61\u56fe\u7684\u62d3\u6251\u7ed3\u6784\uff0c\u56e0\u6b64\u5fc5\u987b\u904d\u5386\u5f00\u9500\u5f88\u5927\u7684\u56fe\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ea\u8981\u9075\u5faa next \u7684\u5f15\u7528\u5c31\u8db3\u591f\u4e86\u3002"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"It can cause stack overflows.")," The default serialization procedure performs a recursive traversal of the object graph, which can cause stack overflows even for moderately sized object graphs. Serializing a StringList instance with 1,000\u20131,800 elements generates a StackOverflowError on my machine. Surprisingly, the minimum list size for which serialization causes a stack overflow varies from run to run (on my machine). The minimum list size that exhibits this problem may depend on the platform implementation and command-line flags; some implementations may not have this problem at all.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u5b83\u53ef\u80fd\u5bfc\u81f4\u5806\u6808\u6ea2\u51fa\u3002")," \u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u8fc7\u7a0b\u6267\u884c\u5bf9\u8c61\u56fe\u7684\u9012\u5f52\u904d\u5386\uff0c\u5373\u4f7f\u5bf9\u4e8e\u4e2d\u7b49\u89c4\u6a21\u7684\u5bf9\u8c61\u56fe\uff0c\u8fd9\u4e5f\u53ef\u80fd\u5bfc\u81f4\u5806\u6808\u6ea2\u51fa\u3002\u7528 1000-1800 \u4e2a\u5143\u7d20\u5e8f\u5217\u5316 StringList \u5b9e\u4f8b\u4f1a\u5728\u6211\u7684\u673a\u5668\u4e0a\u751f\u6210\u4e00\u4e2a StackOverflowError\u3002\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5e8f\u5217\u5316\u5bfc\u81f4\u5806\u6808\u6ea2\u51fa\u7684\u6700\u5c0f\u5217\u8868\u5927\u5c0f\u56e0\u8fd0\u884c\u800c\u5f02\uff08\u5728\u6211\u7684\u673a\u5668\u4e0a\uff09\u3002\u663e\u793a\u6b64\u95ee\u9898\u7684\u6700\u5c0f\u5217\u8868\u5927\u5c0f\u53ef\u80fd\u53d6\u51b3\u4e8e\u5e73\u53f0\u5b9e\u73b0\u548c\u547d\u4ee4\u884c\u6807\u5fd7\uff1b\u6709\u4e9b\u5b9e\u73b0\u53ef\u80fd\u6839\u672c\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\u3002"),(0,n.kt)("p",null,"A reasonable serialized form for StringList is simply the number of strings in the list, followed by the strings themselves. This constitutes the logical data represented by a StringList, stripped of the details of its physical representation. Here is a revised version of StringList with writeObject and readObject methods that implement this serialized form. As a reminder, the transient modifier indicates that an instance field is to be omitted from a class\u2019s default serialized form:"),(0,n.kt)("p",null,"StringList \u7684\u5408\u7406\u5e8f\u5217\u5316\u5f62\u5f0f\u5c31\u662f\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u91cf\uff0c\u7136\u540e\u662f\u5b57\u7b26\u4e32\u672c\u8eab\u3002\u8fd9\u6784\u6210\u4e86\u7531 StringList \u8868\u793a\u7684\u903b\u8f91\u6570\u636e\uff0c\u53bb\u6389\u4e86\u5176\u7269\u7406\u8868\u793a\u7684\u7ec6\u8282\u3002\u4e0b\u9762\u662f\u4fee\u6539\u540e\u7684 StringList \u7248\u672c\uff0c\u5e26\u6709\u5b9e\u73b0\u6b64\u5e8f\u5217\u5316\u5f62\u5f0f\u7684 writeObject \u548c readObject \u65b9\u6cd5\u3002\u63d0\u9192\u4e00\u4e0b\uff0ctransient \u4fee\u9970\u7b26\u8868\u793a\u8981\u4ece\u7c7b\u7684\u9ed8\u8ba4\u5e8f\u5217\u5316\u8868\u5355\u4e2d\u7701\u7565\u8be5\u5b9e\u4f8b\u5b57\u6bb5\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// StringList with a reasonable custom serialized form\npublic final class StringList implements Serializable {\n    private transient int size = 0;\n    private transient Entry head = null;\n    // No longer Serializable!\n\n    private static class Entry {\n        String data;\n        Entry next;\n        Entry previous;\n    }\n    // Appends the specified string to the list\n    public final void add(String s) { ... }\n\n    /**\n    * Serialize this {@code StringList} instance.\n    **\n    @serialData The size of the list (the number of strings\n    * it contains) is emitted ({@code int}), followed by all of\n    * its elements (each a {@code String}), in the proper\n    * sequence.\n    */\n    private void writeObject(ObjectOutputStream s) throws IOException {\n        s.defaultWriteObject();\n        s.writeInt(size);\n        // Write out all elements in the proper order.\n        for (Entry e = head; e != null; e = e.next)\n            s.writeObject(e.data);\n    }\n\n    private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {\n        s.defaultReadObject();\n        int numElements = s.readInt();\n        // Read in all elements and insert them in list\n        for (int i = 0; i < numElements; i++)\n            add((String) s.readObject());\n    }\n\n    ... // Remainder omitted\n}\n")),(0,n.kt)("p",null,"The first thing writeObject does is to invoke defaultWriteObject, and the first thing readObject does is to invoke defaultReadObject, even though all of StringList\u2019s fields are transient. You may hear it said that if all of a class\u2019s instance fields are transient, you can dispense with invoking defaultWriteObject and defaultReadObject, but the serialization specification requires you to invoke them regardless. The presence of these calls makes it possible to add nontransient instance fields in a later release while preserving backward and forward compatibility. If an instance is serialized in a later version and deserialized in an earlier version, the added fields will be ignored. Had the earlier version\u2019s readObject method failed to invoke defaultReadObject, the deserialization would fail with a StreamCorruptedException."),(0,n.kt)("p",null,"writeObject \u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8c03\u7528 defaultWriteObject, readObject \u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8c03\u7528 defaultReadObject\uff0c\u5373\u4f7f StringList \u7684\u6240\u6709\u5b57\u6bb5\u90fd\u662f transient \u7684\u3002\u4f60\u53ef\u80fd\u542c\u8bf4\u8fc7\uff0c\u5982\u679c\u4e00\u4e2a\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u5b57\u6bb5\u90fd\u662f transient \u7684\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4e0d\u8c03\u7528 defaultWriteObject \u548c defaultReadObject\uff0c\u4f46\u662f\u5e8f\u5217\u5316\u89c4\u8303\u8981\u6c42\u4f60\u65e0\u8bba\u5982\u4f55\u90fd\u8981\u8c03\u7528\u5b83\u4eec\u3002\u8fd9\u4e9b\u8c03\u7528\u7684\u5b58\u5728\u4f7f\u5f97\u5728\u4ee5\u540e\u7684\u7248\u672c\u4e2d\u6dfb\u52a0\u975e\u77ac\u6001\u5b9e\u4f8b\u5b57\u6bb5\u6210\u4e3a\u53ef\u80fd\uff0c\u540c\u65f6\u4fdd\u7559\u4e86\u5411\u540e\u548c\u5411\u524d\u517c\u5bb9\u6027\u3002\u5982\u679c\u5b9e\u4f8b\u5728\u8f83\u665a\u7684\u7248\u672c\u4e2d\u5e8f\u5217\u5316\uff0c\u5728\u8f83\u65e9\u7684\u7248\u672c\u4e2d\u53cd\u5e8f\u5217\u5316\uff0c\u5219\u4f1a\u5ffd\u7565\u6dfb\u52a0\u7684\u5b57\u6bb5\u3002\u5982\u679c\u65e9\u671f\u7248\u672c\u7684 readObject \u65b9\u6cd5\u8c03\u7528 defaultReadObject \u5931\u8d25\uff0c\u53cd\u5e8f\u5217\u5316\u5c06\u5931\u8d25\uff0c\u5e76\u51fa\u73b0 StreamCorruptedException\u3002"),(0,n.kt)("p",null,"Note that there is a documentation comment on the writeObject method, even though it is private. This is analogous to the documentation comment on the private fields in the Name class. This private method defines a public API, which is the serialized form, and that public API should be documented. Like the @serial tag for fields, the @serialData tag for methods tells the Javadoc utility to place this documentation on the serialized forms page."),(0,n.kt)("p",null,"\u6ce8\u610f\uff0cwriteObject \u65b9\u6cd5\u6709\u4e00\u4e2a\u6587\u6863\u6ce8\u91ca\uff0c\u5373\u4f7f\u5b83\u662f\u79c1\u6709\u7684\u3002\u8fd9\u7c7b\u4f3c\u4e8e Name \u7c7b\u4e2d\u79c1\u6709\u5b57\u6bb5\u7684\u6587\u6863\u6ce8\u91ca\u3002\u8fd9\u4e2a\u79c1\u6709\u65b9\u6cd5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u516c\u5171 API\uff0c\u5b83\u662f\u5e8f\u5217\u5316\u7684\u5f62\u5f0f\uff0c\u5e76\u4e14\u5e94\u8be5\u5bf9\u8be5\u516c\u5171 API \u8fdb\u884c\u6587\u6863\u5316\u3002\u4e0e\u5b57\u6bb5\u7684 ",(0,n.kt)("inlineCode",{parentName:"p"},"@serial")," \u6807\u8bb0\u4e00\u6837\uff0c\u65b9\u6cd5\u7684 ",(0,n.kt)("inlineCode",{parentName:"p"},"@serialData")," \u6807\u8bb0\u544a\u8bc9 Javadoc \u5b9e\u7528\u5de5\u5177\u5c06\u6b64\u6587\u6863\u653e\u5728\u5e8f\u5217\u5316\u5f62\u5f0f\u9875\u9762\u4e0a\u3002"),(0,n.kt)("p",null,"To lend some sense of scale to the earlier performance discussion, if the average string length is ten characters, the serialized form of the revised version of StringList occupies about half as much space as the serialized form of the original. On my machine, serializing the revised version of StringList is over twice as fast as serializing the original version, with a list length of ten. Finally, there is no stack overflow problem in the revised form and hence no practical upper limit to the size of StringList that can be serialized."),(0,n.kt)("p",null,"\u4e3a\u4e86\u7ed9\u524d\u9762\u7684\u6027\u80fd\u8ba8\u8bba\u63d0\u4f9b\u4e00\u5b9a\u7684\u4f38\u7f29\u6027\uff0c\u5982\u679c\u5e73\u5747\u5b57\u7b26\u4e32\u957f\u5ea6\u662f 10 \u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u7ecf\u8fc7\u4fee\u6539\u7684 StringList \u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u5360\u7528\u7684\u7a7a\u95f4\u5927\u7ea6\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5e8f\u5217\u5316\u5f62\u5f0f\u7684\u4e00\u534a\u3002\u5728\u6211\u7684\u673a\u5668\u4e0a\uff0c\u5e8f\u5217\u5316\u4fee\u8ba2\u540e\u7684 StringList \u7684\u901f\u5ea6\u662f\u5e8f\u5217\u5316\u539f\u59cb\u7248\u672c\u7684\u4e24\u500d\u591a\uff0c\u5217\u8868\u957f\u5ea6\u4e3a 10\u3002\u6700\u540e\uff0c\u5728\u4fee\u6539\u540e\u7684\u5f62\u5f0f\u4e2d\u6ca1\u6709\u5806\u6808\u6ea2\u51fa\u95ee\u9898\uff0c\u56e0\u6b64\u5bf9\u4e8e\u53ef\u5e8f\u5217\u5316\u7684 StringList \u7684\u5927\u5c0f\u6ca1\u6709\u5b9e\u9645\u7684\u4e0a\u9650\u3002"),(0,n.kt)("p",null,"While the default serialized form would be bad for StringList, there are classes for which it would be far worse. For StringList, the default serialized form is inflexible and performs badly, but it is correct in the sense that serializing and deserializing a StringList instance yields a faithful copy of the original object with all of its invariants intact. This is not the case for any object whose invariants are tied to implementation-specific details."),(0,n.kt)("p",null,"\u867d\u7136\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u5bf9 StringList \u4e0d\u597d\uff0c\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e9b\u7c7b\u6765\u8bf4\uff0c\u60c5\u51b5\u4f1a\u66f4\u7cdf\u3002\u5bf9\u4e8e StringList\uff0c\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u662f\u4e0d\u7075\u6d3b\u7684\uff0c\u5e76\u4e14\u6267\u884c\u5f97\u5f88\u7cdf\u7cd5\uff0c\u4f46\u662f\u5b83\u662f\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 StringList \u5b9e\u4f8b\u4f1a\u751f\u6210\u539f\u59cb\u5bf9\u8c61\u7684\u65e0\u5dee\u9519\u526f\u672c\uff0c\u800c\u6240\u6709\u4e0d\u53d8\u91cf\u90fd\u662f\u5b8c\u6574\u7684\u3002\u5bf9\u4e8e\u4efb\u4f55\u4e0d\u53d8\u91cf\u7ed1\u5b9a\u5230\u7279\u5b9a\u4e8e\u5b9e\u73b0\u7684\u7ec6\u8282\u7684\u5bf9\u8c61\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002"),(0,n.kt)("p",null,"For example, consider the case of a hash table. The physical representation is a sequence of hash buckets containing key-value entries. The bucket that an entry resides in is a function of the hash code of its key, which is not, in general, guaranteed to be the same from implementation to implementation. In fact, it isn\u2019t even guaranteed to be the same from run to run. Therefore, accepting the default serialized form for a hash table would constitute a serious bug. Serializing and deserializing the hash table could yield an object whose invariants were seriously corrupt."),(0,n.kt)("p",null,"\u4f8b\u5982\uff0c\u8003\u8651\u54c8\u5e0c\u8868\u7684\u60c5\u51b5\u3002\u7269\u7406\u8868\u793a\u662f\u5305\u542b\u300c\u952e-\u503c\u300d\u9879\u7684\u54c8\u5e0c\u6876\u5e8f\u5217\u3002\u4e00\u4e2a\u9879\u6240\u5728\u7684\u6876\u662f\u5176\u952e\u7684\u6563\u5217\u4ee3\u7801\u7684\u51fd\u6570\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u4ece\u4e00\u4e2a\u5b9e\u73b0\u5230\u53e6\u4e00\u4e2a\u5b9e\u73b0\u662f\u76f8\u540c\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u751a\u81f3\u4e0d\u80fd\u4fdd\u8bc1\u6bcf\u6b21\u8fd0\u884c\u90fd\u662f\u76f8\u540c\u7684\u3002\u56e0\u6b64\uff0c\u63a5\u53d7\u54c8\u5e0c\u8868\u7684\u9ed8\u8ba4\u5e8f\u5217\u5316\u5f62\u5f0f\u5c06\u6784\u6210\u4e25\u91cd\u7684 bug\u3002\u5bf9\u54c8\u5e0c\u8868\u8fdb\u884c\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u4e0d\u53d8\u91cf\u4e25\u91cd\u635f\u574f\u7684\u5bf9\u8c61\u3002"),(0,n.kt)("p",null,"Whether or not you accept the default serialized form, every instance field that isn\u2019t labeled transient will be serialized when the defaultWriteObject method is invoked. Therefore, every instance field that can be declared transient should be. This includes derived fields, whose values can be computed from primary data fields, such as a cached hash value. It also includes fields whose values are tied to one particular run of the JVM, such as a long field representing a pointer to a native data structure. ",(0,n.kt)("strong",{parentName:"p"},"Before deciding to make a field nontransient, convince yourself that its value is part of the logical state of the object.")," If you use a custom serialized form, most or all of the instance fields should be labeled transient, as in the StringList example above."),(0,n.kt)("p",null,"\u65e0\u8bba\u4f60\u662f\u5426\u63a5\u53d7\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u5f53\u8c03\u7528 defaultWriteObject \u65b9\u6cd5\u65f6\uff0c\u6ca1\u6709\u6807\u8bb0\u4e3a transient \u7684\u6bcf\u4e2a\u5b9e\u4f8b\u5b57\u6bb5\u90fd\u4f1a\u88ab\u5e8f\u5217\u5316\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u58f0\u660e\u4e3a transient \u7684\u6bcf\u4e2a\u5b9e\u4f8b\u5b57\u6bb5\u90fd\u5e94\u8be5\u505a\u8fd9\u4e2a\u58f0\u660e\u3002\u8fd9\u5305\u62ec\u6d3e\u751f\u5b57\u6bb5\uff0c\u5176\u503c\u53ef\u4ee5\u4ece\u4e3b\u6570\u636e\u5b57\u6bb5\uff08\u5982\u7f13\u5b58\u7684\u54c8\u5e0c\u503c\uff09\u8ba1\u7b97\u3002\u5b83\u8fd8\u5305\u62ec\u4e00\u4e9b\u5b57\u6bb5\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u7684\u503c\u4e0e JVM \u7684\u4e00\u4e2a\u7279\u5b9a\u8fd0\u884c\u76f8\u5173\u8054\uff0c\u6bd4\u5982\u8868\u793a\u6307\u5411\u672c\u673a\u6570\u636e\u7ed3\u6784\u6307\u9488\u7684 long \u5b57\u6bb5\u3002",(0,n.kt)("strong",{parentName:"p"},"\u5728\u51b3\u5b9a\u4f7f\u5b57\u6bb5\u975e transient \u4e4b\u524d\uff0c\u8bf7\u786e\u4fe1\u5b83\u7684\u503c\u662f\u5bf9\u8c61\u903b\u8f91\u72b6\u6001\u7684\u4e00\u90e8\u5206\u3002")," \u5982\u679c\u4f7f\u7528\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u8868\u5355\uff0c\u5927\u591a\u6570\u6216\u6240\u6709\u5b9e\u4f8b\u5b57\u6bb5\u90fd\u5e94\u8be5\u6807\u8bb0\u4e3a transient\uff0c\u5982\u4e0a\u9762\u7684 StringList \u793a\u4f8b\u6240\u793a\u3002"),(0,n.kt)("p",null,"If you are using the default serialized form and you have labeled one or more fields transient, remember that these fields will be initialized to their default values when an instance is deserialized: null for object reference fields, zero for numeric primitive fields, and false for boolean fields ","[JLS, 4.12.5]",". If these values are unacceptable for any transient fields, you must provide a readObject method that invokes the defaultReadObject method and then restores transient fields to acceptable values (Item 88). Alternatively, these fields can be lazily initialized the first time they are used (Item 83)."),(0,n.kt)("p",null,"\u5982\u679c\u4f7f\u7528\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u5e76\u4e14\u6807\u8bb0\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u6bb5\u4e3a transient\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u53cd\u5e8f\u5217\u5316\u5b9e\u4f8b\u65f6\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u5c06\u521d\u59cb\u5316\u4e3a\u9ed8\u8ba4\u503c\uff1a\u5bf9\u8c61\u5f15\u7528\u5b57\u6bb5\u4e3a null\uff0c\u6570\u5b57\u57fa\u672c\u7c7b\u578b\u5b57\u6bb5\u4e3a 0\uff0c\u5e03\u5c14\u5b57\u6bb5\u4e3a false ","[JLS, 4.12.5]","\u3002\u5982\u679c\u8fd9\u4e9b\u503c\u5bf9\u4e8e\u4efb\u4f55 transient \u5b57\u6bb5\u90fd\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u5219\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a readObject \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8c03\u7528 defaultReadObject \u65b9\u6cd5\uff0c\u7136\u540e\u5c06 transient \u5b57\u6bb5\u6062\u590d\u4e3a\u53ef\u63a5\u53d7\u7684\u503c\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"},"Item-88"),"\uff09\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u91c7\u7528\u5ef6\u8fdf\u521d\u59cb\u5316\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-11/Chapter-11-Item-83-Use-lazy-initialization-judiciously"},"Item-83"),"\uff09\uff0c\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u8fd9\u4e9b\u5b57\u6bb5\u65f6\u521d\u59cb\u5316\u5b83\u4eec\u3002"),(0,n.kt)("p",null,"Whether or not you use the default serialized form, ",(0,n.kt)("strong",{parentName:"p"},"you must impose any synchronization on object serialization that you would impose on any other method that reads the entire state of the object.")," So, for example, if you have a thread-safe object (Item 82) that achieves its thread safety by synchronizing every method and you elect to use the default serialized form, use the following write-Object method:"),(0,n.kt)("p",null,"\u65e0\u8bba\u4f60\u662f\u5426\u4f7f\u7528\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c",(0,n.kt)("strong",{parentName:"p"},"\u5fc5\u987b\u5bf9\u5bf9\u8c61\u5e8f\u5217\u5316\u5f3a\u5236\u6267\u884c\u4efb\u4f55\u540c\u6b65\u64cd\u4f5c\uff0c\u5c31\u50cf\u5bf9\u8bfb\u53d6\u5bf9\u8c61\u7684\u6574\u4e2a\u72b6\u6001\u7684\u4efb\u4f55\u5176\u4ed6\u65b9\u6cd5\u5f3a\u5236\u6267\u884c\u7684\u90a3\u6837\u3002")," \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u5bf9\u8c61\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-11/Chapter-11-Item-82-Document-thread-safety"},"Item-82"),"\uff09\uff0c\u5b83\u901a\u8fc7\u540c\u6b65\u6bcf\u4e2a\u65b9\u6cd5\u6765\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\uff0c\u5e76\u4e14\u4f60\u9009\u62e9\u4f7f\u7528\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u90a3\u4e48\u4f7f\u7528\u4ee5\u4e0b write-Object \u65b9\u6cd5\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"// writeObject for synchronized class with default serialized form\nprivate synchronized void writeObject(ObjectOutputStream s) throws IOException {\n    s.defaultWriteObject();\n}\n")),(0,n.kt)("p",null,"If you put synchronization in the writeObject method, you must ensure that it adheres to the same lock-ordering constraints as other activities, or you risk a resource-ordering deadlock ","[Goetz06, 10.1.5]","."),(0,n.kt)("p",null,"\u5982\u679c\u5c06\u540c\u6b65\u653e\u5728 writeObject \u65b9\u6cd5\u4e2d\uff0c\u5219\u5fc5\u987b\u786e\u4fdd\u5b83\u9075\u5b88\u4e0e\u5176\u4ed6\u6d3b\u52a8\u76f8\u540c\u7684\u9501\u6392\u5e8f\u7ea6\u675f\uff0c\u5426\u5219\u5c06\u9762\u4e34\u8d44\u6e90\u6392\u5e8f\u6b7b\u9501\u7684\u98ce\u9669 ","[Goetz06, 10.1.5]","\u3002"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Regardless of what serialized form you choose, declare an explicit serial version UID in every serializable class you write.")," This eliminates the serial version UID as a potential source of incompatibility (Item 86). There is also a small performance benefit. If no serial version UID is provided, an expensive computation is performed to generate one at runtime."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"\u65e0\u8bba\u9009\u62e9\u54ea\u79cd\u5e8f\u5217\u5316\u5f62\u5f0f\uff0c\u90fd\u8981\u5728\u7f16\u5199\u7684\u6bcf\u4e2a\u53ef\u5e8f\u5217\u5316\u7c7b\u4e2d\u58f0\u660e\u663e\u5f0f\u7684\u5e8f\u5217\u7248\u672c UID\u3002")," \u8fd9\u6d88\u9664\u4e86\u5e8f\u5217\u7248\u672c UID \u6210\u4e3a\u4e0d\u517c\u5bb9\u6027\u7684\u6f5c\u5728\u6765\u6e90\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-86-Implement-Serializable-with-great-caution"},"Item-86"),"\uff09\u3002\u8fd9\u4e48\u505a\u8fd8\u80fd\u83b7\u5f97\u4e00\u4e2a\u5c0f\u7684\u6027\u80fd\u4f18\u52bf\u3002\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u5e8f\u5217\u7248\u672c UID\uff0c\u5219\u9700\u8981\u6267\u884c\u9ad8\u5f00\u9500\u7684\u8ba1\u7b97\u5728\u8fd0\u884c\u65f6\u751f\u6210\u4e00\u4e2a UID\u3002"),(0,n.kt)("p",null,"Declaring a serial version UID is simple. Just add this line to your class:"),(0,n.kt)("p",null,"\u58f0\u660e\u5e8f\u5217\u7248\u672c UID \u5f88\u7b80\u5355\uff0c\u53ea\u8981\u5728\u4f60\u7684\u7c7b\u4e2d\u589e\u52a0\u8fd9\u4e00\u884c\uff1a"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"private static final long serialVersionUID = randomLongValue;\n")),(0,n.kt)("p",null,"If you write a new class, it doesn\u2019t matter what value you choose for randomLongValue. You can generate the value by running the serialver utility on the class, but it\u2019s also fine to pick a number out of thin air. It is not required that serial version UIDs be unique. If you modify an existing class that lacks a serial version UID, and you want the new version to accept existing serialized instances, you must use the value that was automatically generated for the old version. You can get this number by running the serialver utility on the old version of the class\u2014the one for which serialized instances exist."),(0,n.kt)("p",null,"\u5982\u679c\u4f60\u7f16\u5199\u4e00\u4e2a\u65b0\u7c7b\uff0c\u4e3a randomLongValue \u9009\u62e9\u4ec0\u4e48\u503c\u5e76\u4e0d\u91cd\u8981\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7c7b\u4e0a\u8fd0\u884c serialver \u5b9e\u7528\u5de5\u5177\u6765\u751f\u6210\u8be5\u503c\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u51ed\u7a7a\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\u3002\u4e32\u884c\u7248\u672c UID \u4e0d\u9700\u8981\u662f\u552f\u4e00\u7684\u3002\u5982\u679c\u4fee\u6539\u7f3a\u5c11\u4e32\u884c\u7248\u672c UID \u7684\u73b0\u6709\u7c7b\uff0c\u5e76\u4e14\u5e0c\u671b\u65b0\u7248\u672c\u63a5\u53d7\u73b0\u6709\u7684\u5e8f\u5217\u5316\u5b9e\u4f8b\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u4e3a\u65e7\u7248\u672c\u81ea\u52a8\u751f\u6210\u7684\u503c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u7c7b\u7684\u65e7\u7248\u672c\u4e0a\u8fd0\u884c serialver \u5b9e\u7528\u5de5\u5177\uff08\u5e8f\u5217\u5316\u5b9e\u4f8b\u5b58\u5728\u4e8e\u65e7\u7248\u672c\u4e0a\uff09\u6765\u83b7\u5f97\u8fd9\u4e2a\u6570\u5b57\u3002"),(0,n.kt)("p",null,"If you ever want to make a new version of a class that is incompatible with existing versions, merely change the value in the serial version UID declaration. This will cause attempts to deserialize serialized instances of previous versions to throw an InvalidClassException. ",(0,n.kt)("strong",{parentName:"p"},"Do not change the serial version UID unless you want to break compatibility with all existing serialized instances of a class.")),(0,n.kt)("p",null,"\u5982\u679c\u4f60\u5e0c\u671b\u521b\u5efa\u4e00\u4e2a\u65b0\u7248\u672c\u7684\u7c7b\uff0c\u5b83\u4e0e\u73b0\u6709\u7248\u672c\u4e0d\u517c\u5bb9\uff0c\u5982\u679c\u66f4\u6539\u5e8f\u5217\u7248\u672c UID \u58f0\u660e\u4e2d\u7684\u503c\uff0c\u8fd9\u5c06\u5bfc\u81f4\u53cd\u5e8f\u5217\u5316\u65e7\u7248\u672c\u7684\u5e8f\u5217\u5316\u5b9e\u4f8b\u7684\u64cd\u4f5c\u5f15\u53d1 InvalidClassException\u3002",(0,n.kt)("strong",{parentName:"p"},"\u4e0d\u8981\u66f4\u6539\u5e8f\u5217\u7248\u672c UID\uff0c\u9664\u975e\u4f60\u60f3\u7834\u574f\u4e0e\u73b0\u6709\u5e8f\u5217\u5316\u6240\u6709\u5b9e\u4f8b\u7684\u517c\u5bb9\u6027\u3002")),(0,n.kt)("p",null,"To summarize, if you have decided that a class should be serializable (Item 86), think hard about what the serialized form should be. Use the default serialized form only if it is a reasonable description of the logical state of the object; otherwise design a custom serialized form that aptly describes the object. You should allocate as much time to designing the serialized form of a class as you allocate to designing an exported method (Item 51). Just as you can\u2019t eliminate exported methods from future versions, you can\u2019t eliminate fields from the serialized form; they must be preserved forever to ensure serialization compatibility. Choosing the wrong serialized form can have a permanent, negative impact on the complexity and performance of a class."),(0,n.kt)("p",null,"\u603b\u800c\u8a00\u4e4b\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u51b3\u5b9a\u4e00\u4e2a\u7c7b\u5e94\u8be5\u662f\u53ef\u5e8f\u5217\u5316\u7684\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-12/Chapter-12-Item-86-Implement-Serializable-with-great-caution"},"Item-86"),"\uff09\uff0c\u90a3\u4e48\u8bf7\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b\u5e8f\u5217\u5316\u7684\u5f62\u5f0f\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\u53ea\u6709\u5728\u5408\u7406\u63cf\u8ff0\u5bf9\u8c61\u7684\u903b\u8f91\u72b6\u6001\u65f6\uff0c\u624d\u4f7f\u7528\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\uff1b\u5426\u5219\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u9002\u5408\u63cf\u8ff0\u5bf9\u8c61\u7684\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5f62\u5f0f\u3002\u8bbe\u8ba1\u7c7b\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u5e94\u8be5\u548c\u8bbe\u8ba1\u5bfc\u51fa\u65b9\u6cd5\u82b1\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u591a\uff0c\u90fd\u5e94\u8be5\u4e25\u8c28\u5bf9\u5f85\uff08",(0,n.kt)("a",{parentName:"p",href:"./Chapter-8-Item-51-Design-method-signatures-carefully"},"Item-51"),"\uff09\u3002\u6b63\u5982\u4e0d\u80fd\u4ece\u672a\u6765\u7248\u672c\u4e2d\u5220\u9664\u5bfc\u51fa\u7684\u65b9\u6cd5\u4e00\u6837\uff0c\u4e5f\u4e0d\u80fd\u4ece\u5e8f\u5217\u5316\u5f62\u5f0f\u4e2d\u5220\u9664\u5b57\u6bb5\uff1b\u5fc5\u987b\u6c38\u8fdc\u4fdd\u5b58\u5b83\u4eec\uff0c\u4ee5\u786e\u4fdd\u5e8f\u5217\u5316\u517c\u5bb9\u6027\u3002\u9009\u62e9\u9519\u8bef\u7684\u5e8f\u5217\u5316\u5f62\u5f0f\u53ef\u80fd\u4f1a\u5bf9\u7c7b\u7684\u590d\u6742\u6027\u548c\u6027\u80fd\u4ea7\u751f\u6c38\u4e45\u6027\u7684\u8d1f\u9762\u5f71\u54cd\u3002"),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"./Chapter-12/Chapter-12-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-12/Chapter-12-Item-86-Implement-Serializable-with-great-caution"},"Item 86: Implement Serializable with great caution\uff08\u975e\u5e38\u8c28\u614e\u5730\u5b9e\u73b0 Serializable\uff09"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,n.kt)("a",{parentName:"strong",href:"./Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively"},"Item 88: Write readObject methods defensively\uff08\u9632\u5fa1\u6027\u5730\u7f16\u5199 readObject \u65b9\u6cd5\uff09")))))}h.isMDXComponent=!0}}]);