"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2433],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var r=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(a),u=o,f=m["".concat(c,".").concat(u)]||m[u]||h[u]||i;return a?r.createElement(f,n(n({ref:t},p),{},{components:a})):r.createElement(f,n({ref:t},p))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,n=new Array(i);n[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,n[1]=s;for(var l=2;l<i;l++)n[l]=a[l];return r.createElement.apply(null,n)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},153:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=a(7462),o=(a(7294),a(3905));const i={},n=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity",id:"Books/EffectiveJava3/Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity",title:"Chapter-10-Item-76-Strive-for-failure-atomicity",description:"Chapter 10. Exceptions\uff08\u5f02\u5e38\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity.md",sourceDirName:"Books/EffectiveJava3/Chapter-10",slug:"/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity",permalink:"/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-10-Item-75-Include-failure-capture-information-in-detail-messages",permalink:"/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-75-Include-failure-capture-information-in-detail-messages"},next:{title:"Chapter-10-Item-77-Don\u2019t-ignore-exceptions",permalink:"/docs/Books/EffectiveJava3/Chapter-10/Chapter-10-Item-77-Don\u2019t-ignore-exceptions"}},c={},l=[{value:"Chapter 10. Exceptions\uff08\u5f02\u5e38\uff09",id:"chapter-10-exceptions\u5f02\u5e38",level:2},{value:"Item 76: Strive for failure atomicity\uff08\u5c3d\u529b\u4fdd\u8bc1\u6545\u969c\u539f\u5b50\u6027\uff09",id:"item-76-strive-for-failure-atomicity\u5c3d\u529b\u4fdd\u8bc1\u6545\u969c\u539f\u5b50\u6027",level:3}],p={toc:l};function h(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"chapter-10-exceptions\u5f02\u5e38"},"Chapter 10. Exceptions\uff08\u5f02\u5e38\uff09"),(0,o.kt)("h3",{id:"item-76-strive-for-failure-atomicity\u5c3d\u529b\u4fdd\u8bc1\u6545\u969c\u539f\u5b50\u6027"},"Item 76: Strive for failure atomicity\uff08\u5c3d\u529b\u4fdd\u8bc1\u6545\u969c\u539f\u5b50\u6027\uff09"),(0,o.kt)("p",null,"After an object throws an exception, it is generally desirable that the object still be in a well-defined, usable state, even if the failure occurred in the midst of performing an operation. This is especially true for checked exceptions, from which the caller is expected to recover. ",(0,o.kt)("strong",{parentName:"p"},"Generally speaking, a failed method invocation should leave the object in the state that it was in prior to the invocation.")," A method with this property is said to be failure-atomic."),(0,o.kt)("p",null,"\u5728\u5bf9\u8c61\u629b\u51fa\u5f02\u5e38\u4e4b\u540e\uff0c\u901a\u5e38\u5e0c\u671b\u5bf9\u8c61\u4ecd\u7136\u5904\u4e8e\u5b9a\u4e49\u826f\u597d\u7684\u53ef\u7528\u72b6\u6001\uff0c\u5373\u4f7f\u5728\u6267\u884c\u64cd\u4f5c\u65f6\u53d1\u751f\u4e86\u6545\u969c\u3002\u5bf9\u4e8e checked \u5f02\u5e38\u5c24\u5176\u5982\u6b64\uff0c\u8c03\u7528\u8005\u5e0c\u671b\u4ece\u5f02\u5e38\u4e2d\u6062\u590d\u3002",(0,o.kt)("strong",{parentName:"p"},"\u4e00\u822c\u6765\u8bf4\uff0c\u5931\u8d25\u7684\u65b9\u6cd5\u8c03\u7528\u5e94\u8be5\u4f7f\u5bf9\u8c61\u5904\u4e8e\u8c03\u7528\u4e4b\u524d\u7684\u72b6\u6001\u3002")," \u5177\u6709\u6b64\u5c5e\u6027\u7684\u65b9\u6cd5\u79f0\u4e3a\u5177\u5907\u6545\u969c\u539f\u5b50\u6027\u3002"),(0,o.kt)("p",null,"There are several ways to achieve this effect. The simplest is to design immutable objects (Item 17). If an object is immutable, failure atomicity is free. If an operation fails, it may prevent a new object from getting created, but it will never leave an existing object in an inconsistent state, because the state of each object is consistent when it is created and can\u2019t be modified thereafter."),(0,o.kt)("p",null,"\u6709\u51e0\u79cd\u65b9\u5f0f\u53ef\u4ee5\u8fbe\u5230\u8fd9\u79cd\u6548\u679c\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u8bbe\u8ba1\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff08",(0,o.kt)("a",{parentName:"p",href:"./Chapter-4-Item-17-Minimize-mutability"},"Item-17"),"\uff09\u3002\u5982\u679c\u5bf9\u8c61\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5219\u6545\u969c\u539f\u5b50\u6027\u662f\u5fc5\u7136\u7684\u3002\u5982\u679c\u4e00\u4e2a\u64cd\u4f5c\u5931\u8d25\uff0c\u5b83\u53ef\u80fd\u4f1a\u963b\u6b62\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\uff0c\u4f46\u662f\u5b83\u4e0d\u4f1a\u8ba9\u4e00\u4e2a\u73b0\u6709\u5bf9\u8c61\u5904\u4e8e\u4e0d\u4e00\u81f4\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684\u72b6\u6001\u5728\u521b\u5efa\u65f6\u662f\u4e00\u81f4\u7684\uff0c\u5e76\u4e14\u5728\u521b\u5efa\u540e\u4e0d\u80fd\u4fee\u6539\u3002"),(0,o.kt)("p",null,"For methods that operate on mutable objects, the most common way to achieve failure atomicity is to check parameters for validity before performing the operation (Item 49). This causes most exceptions to get thrown before object modification commences. For example, consider the Stack.pop method in Item 7:"),(0,o.kt)("p",null,"\u5bf9\u4e8e\u64cd\u4f5c\u53ef\u53d8\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5b9e\u73b0\u6545\u969c\u539f\u5b50\u6027\u7684\u6700\u5e38\u89c1\u65b9\u6cd5\u662f\u5728\u6267\u884c\u64cd\u4f5c\u4e4b\u524d\u68c0\u67e5\u53c2\u6570\u7684\u6709\u6548\u6027\uff08",(0,o.kt)("a",{parentName:"p",href:"./Chapter-8-Item-49-Check-parameters-for-validity"},"Item-49"),"\uff09\u3002\u8fd9\u4f7f\u5f97\u5927\u591a\u6570\u5f02\u5e38\u5728\u5bf9\u8c61\u4fee\u6539\u5f00\u59cb\u4e4b\u524d\u88ab\u629b\u51fa\u3002\u4f8b\u5982\uff0c\u8003\u8651 ",(0,o.kt)("inlineCode",{parentName:"p"},"Stack.pop")," \u65b9\u6cd5\uff08",(0,o.kt)("a",{parentName:"p",href:"./Chapter-2-Item-7-Eliminate-obsolete-object-references"},"Item-7"),"\uff09\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public Object pop() {\n    if (size == 0)\n        throw new EmptyStackException();\n    Object result = elements[--size];\n    elements[size] = null; // Eliminate obsolete reference\n    return result;\n}\n")),(0,o.kt)("p",null,"If the initial size check were eliminated, the method would still throw an exception when it attempted to pop an element from an empty stack. It would, however, leave the size field in an inconsistent (negative) state, causing any future method invocations on the object to fail. Additionally, the ArrayIndexOutOfBoundsException thrown by the pop method would be inappropriate to the abstraction (Item 73)."),(0,o.kt)("p",null,"\u5982\u679c\u53d6\u6d88\u4e86\u521d\u59cb\u5927\u5c0f\u68c0\u67e5\uff0c\u5f53\u8be5\u65b9\u6cd5\u8bd5\u56fe\u4ece\u7a7a\u5806\u6808\u4e2d\u5f39\u51fa\u5143\u7d20\u65f6\uff0c\u4ecd\u7136\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u4f46\u662f\uff0c\u8fd9\u4f1a\u4f7f size \u5b57\u6bb5\u5904\u4e8e\u4e0d\u4e00\u81f4\u7684\uff08\u8d1f\u503c\uff09\u72b6\u6001\uff0c\u5bfc\u81f4\u4ee5\u540e\u8be5\u5bf9\u8c61\u7684\u4efb\u4f55\u65b9\u6cd5\u8c03\u7528\u90fd\u4f1a\u5931\u8d25\u3002\u6b64\u5916\uff0cpop \u65b9\u6cd5\u629b\u51fa\u7684 ArrayIndexOutOfBoundsException \u4e5f\u4e0d\u9002\u4e8e\u9ad8\u5c42\u62bd\u8c61\u89e3\u91ca\uff08",(0,o.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-73-Throw-exceptions-appropriate-to-the-abstraction"},"Item-73"),"\uff09\u3002"),(0,o.kt)("p",null,"A closely related approach to achieving failure atomicity is to order the computation so that any part that may fail takes place before any part that modifies the object. This approach is a natural extension of the previous one when arguments cannot be checked without performing a part of the computation. For example, consider the case of TreeMap, whose elements are sorted according to some ordering. In order to add an element to a TreeMap, the element must be of a type that can be compared using the TreeMap\u2019s ordering. Attempting to add an incorrectly typed element will naturally fail with a ClassCastException as a result of searching for the element in the tree, before the tree has been modified in any way."),(0,o.kt)("p",null,"\u5b9e\u73b0\u6545\u969c\u539f\u5b50\u6027\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u662f\u5bf9\u8ba1\u7b97\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u4fbf\u53ef\u80fd\u53d1\u751f\u6545\u969c\u7684\u90e8\u5206\u90fd\u5148\u4e8e\u4fee\u6539\u5bf9\u8c61\u7684\u90e8\u5206\u53d1\u751f\u3002\u5f53\u6267\u884c\u67d0\u90e8\u5206\u8ba1\u7b97\u624d\u80fd\u68c0\u67e5\u53c2\u6570\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u524d\u4e00\u79cd\u65b9\u6cd5\u7684\u81ea\u7136\u6269\u5c55\u3002\u4f8b\u5982\uff0c\u8003\u8651 TreeMap \u7684\u60c5\u51b5\uff0c\u5b83\u7684\u5143\u7d20\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u4e3a\u4e86\u5411 TreeMap \u4e2d\u6dfb\u52a0\u5143\u7d20\uff0c\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u80fd\u591f\u4f7f\u7528 TreeMap \u7684\u987a\u5e8f\u8fdb\u884c\u6bd4\u8f83\u3002\u5728\u4ee5\u4efb\u4f55\u65b9\u5f0f\u4fee\u6539\u300c\u6811\u300d\u4e4b\u524d\uff0c\u7531\u4e8e\u5728\u300c\u6811\u300d\u4e2d\u641c\u7d22\u5143\u7d20\uff0c\u8bd5\u56fe\u6dfb\u52a0\u7c7b\u578b\u4e0d\u6b63\u786e\u7684\u5143\u7d20\u81ea\u7136\u4f1a\u5931\u8d25\uff0c\u5e76\u5bfc\u81f4 ClassCastException \u5f02\u5e38\u3002"),(0,o.kt)("p",null,"A third approach to achieving failure atomicity is to perform the operation on a temporary copy of the object and to replace the contents of the object with the temporary copy once the operation is complete. This approach occurs naturally when the computation can be performed more quickly once the data has been stored in a temporary data structure. For example, some sorting functions copy their input list into an array prior to sorting to reduce the cost of accessing elements in the inner loop of the sort. This is done for performance, but as an added benefit, it ensures that the input list will be untouched if the sort fails."),(0,o.kt)("p",null,"\u5b9e\u73b0\u6545\u969c\u539f\u5b50\u6027\u7684\u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u4ee5\u5bf9\u8c61\u7684\u4e34\u65f6\u526f\u672c\u6267\u884c\u64cd\u4f5c\uff0c\u5e76\u5728\u64cd\u4f5c\u5b8c\u6210\u540e\u7528\u4e34\u65f6\u526f\u672c\u66ff\u6362\u5bf9\u8c61\u7684\u5185\u5bb9\u3002\u5f53\u6570\u636e\u5b58\u50a8\u5728\u4e34\u65f6\u6570\u636e\u7ed3\u6784\u4e2d\u540e\uff0c\u8ba1\u7b97\u8fc7\u7a0b\u4f1a\u66f4\u52a0\u8fc5\u901f\uff0c\u8fd9\u79cd\u529e\u6cd5\u5c31\u662f\u5f88\u81ea\u7136\u7684\u3002\u4f8b\u5982\uff0c\u4e00\u4e9b\u6392\u5e8f\u51fd\u6570\u5728\u6392\u5e8f\u4e4b\u524d\u5c06\u5176\u8f93\u5165 list \u590d\u5236\u5230\u6570\u7ec4\u4e2d\uff0c\u4ee5\u964d\u4f4e\u8bbf\u95ee\u6392\u5e8f\u5185\u5faa\u73af\u4e2d\u7684\u5143\u7d20\u7684\u6210\u672c\u3002\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u4f46\u662f\u4f5c\u4e3a\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\uff0c\u5b83\u786e\u4fdd\u5982\u679c\u6392\u5e8f\u5931\u8d25\uff0c\u8f93\u5165 list \u5c06\u4fdd\u6301\u4e0d\u53d8\u3002"),(0,o.kt)("p",null,"A last and far less common approach to achieving failure atomicity is to write recovery code that intercepts a failure that occurs in the midst of an operation, and causes the object to roll back its state to the point before the operation began. This approach is used mainly for durable (disk-based) data structures."),(0,o.kt)("p",null,"\u5b9e\u73b0\u6545\u969c\u539f\u5b50\u6027\u7684\u6700\u540e\u4e00\u79cd\u4e0d\u592a\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u7f16\u5199\u6062\u590d\u4ee3\u7801\uff0c\u62e6\u622a\u5728\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u6545\u969c\uff0c\u5e76\u4f7f\u5bf9\u8c61\u56de\u6eda\u5230\u64cd\u4f5c\u5f00\u59cb\u4e4b\u524d\u7684\u72b6\u6001\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u6301\u4e45\u7684\uff08\u57fa\u4e8e\u78c1\u76d8\u7684\uff09\u6570\u636e\u7ed3\u6784\u3002"),(0,o.kt)("p",null,"While failure atomicity is generally desirable, it is not always achievable. For example, if two threads attempt to modify the same object concurrently without proper synchronization, the object may be left in an inconsistent state. It would therefore be wrong to assume that an object was still usable after catching a ConcurrentModificationException. Errors are unrecoverable, so you need not even attempt to preserve failure atomicity when throwing AssertionError."),(0,o.kt)("p",null,"\u867d\u7136\u6545\u969c\u539f\u5b50\u6027\u901a\u5e38\u662f\u53ef\u53d6\u7684\uff0c\u4f46\u5b83\u5e76\u4e0d\u603b\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e24\u4e2a\u7ebf\u7a0b\u8bd5\u56fe\u5728\u6ca1\u6709\u9002\u5f53\u540c\u6b65\u7684\u60c5\u51b5\u4e0b\u5e76\u53d1\u5730\u4fee\u6539\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u4e48\u8be5\u5bf9\u8c61\u53ef\u80fd\u4f1a\u5904\u4e8e\u4e0d\u4e00\u81f4\u7684\u72b6\u6001\u3002\u56e0\u6b64\uff0c\u5982\u679c\u5047\u5b9a\u5728\u6355\u6349\u5230 ConcurrentModificationException \u4e4b\u540e\u5bf9\u8c61\u4ecd\u7136\u53ef\u7528\uff0c\u90a3\u5c31\u9519\u4e86\u3002\u8be5\u9519\u8bef\u662f\u4e0d\u53ef\u6062\u590d\u7684\uff0c\u6240\u4ee5\u5728\u629b\u51fa AssertionError \u65f6\uff0c\u4f60\u751a\u81f3\u4e0d\u9700\u8981\u5c1d\u8bd5\u4fdd\u5b58\u6545\u969c\u539f\u5b50\u6027\u3002"),(0,o.kt)("p",null,"Even where failure atomicity is possible, it is not always desirable. For some operations, it would significantly increase the cost or complexity. That said, it is often both free and easy to achieve failure atomicity once you\u2019re aware of the issue."),(0,o.kt)("p",null,"\u5373\u4f7f\u5728\u53ef\u4ee5\u5b9e\u73b0\u6545\u969c\u539f\u5b50\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u5e76\u4e0d\u603b\u662f\u53ef\u53d6\u7684\u3002\u5bf9\u4e8e\u67d0\u4e9b\u64cd\u4f5c\uff0c\u5b83\u5c06\u663e\u8457\u589e\u52a0\u6210\u672c\u6216\u590d\u6742\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u610f\u8bc6\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5b9e\u73b0\u6545\u969c\u539f\u5b50\u6027\u3002"),(0,o.kt)("p",null,"In summary, as a rule, any generated exception that is part of a method\u2019s specification should leave the object in the same state it was in prior to the method invocation. Where this rule is violated, the API documentation should clearly indicate what state the object will be left in. Unfortunately, plenty of existing API documentation fails to live up to this ideal."),(0,o.kt)("p",null,"\u603b\u4e4b\uff0c\u4f5c\u4e3a\u89c4\u5219\uff0c\u4e5f\u4f5c\u4e3a\u65b9\u6cd5\u89c4\u8303\u7684\u4e00\u90e8\u5206\uff0c\u751f\u6210\u7684\u4efb\u4f55\u5f02\u5e38\u90fd\u5e94\u8be5\u4f7f\u5bf9\u8c61\u4fdd\u6301\u5728\u65b9\u6cd5\u8c03\u7528\u4e4b\u524d\u7684\u72b6\u6001\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u8fd9\u6761\u89c4\u5219\uff0cAPI \u6587\u6863\u5e94\u8be5\u6e05\u695a\u5730\u6307\u51fa\u5bf9\u8c61\u5c06\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8bb8\u591a\u73b0\u6709\u7684 API \u6587\u6863\u90fd\u6ca1\u6709\u505a\u5230\u3002"),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"./Chapter-10/Chapter-10-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,o.kt)("a",{parentName:"strong",href:"./Chapter-10/Chapter-10-Item-75-Include-failure-capture-information-in-detail-messages"},"Item 75: Include failure capture information in detail messages\uff08\u5f02\u5e38\u8be6\u7ec6\u6d88\u606f\u4e2d\u5e94\u5305\u542b\u6355\u83b7\u5931\u8d25\u7684\u4fe1\u606f\uff09"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,o.kt)("a",{parentName:"strong",href:"./Chapter-10/Chapter-10-Item-77-Don%E2%80%99t-ignore-exceptions"},"Item 77: Don\u2019t ignore exceptions\uff08\u4e0d\u8981\u5ffd\u7565\u5f02\u5e38\uff09")))))}h.isMDXComponent=!0}}]);