"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9983],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),d=i,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||n;return a?r.createElement(h,o(o({ref:t},p),{},{components:a})):r.createElement(h,o({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,o=new Array(n);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<n;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1698:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>c});var r=a(7462),i=(a(7294),a(3905));const n={},o=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-66-Use-native-methods-judiciously",id:"Books/EffectiveJava3/Chapter-9/Chapter-9-Item-66-Use-native-methods-judiciously",title:"Chapter-9-Item-66-Use-native-methods-judiciously",description:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-66-Use-native-methods-judiciously.md",sourceDirName:"Books/EffectiveJava3/Chapter-9",slug:"/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-66-Use-native-methods-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-66-Use-native-methods-judiciously",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-66-Use-native-methods-judiciously.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-9-Item-65-Prefer-interfaces-to-reflection",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-65-Prefer-interfaces-to-reflection"},next:{title:"Chapter-9-Item-67-Optimize-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-9/Chapter-9-Item-67-Optimize-judiciously"}},l={},c=[{value:"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09",id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1",level:2},{value:"Item 66: Use native methods judiciously\uff08\u660e\u667a\u5730\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\uff09",id:"item-66-use-native-methods-judiciously\u660e\u667a\u5730\u4f7f\u7528\u672c\u5730\u65b9\u6cd5",level:3}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"chapter-9-general-programming\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1"},"Chapter 9. General Programming\uff08\u901a\u7528\u7a0b\u5e8f\u8bbe\u8ba1\uff09"),(0,i.kt)("h3",{id:"item-66-use-native-methods-judiciously\u660e\u667a\u5730\u4f7f\u7528\u672c\u5730\u65b9\u6cd5"},"Item 66: Use native methods judiciously\uff08\u660e\u667a\u5730\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\uff09"),(0,i.kt)("p",null,"The Java Native Interface (JNI) allows Java programs to call native methods, which are methods written in native programming languages such as C or C++. Historically, native methods have had three main uses. They provide access to platform-specific facilities such as registries. They provide access to existing libraries of native code, including legacy libraries that provide access to legacy data. Finally, native methods are used to write performance-critical parts of applications in native languages for improved performance."),(0,i.kt)("p",null,"Java \u672c\u5730\u63a5\u53e3\uff08JNI\uff09\u5141\u8bb8 Java \u7a0b\u5e8f\u8c03\u7528\u672c\u5730\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u662f\u7528 C \u6216 C++ \u7b49\u672c\u5730\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\u3002\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u672c\u5730\u65b9\u6cd5\u4e3b\u8981\u6709\u4e09\u79cd\u7528\u9014\u3002\u5b83\u4eec\u63d0\u4f9b\u5bf9\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u8bbe\u65bd\uff08\u5982\u6ce8\u518c\u4e2d\u5fc3\uff09\u7684\u8bbf\u95ee\u3002\u5b83\u4eec\u63d0\u4f9b\u5bf9\u73b0\u6709\u672c\u5730\u4ee3\u7801\u5e93\u7684\u8bbf\u95ee\uff0c\u5305\u62ec\u63d0\u4f9b\u5bf9\u9057\u7559\u6570\u636e\u8bbf\u95ee\u3002\u6700\u540e\uff0c\u672c\u5730\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u672c\u5730\u8bed\u8a00\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6ce8\u91cd\u6027\u80fd\u7684\u90e8\u5206\uff0c\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002"),(0,i.kt)("p",null,"It is legitimate to use native methods to access platform-specific facilities, but it is seldom necessary: as the Java platform matured, it provided access to many features previously found only in host platforms. For example, the process API, added in Java 9, provides access to OS processes. It is also legitimate to use native methods to use native libraries when no equivalent libraries are available in Java."),(0,i.kt)("p",null,"\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\u8bbf\u95ee\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u673a\u5236\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f\u5f88\u5c11\u6709\u5fc5\u8981\uff1a\u968f\u7740 Java \u5e73\u53f0\u7684\u6210\u719f\uff0c\u5b83\u63d0\u4f9b\u4e86\u5bf9\u8bb8\u591a\u4ee5\u524d\u53ea\u80fd\u5728\u5bbf\u4e3b\u5e73\u53f0\u4e2d\u4e0a\u627e\u5230\u7684\u7279\u6027\u3002\u4f8b\u5982\uff0cJava 9 \u4e2d\u6dfb\u52a0\u7684\u6d41 API \u63d0\u4f9b\u4e86\u5bf9 OS \u6d41\u7a0b\u7684\u8bbf\u95ee\u3002\u5728 Java \u4e2d\u6ca1\u6709\u7b49\u6548\u5e93\u65f6\uff0c\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\u6765\u4f7f\u7528\u672c\u5730\u5e93\u4e5f\u662f\u5408\u6cd5\u7684\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"It is rarely advisable to use native methods for improved performance.")," In early releases (prior to Java 3), it was often necessary, but JVMs have gotten much faster since then. For most tasks, it is now possible to obtain comparable performance in Java. For example, when java.math was added in release 1.1, BigInteger relied on a then-fast multiprecision arithmetic library written in C. In Java 3, BigInteger was reimplemented in Java, and carefully tuned to the point where it ran faster than the original native implementation."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e3a\u4e86\u63d0\u9ad8\u6027\u80fd\uff0c\u5f88\u5c11\u5efa\u8bae\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\u3002")," \u5728\u65e9\u671f\u7248\u672c\uff08Java 3 \u4e4b\u524d\uff09\uff0c\u8fd9\u901a\u5e38\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u662f\u4ece\u90a3\u65f6\u8d77 JVM \u53d8\u5f97\u66f4\u5feb\u4e86\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u4efb\u52a1\uff0c\u73b0\u5728\u53ef\u4ee5\u5728 Java \u4e2d\u83b7\u5f97\u7c7b\u4f3c\u7684\u6027\u80fd\u3002\u4f8b\u5982\uff0c\u5728\u7248\u672c 1.1 \u4e2d\u6dfb\u52a0\u4e86 ",(0,i.kt)("inlineCode",{parentName:"p"},"java.math"),"\uff0cBigInteger \u662f\u5728\u4e00\u4e2a\u7528 C \u7f16\u5199\u7684\u5feb\u901f\u591a\u7cbe\u5ea6\u8fd0\u7b97\u5e93\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0\u7684\u3002\u5728\u5f53\u65f6\uff0c\u4e3a\u4e86\u83b7\u5f97\u8db3\u591f\u7684\u6027\u80fd\u8fd9\u6837\u505a\u662f\u5fc5\u8981\u7684\u3002\u5728 Java 3 \u4e2d\uff0cBigInteger \u5219\u5b8c\u5168\u7528 Java \u91cd\u5199\u4e86\uff0c\u5e76\u4e14\u8fdb\u884c\u4e86\u6027\u80fd\u8c03\u4f18\uff0c\u65b0\u7684\u7248\u672c\u6bd4\u539f\u6765\u7684\u7248\u672c\u66f4\u5feb\u3002"),(0,i.kt)("p",null,"A sad coda to this story is that BigInteger has changed little since then, with the exception of faster multiplication for large numbers in Java 8. In that time, work continued apace on native libraries, notably GNU Multiple Precision arithmetic library (GMP). Java programmers in need of truly high-performance multiprecision arithmetic are now justified in using GMP via native methods ","[Blum14]","."),(0,i.kt)("p",null,"\u8fd9\u4e2a\u6545\u4e8b\u7684\u4e00\u4e2a\u53ef\u60b2\u7684\u7ed3\u5c3e\u662f\uff0c\u9664\u4e86\u5728 Java 8 \u4e2d\u5bf9\u5927\u6570\u8fdb\u884c\u66f4\u5feb\u7684\u4e58\u6cd5\u8fd0\u7b97\u4e4b\u5916\uff0cBigInteger \u6b64\u540e\u51e0\u4e4e\u6ca1\u6709\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\u3002\u5728\u6b64\u671f\u95f4\uff0c\u5bf9\u672c\u5730\u5e93\u7684\u5de5\u4f5c\u7ee7\u7eed\u5feb\u901f\u8fdb\u884c\uff0c\u5c24\u5176\u662f GNU \u591a\u7cbe\u5ea6\u7b97\u672f\u5e93\uff08GMP\uff09\u3002\u9700\u8981\u771f\u6b63\u9ad8\u6027\u80fd\u591a\u7cbe\u5ea6\u7b97\u6cd5\u7684 Java \u7a0b\u5e8f\u5458\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u672c\u5730\u65b9\u6cd5\u4f7f\u7528 GMP ","[Blum14]","\u3002"),(0,i.kt)("p",null,"The use of native methods has serious disadvantages. Because native languages are not safe (Item 50), applications using native methods are no longer immune to memory corruption errors. Because native languages are more platform-dependent than Java, programs using native methods are less portable. They are also harder to debug. If you aren\u2019t careful, native methods can decrease performance because the garbage collector can\u2019t automate, or even track, native memory usage (Item 8), and there is a cost associated with going into and out of native code. Finally, native methods require \u201cglue code\u201d that is difficult to read and tedious to write."),(0,i.kt)("p",null,"\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\u6709\u4e25\u91cd\u7684\u7f3a\u70b9\u3002\u7531\u4e8e\u672c\u5730\u8bed\u8a00\u4e0d\u5b89\u5168\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-8-Item-50-Make-defensive-copies-when-needed"},"Item-50"),"\uff09\uff0c\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u518d\u80fd\u514d\u53d7\u5185\u5b58\u6bc1\u574f\u9519\u8bef\u7684\u5f71\u54cd\u3002\u7531\u4e8e\u672c\u5730\u8bed\u8a00\u6bd4 Java \u66f4\u4f9d\u8d56\u4e8e\u5e73\u53f0\uff0c\u56e0\u6b64\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\u7684\u7a0b\u5e8f\u7684\u53ef\u79fb\u690d\u6027\u8f83\u5dee\u3002\u5b83\u4eec\u4e5f\u66f4\u96be\u8c03\u8bd5\u3002\u5982\u679c\u4e0d\u5c0f\u5fc3\uff0c\u672c\u5730\u65b9\u6cd5\u53ef\u80fd\u4f1a\u964d\u4f4e\u6027\u80fd\uff0c\u56e0\u4e3a\u5783\u573e\u6536\u96c6\u5668\u65e0\u6cd5\u81ea\u52a8\u8ddf\u8e2a\u672c\u5730\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-2-Item-8-Avoid-finalizers-and-cleaners"},"Item-8"),"\uff09\uff0c\u800c\u4e14\u8fdb\u51fa\u672c\u5730\u4ee3\u7801\u4f1a\u4ea7\u751f\u76f8\u5173\u7684\u6210\u672c\u3002\u6700\u540e\uff0c\u672c\u5730\u65b9\u6cd5\u9700\u8981\u300c\u7c98\u5408\u4ee3\u7801\u300d\uff0c\u8fd9\u5f88\u96be\u9605\u8bfb\uff0c\u800c\u4e14\u7f16\u5199\u8d77\u6765\u5f88\u4e4f\u5473\u3002"),(0,i.kt)("p",null,"In summary, think twice before using native methods. It is rare that you need to use them for improved performance. If you must use native methods to access low-level resources or native libraries, use as little native code as possible and test it thoroughly. A single bug in the native code can corrupt your entire application."),(0,i.kt)("p",null,"\u603b\u4e4b\uff0c\u5728\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\u4e4b\u524d\u8981\u4e09\u601d\u3002\u4e00\u822c\u5f88\u5c11\u9700\u8981\u4f7f\u7528\u5b83\u4eec\u6765\u63d0\u9ad8\u6027\u80fd\u3002\u5982\u679c\u5fc5\u987b\u4f7f\u7528\u672c\u5730\u65b9\u6cd5\u6765\u8bbf\u95ee\u5e95\u5c42\u8d44\u6e90\u6216\u672c\u5730\u5e93\uff0c\u8bf7\u5c3d\u53ef\u80fd\u5c11\u5730\u4f7f\u7528\u672c\u5730\u4ee3\u7801\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u5f7b\u5e95\u7684\u6d4b\u8bd5\u3002\u672c\u5730\u4ee3\u7801\u4e2d\u7684\u4e00\u4e2a\u9519\u8bef\u5c31\u53ef\u4ee5\u7834\u574f\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"./Chapter-9-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,i.kt)("a",{parentName:"strong",href:"./Chapter-9-Item-65-Prefer-interfaces-to-reflection"},"Item 65: Prefer interfaces to reflection\uff08\u63a5\u53e3\u4f18\u4e8e\u53cd\u5c04\uff09"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,i.kt)("a",{parentName:"strong",href:"./Chapter-9-Item-67-Optimize-judiciously"},"Item 67: Optimize judiciously\uff08\u660e\u667a\u5730\u8fdb\u884c\u4f18\u5316\uff09")))))}u.isMDXComponent=!0}}]);