"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6411],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=c(a),d=i,f=h["".concat(l,".").concat(d)]||h[d]||m[d]||r;return a?n.createElement(f,s(s({ref:t},p),{},{components:a})):n.createElement(f,s({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2997:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const r={},s=void 0,o={unversionedId:"Books/EffectiveJava3/Chapter-4/Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes",id:"Books/EffectiveJava3/Chapter-4/Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes",title:"Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes",description:"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes.md",sourceDirName:"Books/EffectiveJava3/Chapter-4",slug:"/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it"},next:{title:"Chapter-4-Item-21-Design-interfaces-for-posterity",permalink:"/docs/Books/EffectiveJava3/Chapter-4/Chapter-4-Item-21-Design-interfaces-for-posterity"}},l={},c=[{value:"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09",id:"chapter-4-classes-and-interfaces\u7c7b\u548c\u63a5\u53e3",level:2},{value:"Item 20: Prefer interfaces to abstract classes\uff08\u63a5\u53e3\u4f18\u4e8e\u62bd\u8c61\u7c7b\uff09",id:"item-20-prefer-interfaces-to-abstract-classes\u63a5\u53e3\u4f18\u4e8e\u62bd\u8c61\u7c7b",level:3}],p={toc:c};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"chapter-4-classes-and-interfaces\u7c7b\u548c\u63a5\u53e3"},"Chapter 4. Classes and Interfaces\uff08\u7c7b\u548c\u63a5\u53e3\uff09"),(0,i.kt)("h3",{id:"item-20-prefer-interfaces-to-abstract-classes\u63a5\u53e3\u4f18\u4e8e\u62bd\u8c61\u7c7b"},"Item 20: Prefer interfaces to abstract classes\uff08\u63a5\u53e3\u4f18\u4e8e\u62bd\u8c61\u7c7b\uff09"),(0,i.kt)("p",null,"Java has two mechanisms to define a type that permits multiple implementations: interfaces and abstract classes. Since the introduction of default methods for interfaces in Java 8 ","[JLS 9.4.3]",", both mechanisms allow you to provide implementations for some instance methods. A major difference is that to implement the type defined by an abstract class, a class must be a subclass of the abstract class. Because Java permits only single inheritance, this restriction on abstract classes severely constrains their use as type definitions.Any class that defines all the required methods and obeys the general contract is permitted to implement an interface, regardless of where the class resides in the class hierarchy."),(0,i.kt)("p",null,"Java \u6709\u4e24\u79cd\u673a\u5236\u6765\u5b9a\u4e49\u5141\u8bb8\u591a\u79cd\u5b9e\u73b0\u7684\u7c7b\u578b\uff1a\u63a5\u53e3\u548c\u62bd\u8c61\u7c7b\u3002\u7531\u4e8e Java 8 ","[JLS 9.4.3]","\u4e2d\u5f15\u5165\u4e86\u63a5\u53e3\u7684\u9ed8\u8ba4\u65b9\u6cd5\uff0c\u8fd9\u4e24\u79cd\u673a\u5236\u90fd\u5141\u8bb8\u4f60\u4e3a\u4e00\u4e9b\u5b9e\u4f8b\u65b9\u6cd5\u63d0\u4f9b\u5b9e\u73b0\u3002\u4e00\u4e2a\u4e3b\u8981\u533a\u522b\u662f\uff0c\u4e00\u4e2a\u7c7b\u8981\u5b9e\u73b0\u62bd\u8c61\u7c7b\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u8be5\u7c7b\u5fc5\u987b\u662f\u62bd\u8c61\u7c7b\u7684\u5b50\u7c7b\u3002\u56e0\u4e3a Java \u53ea\u5141\u8bb8\u5355\u4e00\u7ee7\u627f\uff0c\u8fd9\u79cd\u9650\u5236\u5bf9\u62bd\u8c61\u7c7b\u800c\u8a00\u4e25\u91cd\u5236\u7ea6\u4e86\u5b83\u4eec\u4f5c\u4e3a\u7c7b\u578b\u5b9a\u4e49\u7684\u4f7f\u7528\u3002\u4efb\u4f55\u5b9a\u4e49\u4e86\u6240\u6709\u5fc5\u9700\u7684\u65b9\u6cd5\u5e76\u9075\u5b88\u901a\u7528\u7ea6\u5b9a\u7684\u7c7b\u90fd\u5141\u8bb8\u5b9e\u73b0\u63a5\u53e3\uff0c\u800c\u4e0d\u7ba1\u8be5\u7c7b\u9a7b\u7559\u5728\u7c7b\u5c42\u6b21\u7ed3\u6784\u4e2d\u4f55\u5904\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8bd1\u6ce8\uff1a")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"1\u3001\u62bd\u8c61\u7c7b\u7684\u5c40\u9650\uff1a\u4e00\u4e2a\u7c7b\u8981\u5b9e\u73b0\u62bd\u8c61\u7c7b\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u8be5\u7c7b\u5fc5\u987b\u662f\u62bd\u8c61\u7c7b\u7684\u5b50\u7c7b\u3002\u56e0\u4e3a Java \u53ea\u5141\u8bb8\u5355\u4e00\u7ee7\u627f\uff0c\u8fd9\u79cd\u9650\u5236\u5bf9\u62bd\u8c61\u7c7b\u800c\u8a00\u4e25\u91cd\u5236\u7ea6\u4e86\u5b83\u4eec\u4f5c\u4e3a\u7c7b\u578b\u5b9a\u4e49\u7684\u4f7f\u7528\u3002")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"2\u3001\u63a5\u53e3\u7684\u4f18\u70b9\uff1a\u4efb\u4f55\u5b9a\u4e49\u4e86\u6240\u6709\u5fc5\u9700\u7684\u65b9\u6cd5\u5e76\u9075\u5b88\u901a\u7528\u7ea6\u5b9a\u7684\u7c7b\u90fd\u5141\u8bb8\u5b9e\u73b0\u63a5\u53e3\uff0c\u800c\u4e0d\u7ba1\u8be5\u7c7b\u9a7b\u7559\u5728\u7c7b\u5c42\u6b21\u7ed3\u6784\u4e2d\u4f55\u5904\u3002")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Existing classes can easily be retrofitted to implement a new interface.")," All you have to do is to add the required methods, if they don\u2019t yet exist, and to add an implements clause to the class declaration. For example, many existing classes were retrofitted to implement the Comparable, Iterable, and Autocloseable interfaces when they were added to the platform. Existing classes cannot, in general, be retrofitted to extend a new abstract class. If you want to have two classes extend the same abstract class, you have to place it high up in the type hierarchy where it is an ancestor of both classes. Unfortunately,this can cause great collateral damage to the type hierarchy, forcing all descendants of the new abstract class to subclass it, whether or not it is appropriate."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5bf9\u73b0\u6709\u7c7b\u8fdb\u884c\u6539\u9020\uff0c\u4ee5\u5b9e\u73b0\u65b0\u7684\u63a5\u53e3\u3002")," \u4f60\u6240\u8981\u505a\u7684\u5c31\u662f\u6dfb\u52a0\u6240\u9700\u7684\u65b9\u6cd5\uff08\u5982\u679c\u5b83\u4eec\u8fd8\u4e0d\u5b58\u5728\u7684\u8bdd\uff09\uff0c\u5e76\u5411\u7c7b\u58f0\u660e\u4e2d\u6dfb\u52a0\u4e00\u4e2a implements \u5b50\u53e5\u3002\u4f8b\u5982\uff0c\u8bb8\u591a\u73b0\u6709\u7684\u7c7b\u5728\u6dfb\u52a0\u5230 JDK \u65f6\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u4ee5\u5b9e\u73b0 Comparable\u3001Iterable \u548c Autocloseable \u63a5\u53e3\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u73b0\u6709\u7684\u7c7b\u4e0d\u80fd\u88ab\u4fee\u6539\u4ee5\u6269\u5c55\u65b0\u7684\u62bd\u8c61\u7c7b\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u4e24\u4e2a\u7c7b\u6269\u5c55\u540c\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u4f60\u5fc5\u987b\u628a\u5b83\u653e\u5728\u7c7b\u578b\u5c42\u6b21\u7ed3\u6784\u7684\u9ad8\u5c42\uff0c\u4f5c\u4e3a\u4e24\u4e2a\u7c7b\u7684\u7956\u5148\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bf9\u7c7b\u578b\u5c42\u6b21\u7ed3\u6784\u9020\u6210\u5de8\u5927\u7684\u9644\u5e26\u635f\u5bb3\uff0c\u8feb\u4f7f\u65b0\u62bd\u8c61\u7c7b\u7684\u6240\u6709\u540e\u4ee3\u5bf9\u5176\u8fdb\u884c\u5b50\u7c7b\u5316\uff0c\u65e0\u8bba\u5b83\u662f\u5426\u5408\u9002\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Interfaces are ideal for defining mixins.")," Loosely speaking, a mixin is a type that a class can implement in addition to its \u201cprimary type,\u201d to declare that it provides some optional behavior. For example, Comparable is a mixin interface that allows a class to declare that its instances are ordered with respect to other mutually comparable objects. Such an interface is called a mixin because it allows the optional functionality to be \u201cmixed in\u201d to the type\u2019s primary functionality. Abstract classes can\u2019t be used to define mixins for the same reason that they can\u2019t be retrofitted onto existing classes: a class cannot have more than one parent, and there is no reasonable place in the class hierarchy to insert a mixin."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u63a5\u53e3\u662f\u5b9a\u4e49 mixin\uff08\u6df7\u5408\u7c7b\u578b\uff09\u7684\u7406\u60f3\u5de5\u5177\u3002")," \u7c97\u7565\u5730\u8bf4\uff0cmixin \u662f\u7c7b\u9664\u4e86\u300c\u57fa\u672c\u7c7b\u578b\u300d\u4e4b\u5916\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u7684\u7c7b\u578b\uff0c\u7528\u4e8e\u58f0\u660e\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53ef\u9009\u7684\u884c\u4e3a\u3002\u4f8b\u5982\uff0cComparable \u662f\u4e00\u4e2a mixin \u63a5\u53e3\uff0c\u5b83\u5141\u8bb8\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u4e0e\u5176\u4ed6\u7684\u53ef\u76f8\u4e92\u6bd4\u8f83\u7684\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\u3002\u8fd9\u6837\u7684\u63a5\u53e3\u79f0\u4e3a mixin\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u53ef\u9009\u529f\u80fd\u300c\u6df7\u5408\u300d\u5230\u7c7b\u578b\u7684\u4e3b\u8981\u529f\u80fd\u4e2d\u3002\u62bd\u8c61\u7c7b\u4e0d\u80fd\u7528\u4e8e\u5b9a\u4e49 mixin\uff0c\u539f\u56e0\u4e0e\u5b83\u4eec\u4e0d\u80fd\u88ab\u4fee\u6539\u5230\u73b0\u6709\u7c7b\u76f8\u540c\uff1a\u4e00\u4e2a\u7c7b\u4e0d\u80fd\u6709\u591a\u4e2a\u7236\u7c7b\uff0c\u800c\u4e14\u5728\u7c7b\u5c42\u6b21\u7ed3\u6784\u4e2d\u6ca1\u6709\u63d2\u5165 mixin \u7684\u5408\u7406\u4f4d\u7f6e\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Interfaces allow for the construction of nonhierarchical type frameworks.")," Type hierarchies are great for organizing some things, but other things don\u2019t fall neatly into a rigid hierarchy. For example, suppose we have an interface representing a singer and another representing a songwriter:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u63a5\u53e3\u5141\u8bb8\u6784\u9020\u975e\u5c42\u6b21\u5316\u7c7b\u578b\u6846\u67b6\u3002")," \u7c7b\u578b\u5c42\u6b21\u7ed3\u6784\u5bf9\u4e8e\u7ec4\u7ec7\u4e00\u4e9b\u4e8b\u60c5\u5f88\u597d\uff0c\u4f46\u662f\u5176\u4ed6\u4e8b\u60c5\u4e0d\u80fd\u6574\u9f50\u5730\u5f52\u5165\u4e25\u683c\u7684\u5c42\u6b21\u7ed3\u6784\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4ee3\u8868\u6b4c\u624b\u7684\u63a5\u53e3\u548c\u53e6\u4e00\u4e2a\u4ee3\u8868\u8bcd\u66f2\u4f5c\u8005\u7684\u63a5\u53e3\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public interface Singer {\n    AudioClip sing(Song s);\n}\n\npublic interface Songwriter {\n    Song compose(int chartPosition);\n}\n")),(0,i.kt)("p",null,"In real life, some singers are also songwriters. Because we used interfaces rather than abstract classes to define these types, it is perfectly permissible for a single class to implement both Singer and Songwriter. In fact, we can define a third interface that extends both Singer and Songwriter and adds new methods that are appropriate to the combination:"),(0,i.kt)("p",null,"\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u4e00\u4e9b\u6b4c\u624b\u4e5f\u662f\u8bcd\u66f2\u4f5c\u8005\u3002\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u63a5\u53e3\u800c\u4e0d\u662f\u62bd\u8c61\u7c7b\u6765\u5b9a\u4e49\u8fd9\u4e9b\u7c7b\u578b\uff0c\u6240\u4ee5\u5b8c\u5168\u5141\u8bb8\u5355\u4e2a\u7c7b\u540c\u65f6\u5b9e\u73b0\u6b4c\u624b\u548c\u8bcd\u66f2\u4f5c\u8005\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u7b2c\u4e09\u4e2a\u63a5\u53e3\uff0c\u6269\u5c55\u6b4c\u624b\u548c\u8bcd\u66f2\u4f5c\u8005\uff0c\u5e76\u6dfb\u52a0\u9002\u5408\u8fd9\u79cd\u7ec4\u5408\u7684\u65b0\u65b9\u6cd5\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"public interface SingerSongwriter extends Singer, Songwriter {\n    AudioClip strum();\n    void actSensitive();\n}\n")),(0,i.kt)("p",null,"You don\u2019t always need this level of flexibility, but when you do, interfaces are a lifesaver. The alternative is a bloated class hierarchy containing a separate class for every supported combination of attributes. If there are n attributes in the type system, there are 2n possible combinations that you might have to support. This is what\u2019s known as a combinatorial explosion. Bloated class hierarchies can lead to bloated classes with many methods that differ only in the type of their arguments because there are no types in the class hierarchy to capture common behaviors."),(0,i.kt)("p",null,"\u4f60\u5e76\u4e0d\u603b\u662f\u9700\u8981\u8fd9\u79cd\u7ea7\u522b\u7684\u7075\u6d3b\u6027\uff0c\u4f46\u662f\u5f53\u4f60\u9700\u8981\u65f6\uff0c\u63a5\u53e3\u5c31\u662f\u6551\u661f\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u4e00\u4e2a\u81c3\u80bf\u7684\u7c7b\u5c42\u6b21\u7ed3\u6784\uff0c\u5b83\u4e3a\u6bcf\u4e2a\u53d7\u652f\u6301\u7684\u5c5e\u6027\u7ec4\u5408\u5305\u542b\u4e00\u4e2a\u5355\u72ec\u7684\u7c7b\u3002\u5982\u679c\u7c7b\u578b\u7cfb\u7edf\u4e2d\u6709 n \u4e2a\u5c5e\u6027\uff0c\u90a3\u4e48\u53ef\u80fd\u9700\u8981\u652f\u6301 2",(0,i.kt)("sup",null,"n"),"\u79cd\u7ec4\u5408\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u7ec4\u5408\u7206\u70b8\u3002\u81c3\u80bf\u7684\u7c7b\u5c42\u6b21\u7ed3\u6784\u53ef\u80fd\u5bfc\u81f4\u7c7b\u4e5f\u81c3\u80bf\uff0c\u5176\u4e2d\u8bb8\u591a\u65b9\u6cd5\u53ea\u5728\u5176\u53c2\u6570\u7684\u7c7b\u578b\u4e0a\u6709\u6240\u4e0d\u540c\uff0c\u56e0\u4e3a\u7c7b\u5c42\u6b21\u7ed3\u6784\u4e2d\u6ca1\u6709\u7c7b\u578b\u6765\u6355\u83b7\u516c\u5171\u884c\u4e3a\u3002"),(0,i.kt)("p",null,"Interfaces enable safe, powerful functionality enhancements via the wrapper class idiom (Item 18). If you use abstract classes to define types, you leave the programmer who wants to add functionality with no alternative but inheritance. The resulting classes are less powerful and more fragile than wrapper classes."),(0,i.kt)("p",null,"\u901a\u8fc7 ",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-18-Favor-composition-over-inheritance"},"Item-18")," \u4ecb\u7ecd\u7684\u5305\u88c5\u7c7b\uff0c\u63a5\u53e3\u80fd\u591f\u652f\u6301\u5b89\u5168\u3001\u5f3a\u5927\u7684\u529f\u80fd\u589e\u5f3a\u3002\u5982\u679c\u4f60\u4f7f\u7528\u62bd\u8c61\u7c7b\u6765\u5b9a\u4e49\u7c7b\u578b\uff0c\u90a3\u4e48\u5e0c\u671b\u6dfb\u52a0\u529f\u80fd\u7684\u7a0b\u5e8f\u5458\u9664\u4e86\u7ee7\u627f\u4e4b\u5916\u522b\u65e0\u9009\u62e9\u3002\u6700\u7ec8\u751f\u6210\u7684\u7c7b\u4e0d\u5982\u5305\u88c5\u7c7b\u5f3a\u5927\uff0c\u4e5f\u66f4\u8106\u5f31\u3002"),(0,i.kt)("p",null,"When there is an obvious implementation of an interface method in terms of other interface methods, consider providing implementation assistance to programmers in the form of a default method. For an example of this technique, see the removeIf method on page 104. If you provide default methods, be sure to document them for inheritance using the @implSpec Javadoc tag (Item 19)."),(0,i.kt)("p",null,"\u5982\u679c\u63a5\u53e3\u65b9\u6cd5\u7684\u5b9e\u73b0\u4e0e\u5176\u4ed6\u63a5\u53e3\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u4ee5\u9ed8\u8ba4\u65b9\u6cd5\u7684\u5f62\u5f0f\u4e3a\u7a0b\u5e8f\u5458\u63d0\u4f9b\u5b9e\u73b0\u5e2e\u52a9\u3002\u6709\u5173\u6b64\u6280\u672f\u7684\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u7b2c 104 \u9875\u7684 removeIf \u65b9\u6cd5\u3002\u5982\u679c\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u65b9\u6cd5\uff0c\u8bf7\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"@implSpec")," \u6807\u7b7e\uff0c\u5e76\u786e\u4fdd\u5728\u6587\u6863\u4e2d\u8bb0\u5f55\u4ed6\u4eec\u7684\u7ee7\u627f\u5173\u7cfb\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it"},"Item-19"),"\uff09\u3002"),(0,i.kt)("p",null,"There are limits on how much implementation assistance you can provide with default methods. Although many interfaces specify the behavior of Object methods such as equals and hashCode, you are not permitted to provide default methods for them. Also, interfaces are not permitted to contain instance fields or nonpublic static members (with the exception of private static methods). Finally, you can\u2019t add default methods to an interface that you don\u2019t control."),(0,i.kt)("p",null,"\u9ed8\u8ba4\u65b9\u6cd5\u4e3a\u5b9e\u73b0\u63d0\u4f9b\u7684\u5e2e\u52a9\u6709\u9650\u3002\u5c3d\u7ba1\u8bb8\u591a\u63a5\u53e3\u6307\u5b9a\u4e86\u8bf8\u5982 equals \u548c hashCode \u7b49\u5bf9\u8c61\u65b9\u6cd5\u7684\u884c\u4e3a\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u4e3a\u5b83\u4eec\u63d0\u4f9b\u9ed8\u8ba4\u65b9\u6cd5\u3002\u6b64\u5916\uff0c\u63a5\u53e3\u4e0d\u5141\u8bb8\u5305\u542b\u5b9e\u4f8b\u5b57\u6bb5\u6216\u975e\u516c\u5171\u9759\u6001\u6210\u5458\uff08\u79c1\u6709\u9759\u6001\u65b9\u6cd5\u9664\u5916\uff09\u3002\u6700\u540e\uff0c\u4f60\u4e0d\u80fd\u5411\u4f60\u4e0d\u63a7\u5236\u7684\u63a5\u53e3\u6dfb\u52a0\u9ed8\u8ba4\u65b9\u6cd5\u3002"),(0,i.kt)("p",null,"You can, however, combine the advantages of interfaces and abstract classes by providing an abstract skeletal implementation class to go with an interface. The interface defines the type, perhaps providing some default methods, while the skeletal implementation class implements the remaining non-primitive interface methods atop the primitive interface methods. Extending a skeletal implementation takes most of the work out of implementing an interface. This is the Template Method pattern ","[Gamma95]","."),(0,i.kt)("p",null,"\u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u62bd\u8c61\u9aa8\u67b6\u5b9e\u73b0\u7c7b\u6765\u7ed3\u5408\u63a5\u53e3\u548c\u62bd\u8c61\u7c7b\u7684\u4f18\u70b9\u3002\u63a5\u53e3\u5b9a\u4e49\u4e86\u7c7b\u578b\uff0c\u53ef\u80fd\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9ed8\u8ba4\u65b9\u6cd5\uff0c\u800c\u9aa8\u67b6\u5b9e\u73b0\u7c7b\u5728\u57fa\u672c\u63a5\u53e3\u65b9\u6cd5\u4e4b\u4e0a\u5b9e\u73b0\u4e86\u5176\u4f59\u7684\u975e\u57fa\u672c\u63a5\u53e3\u65b9\u6cd5\u3002\u6269\u5c55\u9aa8\u67b6\u5b9e\u73b0\u9700\u8981\u5b8c\u6210\u5b9e\u73b0\u63a5\u53e3\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u3002\u8fd9\u662f\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f ","[Gamma95]","\u3002"),(0,i.kt)("p",null,"By convention, skeletal implementation classes are called AbstractInterface, where Interface is the name of the interface they implement. For example, the Collections Framework provides a skeletal implementation to go along with each main collection interface: AbstractCollection, AbstractSet, AbstractList, and AbstractMap. Arguably it would have made sense to call them SkeletalCollection, SkeletalSet, SkeletalList, and SkeletalMap, but the Abstract convention is now firmly established. When properly designed, skeletal implementations (whether a separate abstract class, or consisting solely of default methods on an interface) can make it very easy for programmers to provide their own implementations of an interface. For example, here\u2019s a static factory method containing a complete, fully functional List implementation atop AbstractList:"),(0,i.kt)("p",null,"\u6309\u7167\u60ef\u4f8b\uff0c\u9aa8\u67b6\u5b9e\u73b0\u7c7b\u79f0\u4e3a AbstractInterface\uff0c\u5176\u4e2d Interface \u662f\u5b83\u4eec\u5b9e\u73b0\u7684\u63a5\u53e3\u7684\u540d\u79f0\u3002\u4f8b\u5982\uff0cCollections Framework \u63d0\u4f9b\u4e86\u4e00\u4e2a\u9aa8\u67b6\u5b9e\u73b0\u6765\u914d\u5408\u6bcf\u4e2a\u4e3b\u8981\u7684\u96c6\u5408\u63a5\u53e3\uff1aAbstractCollection\u3001AbstractSet\u3001AbstractList \u548c AbstractMap\u3002\u53ef\u4ee5\u8bf4\uff0c\u5c06\u5b83\u4eec\u79f0\u4e3a SkeletalCollection\u3001SkeletalSet\u3001SkeletalList \u548c SkeletalMap \u662f\u6709\u610f\u4e49\u7684\uff0c\u4f46 Abstract \u7684\u7528\u6cd5\u73b0\u5728\u5df2\u7ecf\u6839\u6df1\u8482\u56fa\u3002\u5982\u679c\u8bbe\u8ba1\u5f97\u5f53\uff0c\u9aa8\u67b6\u5b9e\u73b0\uff08\u65e0\u8bba\u662f\u5355\u72ec\u7684\u62bd\u8c61\u7c7b\uff0c\u8fd8\u662f\u4ec5\u4ec5\u7531\u63a5\u53e3\u4e0a\u7684\u9ed8\u8ba4\u65b9\u6cd5\u7ec4\u6210\uff09\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u5458\u975e\u5e38\u5bb9\u6613\u5730\u63d0\u4f9b\u4ed6\u4eec\u81ea\u5df1\u7684\u63a5\u53e3\u5b9e\u73b0\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u9759\u6001\u5de5\u5382\u65b9\u6cd5\uff0c\u5b83\u5728 AbstractList \u4e0a\u5305\u542b\u4e00\u4e2a\u5b8c\u6574\u7684\u3001\u529f\u80fd\u5b8c\u6574\u7684 List \u5b9e\u73b0\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// Concrete implementation built atop skeletal implementation\nstatic List<Integer> intArrayAsList(int[] a) {\n        Objects.requireNonNull(a);\n        // The diamond operator is only legal here in Java 9 and later\n        // If you're using an earlier release, specify <Integer>\n        return new AbstractList<>() {\n            @Override\n            public Integer get(int i) {\n                return a[i]; // Autoboxing (Item 6)\n            }\n\n            @Override\n            public Integer set(int i, Integer val) {\n                int oldVal = a[i];\n                a[i] = val; // Auto-unboxing\n                return oldVal; // Autoboxing\n            }\n\n            @Override\n            public int size() {\n                return a.length;\n            }\n        };\n}\n")),(0,i.kt)("p",null,"When you consider all that a List implementation does for you, this example is an impressive demonstration of the power of skeletal implementations. Incidentally, this example is an Adapter ","[Gamma95]"," that allows an int array to be viewed as a list of Integer instances. Because of all the translation back and forth between int values and Integer instances (boxing and unboxing), its performance is not terribly good. Note that the implementation takes the form of an anonymous class (Item 24)."),(0,i.kt)("p",null,"\u5f53\u4f60\u8003\u8651\u5230 List \u5b9e\u73b0\u4e3a\u4f60\u505a\u7684\u6240\u6709\u4e8b\u60c5\u65f6\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u662f\u4e00\u4e2a\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u6f14\u793a\uff0c\u4f53\u73b0\u4e86\u9aa8\u67b6\u5b9e\u73b0\u7684\u5f3a\u5927\u529f\u80fd\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u8fd9\u4e2a\u793a\u4f8b\u662f\u4e00\u4e2a Adapter\uff08\u9002\u914d\u5668\uff09","[Gamma95]","\uff0c\u5b83\u5141\u8bb8\u5c06 int \u6570\u7ec4\u89c6\u4e3a Integer \u5b9e\u4f8b\u7684 list\u3002\u56e0\u4e3a\u5728 int \u503c\u548c Integer \u5b9e\u4f8b\uff08\u88c5\u7bb1\u548c\u62c6\u7bb1\uff09\u4e4b\u95f4\u6765\u56de\u8f6c\u6362\uff0c\u6240\u4ee5\u5b83\u7684\u6027\u80fd\u4e0d\u662f\u5f88\u597d\u3002\u6ce8\u610f\uff0c\u5b9e\u73b0\u7684\u5f62\u5f0f\u662f\u533f\u540d\u7c7b\uff08",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic"},"Item-24"),"\uff09\u3002"),(0,i.kt)("p",null,"The beauty of skeletal implementation classes is that they provide all of the implementation assistance of abstract classes without imposing the severe constraints that abstract classes impose when they serve as type definitions. For most implementors of an interface with a skeletal implementation class, extending this class is the obvious choice, but it is strictly optional. If a class cannot be made to extend the skeletal implementation, the class can always implement the interface directly. The class still benefits from any default methods present on the interface itself. Furthermore, the skeletal implementation can still aid the implementor\u2019s task. The class implementing the interface can forward invocations of interface methods to a contained instance of a private inner class that extends the skeletal implementation. This technique, known as simulated multiple inheritance, is closely related to the wrapper class idiom discussed in Item 18. It provides many of the benefits of multiple inheritance, while avoiding the pitfalls."),(0,i.kt)("p",null,"\u9aa8\u67b6\u5b9e\u73b0\u7c7b\u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e86\u62bd\u8c61\u7c7b\u7684\u6240\u6709\u5b9e\u73b0\u5e2e\u52a9\uff0c\u800c\u4e0d\u50cf\u62bd\u8c61\u7c7b\u4f5c\u4e3a\u7c7b\u578b\u5b9a\u4e49\u65f6\u90a3\u6837\u53d7\u5230\u4e25\u683c\u7684\u7ea6\u675f\u3002\u5bf9\u4e8e\u5177\u6709\u9aa8\u67b6\u5b9e\u73b0\u7c7b\u7684\u63a5\u53e3\u7684\u5927\u591a\u6570\u5b9e\u73b0\u6765\u8bf4\uff0c\u6269\u5c55\u8fd9\u4e2a\u7c7b\u662f\u663e\u800c\u6613\u89c1\u7684\u9009\u62e9\uff0c\u4f46\u5b83\u5e76\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u5982\u679c\u4e0d\u80fd\u4f7f\u7c7b\u6269\u5c55\u9aa8\u67b6\u5b9e\u73b0\uff0c\u5219\u7c7b\u603b\u662f\u53ef\u4ee5\u76f4\u63a5\u5b9e\u73b0\u63a5\u53e3\u3002\u7c7b\u4ecd\u7136\u53d7\u76ca\u4e8e\u63a5\u53e3\u672c\u8eab\u7684\u4efb\u4f55\u9ed8\u8ba4\u65b9\u6cd5\u3002\u6b64\u5916\uff0c\u9aa8\u67b6\u5b9e\u73b0\u4ecd\u7136\u53ef\u4ee5\u5e2e\u52a9\u5b9e\u73b0\u4eba\u5458\u5b8c\u6210\u4efb\u52a1\u3002\u5b9e\u73b0\u63a5\u53e3\u7684\u7c7b\u53ef\u4ee5\u5c06\u63a5\u53e3\u65b9\u6cd5\u7684\u8c03\u7528\u8f6c\u53d1\u7ed9\u6269\u5c55\u9aa8\u67b6\u5b9e\u73b0\u7684\u79c1\u6709\u5185\u90e8\u7c7b\u7684\u5305\u542b\u5b9e\u4f8b\u3002\u8fd9\u79cd\u6280\u672f\u79f0\u4e3a\u6a21\u62df\u591a\u91cd\u7ee7\u627f\uff0c\u4e0e",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-18-Favor-composition-over-inheritance"},"Item-18"),"\u4e2d\u8ba8\u8bba\u7684\u5305\u88c5\u7c7b\u5bc6\u5207\u76f8\u5173\u3002\u5b83\u63d0\u4f9b\u4e86\u591a\u91cd\u7ee7\u627f\u7684\u8bb8\u591a\u597d\u5904\uff0c\u540c\u65f6\u907f\u514d\u4e86\u7f3a\u9677\u3002"),(0,i.kt)("p",null,"Writing a skeletal implementation is a relatively simple, if somewhat tedious, process. First, study the interface and decide which methods are the primitives in terms of which the others can be implemented. These primitives will be the abstract methods in your skeletal implementation. Next, provide default methods in the interface for all of the methods that can be implemented directly atop the primitives, but recall that you may not provide default methods for Object methods such as equals and hashCode. If the primitives and default methods cover the interface, you\u2019re done, and have no need for a skeletal implementation class. Otherwise, write a class declared to implement the interface, with implementations of all of the remaining interface methods. The class may contain any nonpublic fields ands methods appropriate to the task."),(0,i.kt)("p",null,"\u7f16\u5199\u4e00\u4e2a\u9aa8\u67b6\u5b9e\u73b0\u662f\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u8fc7\u7a0b\uff0c\u5c3d\u7ba1\u6709\u70b9\u4e4f\u5473\u3002\u9996\u5148\uff0c\u7814\u7a76\u63a5\u53e3\u5e76\u51b3\u5b9a\u54ea\u4e9b\u65b9\u6cd5\u662f\u57fa\u672c\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u5176\u4ed6\u65b9\u6cd5\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u5b9e\u73b0\u3002\u8fd9\u4e9b\u57fa\u672c\u65b9\u6cd5\u5c06\u662f\u4f60\u7684\u9aa8\u67b6\u5b9e\u73b0\u4e2d\u7684\u62bd\u8c61\u65b9\u6cd5\u3002\u63a5\u4e0b\u6765\uff0c\u5728\u63a5\u53e3\u4e2d\u4e3a\u6240\u6709\u53ef\u4ee5\u76f4\u63a5\u5728\u57fa\u672c\u65b9\u6cd5\u4e4b\u4e0a\u5b9e\u73b0\u7684\u65b9\u6cd5\u63d0\u4f9b\u9ed8\u8ba4\u65b9\u6cd5\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u4f60\u53ef\u80fd\u4e0d\u4f1a\u4e3a\u8bf8\u5982 equals \u548c hashCode \u4e4b\u7c7b\u7684\u5bf9\u8c61\u65b9\u6cd5\u63d0\u4f9b\u9ed8\u8ba4\u65b9\u6cd5\u3002\u5982\u679c\u57fa\u672c\u65b9\u6cd5\u548c\u9ed8\u8ba4\u65b9\u6cd5\u8986\u76d6\u4e86\u63a5\u53e3\uff0c\u90a3\u4e48\u5c31\u5b8c\u6210\u4e86\uff0c\u4e0d\u9700\u8981\u4e00\u4e2a\u9aa8\u67b6\u5b9e\u73b0\u7c7b\u3002\u5426\u5219\uff0c\u7f16\u5199\u4e00\u4e2a\u58f0\u660e\u4e3a\u5b9e\u73b0\u63a5\u53e3\u7684\u7c7b\uff0c\u5e76\u5b9e\u73b0\u6240\u6709\u5269\u4f59\u7684\u63a5\u53e3\u65b9\u6cd5\u3002\u8be5\u7c7b\u53ef\u80fd\u5305\u542b\u4efb\u4f55\u9002\u5408\u4e8e\u4efb\u52a1\u7684\u975e\u516c\u5171\u5b57\u6bb5\u548c\u65b9\u6cd5\u3002"),(0,i.kt)("p",null,"As a simple example, consider the Map.Entry interface. The obvious primitives are getKey, getValue, and (optionally) setValue. The interface specifies the behavior of equals and hashCode, and there is an obvious implementation of toString in terms of the primitives. Since you are not allowed to provide default implementations for the Object methods, all implementations are placed in the skeletal implementation class:"),(0,i.kt)("p",null,"\u4f5c\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u8003\u8651\u4e00\u4e0b ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.Entry")," \u63a5\u53e3\u3002\u6700\u660e\u663e\u7684\u57fa\u672c\u65b9\u6cd5\u662f getKey\u3001getValue \u548c\uff08\u53ef\u9009\u7684\uff09setValue\u3002\u8be5\u63a5\u53e3\u6307\u5b9a\u4e86 equals \u548c hashCode \u7684\u884c\u4e3a\uff0c\u5e76\u4e14\u5728\u57fa\u672c\u65b9\u6cd5\u65b9\u9762\u6709 toString \u7684\u660e\u663e\u5b9e\u73b0\u3002\u7531\u4e8e\u4e0d\u5141\u8bb8\u4e3a\u5bf9\u8c61\u65b9\u6cd5\u63d0\u4f9b\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u6240\u6709\u5b9e\u73b0\u90fd\u653e\u5728\u9aa8\u67b6\u5b9e\u73b0\u7c7b\u4e2d\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Skeletal implementation class\npublic abstract class AbstractMapEntry<K,V> implements Map.Entry<K,V> {\n\n    // Entries in a modifiable map must override this method\n    @Override public V setValue(V value) {\n        throw new UnsupportedOperationException();\n    }\n\n    // Implements the general contract of Map.Entry.equals\n    @Override public boolean equals(Object o) {\n        if (o == this)\n            return true;\n        if (!(o instanceof Map.Entry))\n            return false;\n        Map.Entry<?,?> e = (Map.Entry) o;\n        return Objects.equals(e.getKey(), getKey()) && Objects.equals(e.getValue(), getValue());\n    }\n\n    // Implements the general contract of Map.Entry.hashCode\n    @Override public int hashCode() {\n        return Objects.hashCode(getKey())^ Objects.hashCode(getValue());\n    }\n\n    @Override public String toString() {\n        return getKey() + "=" + getValue();\n    }\n}\n')),(0,i.kt)("p",null,"Note that this skeletal implementation could not be implemented in the Map.Entry interface or as a subinterface because default methods are not permitted to override Object methods such as equals, hashCode, and toString."),(0,i.kt)("p",null,"\u6ce8\u610f\uff0c\u8fd9\u4e2a\u9aa8\u67b6\u5b9e\u73b0\u4e0d\u80fd\u5728 ",(0,i.kt)("inlineCode",{parentName:"p"},"Map.Entry")," \u63a5\u53e3\u6216\u5b50\u63a5\u53e3\u4e2d\u5b9e\u73b0\uff0c\u56e0\u4e3a\u4e0d\u5141\u8bb8\u9ed8\u8ba4\u65b9\u6cd5\u8986\u76d6\u8bf8\u5982 equals\u3001hashCode \u548c toString \u7b49\u5bf9\u8c61\u65b9\u6cd5\u3002"),(0,i.kt)("p",null,"Because skeletal implementations are designed for inheritance, you should follow all of the design and documentation guidelines in Item 19. For brevity\u2019s sake, the documentation comments were omitted from the previous example, but good documentation is absolutely essential in a skeletal implementation, whether it consists of default methods on an interface or a separate abstract class."),(0,i.kt)("p",null,"\u56e0\u4e3a\u9aa8\u67b6\u5b9e\u73b0\u662f\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u7684\uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u9075\u5faa ",(0,i.kt)("a",{parentName:"p",href:"./Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it"},"Item-19")," \u4e2d\u7684\u6240\u6709\u8bbe\u8ba1\u548c\u6587\u6863\u6307\u5357\u3002\u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\u7701\u7565\u4e86\u6587\u6863\u6ce8\u91ca\uff0c\u4f46\u662f\u4f18\u79c0\u7684\u6587\u6863\u5bf9\u4e8e\u9aa8\u67b6\u5b9e\u73b0\u6765\u8bf4\u662f\u7edd\u5bf9\u5fc5\u8981\u7684\uff0c\u4e0d\u7ba1\u5b83\u662f\u7531\u63a5\u53e3\u4e0a\u7684\u9ed8\u8ba4\u65b9\u6cd5\u8fd8\u662f\u5355\u72ec\u7684\u62bd\u8c61\u7c7b\u7ec4\u6210\u3002"),(0,i.kt)("p",null,"A minor variant on the skeletal implementation is the simple implementation, exemplified by AbstractMap.SimpleEntry. A simple implementation is like a skeletal implementation in that it implements an interface and is designed for inheritance, but it differs in that it isn\u2019t abstract: it is the simplest possible working implementation. You can use it as it stands or subclass it as circumstances warrant."),(0,i.kt)("p",null,"\u9aa8\u67b6\u5b9e\u73b0\u7684\u4e00\u4e2a\u5c0f\u53d8\u79cd\u662f\u7b80\u5355\u5b9e\u73b0\uff0c\u4f8b\u5982 ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractMap.SimpleEntry"),"\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0\u5c31\u50cf\u4e00\u4e2a\u9aa8\u67b6\u5b9e\u73b0\uff0c\u56e0\u4e3a\u5b83\u5b9e\u73b0\u4e86\u4e00\u4e2a\u63a5\u53e3\uff0c\u5e76\u4e14\u662f\u4e3a\u7ee7\u627f\u800c\u8bbe\u8ba1\u7684\uff0c\u4f46\u662f\u5b83\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5b83\u4e0d\u662f\u62bd\u8c61\u7684\uff1a\u5b83\u662f\u6700\u7b80\u5355\u7684\u5de5\u4f5c\u5b9e\u73b0\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u5b83\u7684\u72b6\u6001\u4f7f\u7528\u5b83\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u60c5\u51b5\u5bf9\u5b83\u8fdb\u884c\u5b50\u7c7b\u5316\u3002"),(0,i.kt)("p",null,"To summarize, an interface is generally the best way to define a type that permits multiple implementations. If you export a nontrivial interface, you should strongly consider providing a skeletal implementation to go with it. To the extent possible, you should provide the skeletal implementation via default methods on the interface so that all implementors of the interface can make use of it. That said, restrictions on interfaces typically mandate that a skeletal implementation take the form of an abstract class."),(0,i.kt)("p",null,"\u603b\u4e4b\uff0c\u63a5\u53e3\u901a\u5e38\u662f\u5b9a\u4e49\u5141\u8bb8\u591a\u79cd\u5b9e\u73b0\u7684\u7c7b\u578b\u7684\u6700\u4f73\u65b9\u6cd5\u3002\u5982\u679c\u5bfc\u51fa\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u63a5\u53e3\uff0c\u5219\u5e94\u8be5\u5f3a\u70c8\u8003\u8651\u63d0\u4f9b\u4e00\u4e2a\u9aa8\u67b6\u5b9e\u73b0\u3002\u5c3d\u53ef\u80fd\u5730\uff0c\u4f60\u5e94\u8be5\u901a\u8fc7\u63a5\u53e3\u4e0a\u7684\u9ed8\u8ba4\u65b9\u6cd5\u63d0\u4f9b\u9aa8\u67b6\u5b9e\u73b0\uff0c\u4ee5\u4fbf\u63a5\u53e3\u7684\u6240\u6709\u5b9e\u73b0\u8005\u90fd\u53ef\u4ee5\u4f7f\u7528\u5b83\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u63a5\u53e3\u7684\u9650\u5236\u901a\u5e38\u8981\u6c42\u6846\u67b6\u5b9e\u73b0\u91c7\u7528\u62bd\u8c61\u7c7b\u7684\u5f62\u5f0f\u3002"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"./Chapter-4-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,i.kt)("a",{parentName:"strong",href:"./Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it"},"Item 19: Design and document for inheritance or else prohibit it\uff08\u7ee7\u627f\u8981\u8bbe\u8ba1\u826f\u597d\u5e76\u4e14\u5177\u6709\u6587\u6863\uff0c\u5426\u5219\u7981\u6b62\u4f7f\u7528\uff09"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,i.kt)("a",{parentName:"strong",href:"./Chapter-4-Item-21-Design-interfaces-for-posterity"},"Item 21: Design interfaces for posterity\uff08\u4e3a\u540e\u4ee3\u8bbe\u8ba1\u63a5\u53e3\uff09")))))}m.isMDXComponent=!0}}]);