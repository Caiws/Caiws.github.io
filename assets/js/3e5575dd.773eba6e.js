"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2362],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),h=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=h(r),d=a,m=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var h=2;h<o;h++)i[h]=r[h];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},7440:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>h});var n=r(7462),a=(r(7294),r(3905));const o={},i=void 0,s={unversionedId:"Books/EffectiveJava3/Chapter-11/Chapter-11-Item-84-Don\u2019t-depend-on-the-thread-scheduler",id:"Books/EffectiveJava3/Chapter-11/Chapter-11-Item-84-Don\u2019t-depend-on-the-thread-scheduler",title:"Chapter-11-Item-84-Don\u2019t-depend-on-the-thread-scheduler",description:"Chapter 11. Concurrency\uff08\u5e76\u53d1\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-84-Don\u2019t-depend-on-the-thread-scheduler.md",sourceDirName:"Books/EffectiveJava3/Chapter-11",slug:"/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-84-Don\u2019t-depend-on-the-thread-scheduler",permalink:"/docs/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-84-Don\u2019t-depend-on-the-thread-scheduler",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-84-Don\u2019t-depend-on-the-thread-scheduler.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-11-Item-83-Use-lazy-initialization-judiciously",permalink:"/docs/Books/EffectiveJava3/Chapter-11/Chapter-11-Item-83-Use-lazy-initialization-judiciously"},next:{title:"Chapter-12-Introduction",permalink:"/docs/Books/EffectiveJava3/Chapter-12/Chapter-12-Introduction"}},l={},h=[{value:"Chapter 11. Concurrency\uff08\u5e76\u53d1\uff09",id:"chapter-11-concurrency\u5e76\u53d1",level:2},{value:"Item 84: Don\u2019t depend on the thread scheduler\uff08\u4e0d\u8981\u4f9d\u8d56\u7ebf\u7a0b\u8c03\u5ea6\u5668\uff09",id:"item-84-dont-depend-on-the-thread-scheduler\u4e0d\u8981\u4f9d\u8d56\u7ebf\u7a0b\u8c03\u5ea6\u5668",level:3}],p={toc:h};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"chapter-11-concurrency\u5e76\u53d1"},"Chapter 11. Concurrency\uff08\u5e76\u53d1\uff09"),(0,a.kt)("h3",{id:"item-84-dont-depend-on-the-thread-scheduler\u4e0d\u8981\u4f9d\u8d56\u7ebf\u7a0b\u8c03\u5ea6\u5668"},"Item 84: Don\u2019t depend on the thread scheduler\uff08\u4e0d\u8981\u4f9d\u8d56\u7ebf\u7a0b\u8c03\u5ea6\u5668\uff09"),(0,a.kt)("p",null,"When many threads are runnable, the thread scheduler determines which ones get to run and for how long. Any reasonable operating system will try to make this determination fairly, but the policy can vary. Therefore, well-written programs shouldn\u2019t depend on the details of this policy. ",(0,a.kt)("strong",{parentName:"p"},"Any program that relies on the thread scheduler for correctness or performance is likely to be nonportable.")),(0,a.kt)("p",null,"\u5f53\u8bb8\u591a\u7ebf\u7a0b\u53ef\u4ee5\u8fd0\u884c\u65f6\uff0c\u7ebf\u7a0b\u8c03\u5ea6\u5668\u51b3\u5b9a\u54ea\u4e9b\u7ebf\u7a0b\u53ef\u4ee5\u8fd0\u884c\u4ee5\u53ca\u8fd0\u884c\u591a\u957f\u65f6\u95f4\u3002\u4efb\u4f55\u5408\u7406\u7684\u64cd\u4f5c\u7cfb\u7edf\u90fd\u4f1a\u5c1d\u8bd5\u516c\u5e73\u5730\u505a\u51fa\u8fd9\u4e2a\u51b3\u5b9a\uff0c\u4f46\u662f\u7b56\u7565\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u56e0\u6b64\uff0c\u7f16\u5199\u826f\u597d\u7684\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u6b64\u7b56\u7565\u7684\u7ec6\u8282\u3002",(0,a.kt)("strong",{parentName:"p"},"\u4efb\u4f55\u4f9d\u8d56\u7ebf\u7a0b\u8c03\u5ea6\u5668\u6765\u4fdd\u8bc1\u6b63\u786e\u6027\u6216\u6027\u80fd\u7684\u7a0b\u5e8f\u90fd\u53ef\u80fd\u662f\u4e0d\u53ef\u79fb\u690d\u7684\u3002")),(0,a.kt)("p",null,"The best way to write a robust, responsive, portable program is to ensure that the average number of runnable threads is not significantly greater than the number of processors. This leaves the thread scheduler with little choice: it simply runs the runnable threads till they\u2019re no longer runnable. The program\u2019s behavior doesn\u2019t vary too much, even under radically different thread-scheduling policies. Note that the number of runnable threads isn\u2019t the same as the total number of threads, which can be much higher. Threads that are waiting are not runnable."),(0,a.kt)("p",null,"\u7f16\u5199\u5065\u58ee\u3001\u54cd\u5e94\u5feb\u3001\u53ef\u79fb\u690d\u7a0b\u5e8f\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u786e\u4fdd\u53ef\u8fd0\u884c\u7ebf\u7a0b\u7684\u5e73\u5747\u6570\u91cf\u4e0d\u663e\u8457\u5927\u4e8e\u5904\u7406\u5668\u7684\u6570\u91cf\u3002\u8fd9\u4f7f\u5f97\u7ebf\u7a0b\u8c03\u5ea6\u5668\u51e0\u4e4e\u6ca1\u6709\u9009\u62e9\uff1a\u5b83\u53ea\u8fd0\u884c\u53ef\u8fd0\u884c\u7ebf\u7a0b\uff0c\u76f4\u5230\u5b83\u4eec\u4e0d\u518d\u53ef\u8fd0\u884c\u4e3a\u6b62\u3002\u5373\u4f7f\u5728\u5b8c\u5168\u4e0d\u540c\u7684\u7ebf\u7a0b\u8c03\u5ea6\u7b56\u7565\u4e0b\uff0c\u7a0b\u5e8f\u7684\u884c\u4e3a\u4e5f\u6ca1\u6709\u592a\u5927\u7684\u53d8\u5316\u3002\u6ce8\u610f\uff0c\u53ef\u8fd0\u884c\u7ebf\u7a0b\u7684\u6570\u91cf\u4e0e\u7ebf\u7a0b\u603b\u6570\u4e0d\u76f8\u540c\uff0c\u540e\u8005\u53ef\u80fd\u66f4\u9ad8\u3002\u6b63\u5728\u7b49\u5f85\u7684\u7ebf\u7a0b\u4e0d\u53ef\u8fd0\u884c\u3002"),(0,a.kt)("p",null,"The main technique for keeping the number of runnable threads low is to have each thread do some useful work, and then wait for more. ",(0,a.kt)("strong",{parentName:"p"},"Threads should not run if they aren\u2019t doing useful work.")," In terms of the Executor Framework (Item 80), this means sizing thread pools appropriately ","[Goetz06, 8.2]"," and keeping tasks short, but not too short, or dispatching overhead will harm performance."),(0,a.kt)("p",null,"\u4fdd\u6301\u53ef\u8fd0\u884c\u7ebf\u7a0b\u6570\u91cf\u4f4e\u7684\u4e3b\u8981\u6280\u672f\u662f\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u505a\u4e00\u4e9b\u6709\u7528\u7684\u5de5\u4f5c\uff0c\u7136\u540e\u7b49\u5f85\u66f4\u591a\u7684\u5de5\u4f5c\u3002",(0,a.kt)("strong",{parentName:"p"},"\u5982\u679c\u7ebf\u7a0b\u6ca1\u6709\u505a\u6709\u7528\u7684\u5de5\u4f5c\uff0c\u5b83\u4eec\u5c31\u4e0d\u5e94\u8be5\u8fd0\u884c\u3002")," \u5bf9\u4e8e Executor \u6846\u67b6\uff08",(0,a.kt)("a",{parentName:"p",href:"./Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads"},"Item-80"),"\uff09\uff0c\u8fd9\u610f\u5473\u7740\u9002\u5f53\u8c03\u6574\u7ebf\u7a0b\u6c60\u7684\u5927\u5c0f ","[Goetz06, 8.2]","\uff0c\u5e76\u4fdd\u6301\u4efb\u52a1\u77ed\u5c0f\uff08\u4f46\u4e0d\u8981\u592a\u77ed\uff09\uff0c\u5426\u5219\u5206\u6d3e\u5f00\u9500\u4f9d\u7136\u4f1a\u635f\u5bb3\u6027\u80fd\u3002"),(0,a.kt)("p",null,"Threads should not busy-wait, repeatedly checking a shared object waiting for its state to change. Besides making the program vulnerable to the vagaries of the thread scheduler, busy-waiting greatly increases the load on the processor, reducing the amount of useful work that others can accomplish. As an extreme example of what not to do, consider this perverse reimplementation of CountDownLatch:"),(0,a.kt)("p",null,"\u7ebf\u7a0b\u4e0d\u5e94\u8be5\u5904\u4e8e\u5faa\u73af\u68c0\u67e5\u5171\u4eab\u5bf9\u8c61\u72b6\u6001\u53d8\u5316\u3002\u9664\u4e86\u4f7f\u7a0b\u5e8f\u5bb9\u6613\u53d7\u5230\u7ebf\u7a0b\u8c03\u5ea6\u5668\u53d8\u5316\u65e0\u5e38\u7684\u5f71\u54cd\u4e4b\u5916\uff0c\u5faa\u73af\u68c0\u67e5\u72b6\u6001\u53d8\u5316\u8fd8\u5927\u5927\u589e\u52a0\u4e86\u5904\u7406\u5668\u7684\u8d1f\u8f7d\uff0c\u8fd8\u5f71\u54cd\u5176\u4ed6\u7ebf\u7a0b\u83b7\u53d6\u5904\u7406\u5668\u8fdb\u884c\u5de5\u4f5c\u3002\u4f5c\u4e3a\u53cd\u9762\u7684\u6781\u7aef\u4f8b\u5b50\uff0c\u8003\u8651\u4e00\u4e0b CountDownLatch \u7684\u4e0d\u6b63\u786e\u7684\u91cd\u6784\u5b9e\u73b0\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// Awful CountDownLatch implementation - busy-waits incessantly!\npublic class SlowCountDownLatch {\n\n    private int count;\n\n    public SlowCountDownLatch(int count) {\n        if (count < 0)\n            throw new IllegalArgumentException(count + " < 0");\n        this.count = count;\n    }\n\n    public void await() {\n        while (true) {\n            synchronized(this) {\n                if (count == 0)\n                return;\n            }\n        }\n    }\n\n    public synchronized void countDown() {\n        if (count != 0)\n            count--;\n    }\n}\n')),(0,a.kt)("p",null,"On my machine, SlowCountDownLatch is about ten times slower than Java\u2019s CountDownLatch when 1,000 threads wait on a latch. While this example may seem a bit far-fetched, it\u2019s not uncommon to see systems with one or more threads that are unnecessarily runnable. Performance and portability are likely to suffer."),(0,a.kt)("p",null,"\u5728\u6211\u7684\u673a\u5668\u4e0a\uff0c\u5f53 1000 \u4e2a\u7ebf\u7a0b\u7b49\u5f85\u4e00\u4e2a\u9501\u5b58\u5668\u65f6\uff0cSlowCountDownLatch \u7684\u901f\u5ea6\u5927\u7ea6\u662f Java \u7684 CountDownLatch \u7684 10 \u500d\u3002\u867d\u7136\u8fd9\u4e2a\u4f8b\u5b50\u770b\u8d77\u6765\u6709\u70b9\u7275\u5f3a\uff0c\u4f46\u662f\u5177\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u4e0d\u5fc5\u8981\u8fd0\u884c\u7684\u7ebf\u7a0b\u7684\u7cfb\u7edf\u5e76\u4e0d\u5c11\u89c1\u3002\u6027\u80fd\u548c\u53ef\u79fb\u690d\u6027\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002"),(0,a.kt)("p",null,"When faced with a program that barely works because some threads aren\u2019t getting enough CPU time relative to others, ",(0,a.kt)("strong",{parentName:"p"},"resist the temptation to \u201cfix\u201d the program by putting in calls to Thread.yield.")," You may succeed in getting the program to work after a fashion, but it will not be portable. The same yield invocations that improve performance on one JVM implementation might make it worse on a second and have no effect on a third. ",(0,a.kt)("strong",{parentName:"p"},"Thread.yield has no testable semantics.")," A better course of action is to restructure the application to reduce the number of concurrently runnable threads."),(0,a.kt)("p",null,"\u5f53\u9762\u5bf9\u4e00\u4e2a\u51e0\u4e4e\u4e0d\u80fd\u5de5\u4f5c\u7684\u7a0b\u5e8f\u65f6\uff0c\u800c\u539f\u56e0\u662f\u7531\u4e8e\u67d0\u4e9b\u7ebf\u7a0b\u76f8\u5bf9\u4e8e\u5176\u4ed6\u7ebf\u7a0b\u6ca1\u6709\u83b7\u5f97\u8db3\u591f\u7684 CPU \u65f6\u95f4\uff0c\u90a3\u4e48 ",(0,a.kt)("strong",{parentName:"p"},"\u901a\u8fc7\u8c03\u7528 ",(0,a.kt)("inlineCode",{parentName:"strong"},"Thread.yield")," \u6765\u300c\u4fee\u590d\u300d\u7a0b\u5e8f")," \u4f60\u4e5f\u8bb8\u80fd\u52c9\u5f3a\u8ba9\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\uff0c\u4f46\u5b83\u662f\u4e0d\u53ef\u79fb\u690d\u7684\u3002\u5728\u4e00\u4e2a JVM \u5b9e\u73b0\u4e0a\u63d0\u9ad8\u6027\u80fd\u7684\u76f8\u540c\u7684 yield \u8c03\u7528\uff0c\u5728\u4e00\u4e9bJVM \u5b9e\u73b0\u4e0a\u53ef\u80fd\u4f1a\u4f7f\u6027\u80fd\u53d8\u5dee\uff0c\u800c\u5728\u5176\u4ed6 JVM \u5b9e\u73b0\u4e0a\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u3002",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Thread.yield")," \u6ca1\u6709\u53ef\u6d4b\u8bd5\u7684\u8bed\u4e49\u3002")," \u66f4\u597d\u7684\u505a\u6cd5\u662f\u91cd\u6784\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u51cf\u5c11\u5e76\u53d1\u8fd0\u884c\u7ebf\u7a0b\u7684\u6570\u91cf\u3002"),(0,a.kt)("p",null,"A related technique, to which similar caveats apply, is adjusting thread priorities. ",(0,a.kt)("strong",{parentName:"p"},"Thread priorities are among the least portable features of Java.")," It is not unreasonable to tune the responsiveness of an application by tweaking a few thread priorities, but it is rarely necessary and is not portable. It is unreasonable to attempt to solve a serious liveness problem by adjusting thread priorities. The problem is likely to return until you find and fix the underlying cause."),(0,a.kt)("p",null,"\u4e00\u4e2a\u76f8\u5173\u7684\u6280\u672f\u662f\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7\uff0c\u7c7b\u4f3c\u7684\u8b66\u544a\u4e5f\u9002\u7528\u4e8e\u6b64\u6280\u672f\uff0c\u5373\uff0c\u7ebf\u7a0b\u4f18\u5148\u7ea7\u662f Java \u4e2d\u6700\u4e0d\u53ef\u79fb\u690d\u7684\u7279\u6027\u4e4b\u4e00\u3002\u901a\u8fc7\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7\u6765\u8c03\u4f18\u5e94\u7528\u7a0b\u5e8f\u7684\u54cd\u5e94\u6027\u5e76\u975e\u4e0d\u5408\u7406\uff0c\u4f46\u5f88\u5c11\u60c5\u51b5\u4e0b\u662f\u5fc5\u8981\u7684\uff0c\u800c\u4e14\u4e0d\u53ef\u79fb\u690d\u3002\u8bd5\u56fe\u901a\u8fc7\u8c03\u6574\u7ebf\u7a0b\u4f18\u5148\u7ea7\u6765\u89e3\u51b3\u4e25\u91cd\u7684\u6d3b\u6027\u95ee\u9898\u662f\u4e0d\u5408\u7406\u7684\u3002\u5728\u627e\u5230\u5e76\u4fee\u590d\u6f5c\u5728\u539f\u56e0\u4e4b\u524d\uff0c\u95ee\u9898\u5f88\u53ef\u80fd\u4f1a\u518d\u6b21\u51fa\u73b0\u3002"),(0,a.kt)("p",null,"In summary, do not depend on the thread scheduler for the correctness of your program. The resulting program will be neither robust nor portable. As a corollary, do not rely on Thread.yield or thread priorities. These facilities are merely hints to the scheduler. Thread priorities may be used sparingly to improve the quality of service of an already working program, but they should never be used to \u201cfix\u201d a program that barely works."),(0,a.kt)("p",null,"\u603b\u4e4b\uff0c\u4e0d\u8981\u4f9d\u8d56\u7ebf\u7a0b\u8c03\u5ea6\u5668\u6765\u5224\u65ad\u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u3002\u751f\u6210\u7684\u7a0b\u5e8f\u65e2\u4e0d\u5065\u58ee\u4e5f\u4e0d\u53ef\u79fb\u690d\u3002\u56e0\u6b64\uff0c\u4e0d\u8981\u4f9d\u8d56 ",(0,a.kt)("inlineCode",{parentName:"p"},"Thread.yield")," \u6216\u7ebf\u7a0b\u4f18\u5148\u7ea7\u3002\u8fd9\u4e9b\u5de5\u5177\u53ea\u662f\u5bf9\u8c03\u5ea6\u5668\u7684\u63d0\u793a\u3002\u7ebf\u7a0b\u4f18\u5148\u7ea7\u53ef\u4ee5\u5c11\u91cf\u5730\u7528\u4e8e\u63d0\u9ad8\u5df2\u7ecf\u5de5\u4f5c\u7684\u7a0b\u5e8f\u7684\u670d\u52a1\u8d28\u91cf\uff0c\u4f46\u7edd\u4e0d\u5e94\u8be5\u7528\u4e8e\u300c\u4fee\u590d\u300d\u51e0\u4e4e\u4e0d\u80fd\u5de5\u4f5c\u7684\u7a0b\u5e8f\u3002"),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"./Chapter-11/Chapter-11-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,a.kt)("a",{parentName:"strong",href:"./Chapter-11/Chapter-11-Item-83-Use-lazy-initialization-judiciously"},"Item 83: Use lazy initialization judiciously\uff08\u660e\u667a\u5730\u4f7f\u7528\u5ef6\u8fdf\u521d\u59cb\u5316\uff09"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,a.kt)("a",{parentName:"strong",href:"./Chapter-12/Chapter-12-Introduction"},"Chapter 12 Introduction\uff08\u7ae0\u8282\u4ecb\u7ecd\uff09")))))}u.isMDXComponent=!0}}]);