"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1560],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||i;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9063:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},s=void 0,o={unversionedId:"Books/EffectiveJava3/Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters",id:"Books/EffectiveJava3/Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters",title:"Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters",description:"Chapter 2. Creating and Destroying Objects\uff08\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\uff09",source:"@site/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters.md",sourceDirName:"Books/EffectiveJava3/Chapter-2",slug:"/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters",permalink:"/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors",permalink:"/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors"},next:{title:"Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type",permalink:"/docs/Books/EffectiveJava3/Chapter-2/Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"}},l={},c=[{value:"Chapter 2. Creating and Destroying Objects\uff08\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\uff09",id:"chapter-2-creating-and-destroying-objects\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61",level:2},{value:"Item 2: Consider a builder when faced with many constructor parameters\uff08\u5f53\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6\uff0c\u8003\u8651\u6539\u7528\u6784\u5efa\u5668\uff09",id:"item-2-consider-a-builder-when-faced-with-many-constructor-parameters\u5f53\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6\u8003\u8651\u6539\u7528\u6784\u5efa\u5668",level:3},{value:"<strong>\u968f\u7b14</strong>",id:"\u968f\u7b14",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"chapter-2-creating-and-destroying-objects\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61"},"Chapter 2. Creating and Destroying Objects\uff08\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\uff09"),(0,r.kt)("h3",{id:"item-2-consider-a-builder-when-faced-with-many-constructor-parameters\u5f53\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6\u8003\u8651\u6539\u7528\u6784\u5efa\u5668"},"Item 2: Consider a builder when faced with many constructor parameters\uff08\u5f53\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6\uff0c\u8003\u8651\u6539\u7528\u6784\u5efa\u5668\uff09"),(0,r.kt)("p",null,"Static factories and constructors share a limitation: they do not scale well to large numbers of optional parameters. Consider the case of a class representing the Nutrition Facts label that appears on packaged foods. These labels have a few required fields\u2014serving size, servings per container, and calories per serving\u2014 and more than twenty optional fields\u2014total fat, saturated fat, trans fat,cholesterol, sodium, and so on. Most products have nonzero values for only a few of these optional fields."),(0,r.kt)("p",null,"\u9759\u6001\u5de5\u5382\u548c\u6784\u9020\u51fd\u6570\u90fd\u6709\u4e00\u4e2a\u5c40\u9650\uff1a\u5b83\u4eec\u4e0d\u80fd\u5bf9\u5927\u91cf\u53ef\u9009\u53c2\u6570\u505a\u5f88\u597d\u7684\u6269\u5c55\u3002\u4ee5\u4e00\u4e2a\u7c7b\u4e3a\u4f8b\uff0c\u5b83\u8868\u793a\u5305\u88c5\u98df\u54c1\u4e0a\u7684\u8425\u517b\u6807\u7b7e\u3002\u8fd9\u4e9b\u6807\u7b7e\u4e0a\u6709\u4e00\u4e9b\u5b57\u6bb5\u662f\u5fc5\u9700\u7684\uff0c\u5982\uff1a\u51c0\u542b\u91cf\u3001\u6bdb\u91cd\u548c\u6bcf\u5355\u4f4d\u4efd\u91cf\u7684\u5361\u8def\u91cc\uff0c\u53e6\u6709\u8d85\u8fc7 20 \u4e2a\u53ef\u9009\u7684\u5b57\u6bb5\uff0c\u5982\uff1a\u603b\u8102\u80aa\u3001\u9971\u548c\u8102\u80aa\u3001\u53cd\u5f0f\u8102\u80aa\u3001\u80c6\u56fa\u9187\u3001\u94a0\u7b49\u7b49\u3002\u5927\u591a\u6570\u4ea7\u54c1\u53ea\u6709\u8fd9\u4e9b\u53ef\u9009\u5b57\u6bb5\u4e2d\u7684\u5c11\u6570\uff0c\u4e14\u5177\u6709\u975e\u96f6\u503c\u3002"),(0,r.kt)("p",null,"What sort of constructors or static factories should you write for such a class?Traditionally, programmers have used the telescoping constructor pattern, in which you provide a constructor with only the required parameters, another with a single optional parameter, a third with two optional parameters, and so on,culminating in a constructor with all the optional parameters. Here\u2019s how it looks in practice. For brevity\u2019s sake, only four optional fields are shown:"),(0,r.kt)("p",null,"\u5e94\u8be5\u4e3a\u8fd9\u6837\u7684\u7c7b\u7f16\u5199\u4ec0\u4e48\u79cd\u7c7b\u7684\u6784\u9020\u51fd\u6570\u6216\u9759\u6001\u5de5\u5382\u5462\uff1f\u4f20\u7edf\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u53ef\u4f38\u7f29\u6784\u9020\u51fd\u6570\uff0c\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e2d\uff0c\u53ea\u5411\u6784\u9020\u51fd\u6570\u63d0\u4f9b\u5fc5\u9700\u7684\u53c2\u6570\u3002\u5373\uff0c\u5411\u7b2c\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u63d0\u4f9b\u5355\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5411\u7b2c\u4e8c\u4e2a\u6784\u9020\u51fd\u6570\u63d0\u4f9b\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u540e\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u662f\u5177\u6709\u6240\u6709\u53ef\u9009\u53c2\u6570\u7684\u3002\u8fd9\u662f\u5b83\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6837\u5b50\u3002\u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u53ea\u5c55\u793a\u5177\u5907\u56db\u4e2a\u53ef\u9009\u5b57\u6bb5\u7684\u60c5\u51b5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Telescoping constructor pattern - does not scale well!\npublic class NutritionFacts {\n    private final int servingSize; // (mL) required\n    private final int servings; // (per container) required\n    private final int calories; // (per serving) optional\n    private final int fat; // (g/serving) optional\n    private final int sodium; // (mg/serving) optional\n    private final int carbohydrate; // (g/serving) optional\n\n    public NutritionFacts(int servingSize, int servings) {\n        this(servingSize, servings, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings, int calories) {\n        this(servingSize, servings, calories, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings, int calories, int fat) {\n        this(servingSize, servings, calories, fat, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings, int calories, int fat, int sodium) {\n        this(servingSize, servings, calories, fat, sodium, 0);\n    }\n\n    public NutritionFacts(int servingSize, int servings, int calories, int fat, int sodium, int carbohydrate) {\n        this.servingSize = servingSize;\n        this.servings = servings;\n        this.calories = calories;\n        this.fat = fat;\n        this.sodium = sodium;\n        this.carbohydrate = carbohydrate;\n    }\n}\n")),(0,r.kt)("p",null,"When you want to create an instance, you use the constructor with the shortest parameter list containing all the parameters you want to set:"),(0,r.kt)("p",null,"\u5f53\u4f60\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5305\u542b\u6240\u9700\u53c2\u6570\u7684\u6700\u77ed\u53c2\u6570\u5217\u8868\u7684\u6784\u9020\u51fd\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NutritionFacts cocaCola =new NutritionFacts(240, 8, 100, 0, 35, 27);\n")),(0,r.kt)("p",null,"Typically this constructor invocation will require many parameters that you don\u2019t want to set, but you\u2019re forced to pass a value for them anyway. In this case,we passed a value of 0 for fat. With \u201conly\u201d six parameters this may not seem so bad, but it quickly gets out of hand as the number of parameters increases."),(0,r.kt)("p",null,"\u901a\u5e38\uff0c\u8fd9\u4e2a\u6784\u9020\u51fd\u6570\u5305\u542b\u8bb8\u591a\u989d\u5916\u7684\u53c2\u6570\uff0c\u4f46\u662f\u4f60\u5fc5\u987b\u4e3a\u5b83\u4eec\u4f20\u9012\u4e00\u4e2a\u503c\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a fat \u4f20\u9012\u4e86\u4e00\u4e2a\u503c 0\u3002\u53ea\u6709\u516d\u4e2a\u53c2\u6570\u65f6\uff0c\u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u4e0d\u90a3\u4e48\u7cdf\uff0c\u4f46\u968f\u7740\u53c2\u6570\u7684\u589e\u52a0\uff0c\u5b83\u5f88\u5feb\u5c31\u4f1a\u5931\u63a7\u3002"),(0,r.kt)("p",null,"In short, ",(0,r.kt)("strong",{parentName:"p"},"the telescoping constructor pattern works, but it is hard to write client code when there are many parameters, and harder still to read it.")," The reader is left wondering what all those values mean and must carefully count parameters to find out. Long sequences of identically typed parameters can cause subtle bugs. If the client accidentally reverses two such parameters, the compiler won\u2019t complain, but the program will misbehave at runtime (Item 51)."),(0,r.kt)("p",null,"\u7b80\u5355\u5730\u8bf4\uff0c",(0,r.kt)("strong",{parentName:"p"},"\u53ef\u4f38\u7f29\u6784\u9020\u51fd\u6570\u6a21\u5f0f\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u662f\u5f53\u6709\u5f88\u591a\u53c2\u6570\u65f6\uff0c\u7f16\u5199\u5ba2\u6237\u7aef\u4ee3\u7801\u662f\u5f88\u56f0\u96be\u7684\uff0c\u800c\u4e14\u8bfb\u8d77\u6765\u66f4\u56f0\u96be\u3002")," \u8bfb\u8005\u60f3\u77e5\u9053\u6240\u6709\u8fd9\u4e9b\u503c\u662f\u4ec0\u4e48\u610f\u601d\uff0c\u5fc5\u987b\u4ed4\u7ec6\u6e05\u70b9\u53c2\u6570\u3002\u76f8\u540c\u7c7b\u578b\u53c2\u6570\u7684\u957f\u5e8f\u5217\u4f1a\u5bfc\u81f4\u7ec6\u5fae\u7684\u9519\u8bef\u3002\u5982\u679c\u5ba2\u6237\u7aef\u4e0d\u5c0f\u5fc3\u5012\u8f6c\u4e86\u4e24\u4e2a\u8fd9\u6837\u7684\u53c2\u6570\uff0c\u7f16\u8bd1\u5668\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f1a\u5728\u8fd0\u884c\u65f6\u51fa\u9519\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-8-Item-51-Design-method-signatures-carefully"},"Item-51"),"\uff09\u3002"),(0,r.kt)("p",null,"A second alternative when you\u2019re faced with many optional parameters in a constructor is the JavaBeans pattern, in which you call a parameterless constructor to create the object and then call setter methods to set each required parameter and each optional parameter of interest:"),(0,r.kt)("p",null,"\u5f53\u4f60\u5728\u6784\u9020\u51fd\u6570\u4e2d\u9047\u5230\u8bb8\u591a\u53ef\u9009\u53c2\u6570\u65f6\uff0c\u53e6\u4e00\u79cd\u9009\u62e9\u662f JavaBean \u6a21\u5f0f\uff0c\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e2d\uff0c\u4f60\u8c03\u7528\u4e00\u4e2a\u65e0\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528 setter \u65b9\u6cd5\u6765\u8bbe\u7f6e\u6bcf\u4e2a\u6240\u9700\u7684\u53c2\u6570\u548c\u6bcf\u4e2a\u611f\u5174\u8da3\u7684\u53ef\u9009\u53c2\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// JavaBeans Pattern - allows inconsistency, mandates mutability\npublic class NutritionFacts {\n    // Parameters initialized to default values (if any)\n    private int servingSize = -1; // Required; no default value\n    private int servings = -1; // Required; no default value\n    private int calories = 0;\n    private int fat = 0;\n    private int sodium = 0;\n    private int carbohydrate = 0;\n    public NutritionFacts() { }\n    // Setters\n    public void setServingSize(int val) { servingSize = val; }\n    public void setServings(int val) { servings = val; }\n    public void setCalories(int val) { calories = val; }\n    public void setFat(int val) { fat = val; }\n    public void setSodium(int val) { sodium = val; }\n    public void setCarbohydrate(int val) { carbohydrate = val; }\n}\n")),(0,r.kt)("p",null,"This pattern has none of the disadvantages of the telescoping constructor pattern.It is easy, if a bit wordy, to create instances, and easy to read the resulting code:"),(0,r.kt)("p",null,"\u8fd9\u4e2a\u6a21\u5f0f\u6ca1\u6709\u53ef\u4f38\u7f29\u6784\u9020\u51fd\u6570\u6a21\u5f0f\u7684\u7f3a\u70b9\u3002\u521b\u5efa\u5b9e\u4f8b\u5f88\u5bb9\u6613\uff0c\u867d\u7136\u6709\u70b9\u5197\u957f\uff0c\u4f46\u5f88\u5bb9\u6613\u9605\u8bfb\u751f\u6210\u7684\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NutritionFacts cocaCola = new NutritionFacts();\ncocaCola.setServingSize(240);\ncocaCola.setServings(8);\ncocaCola.setCalories(100);\ncocaCola.setSodium(35);\ncocaCola.setCarbohydrate(27);\n")),(0,r.kt)("p",null,"Unfortunately, the JavaBeans pattern has serious disadvantages of its own. Because construction is split across multiple calls, a JavaBean may be in an inconsistent state partway through its construction. The class does not have the option of enforcing consistency merely by checking the validity of the constructor parameters. Attempting to use an object when it\u2019s in an inconsistent state may cause failures that are far removed from the code containing the bug and hence difficult to debug. A related disadvantage is that the JavaBeans pattern precludes the possibility of making a class immutable (Item 17) and requires added effort on the part of the programmer to ensure thread safety."),(0,r.kt)("p",null,"\u4e0d\u5e78\u7684\u662f\uff0cJavaBean \u6a21\u5f0f\u672c\u8eab\u6709\u4e25\u91cd\u7684\u7f3a\u70b9\u3002\u56e0\u4e3a\u6784\u5efa\u662f\u5728\u591a\u4e2a\u8c03\u7528\u4e4b\u95f4\u8fdb\u884c\u7684\uff0c\u6240\u4ee5 JavaBean \u53ef\u80fd\u5728\u6784\u5efa\u7684\u8fc7\u7a0b\u4e2d\u5904\u4e8e\u4e0d\u4e00\u81f4\u7684\u72b6\u6001\u3002\u8be5\u7c7b\u4e0d\u80fd\u4ec5\u901a\u8fc7\u68c0\u67e5\u6784\u9020\u51fd\u6570\u53c2\u6570\u7684\u6709\u6548\u6027\u6765\u5f3a\u5236\u4e00\u81f4\u6027\u3002\u5728\u4e0d\u4e00\u81f4\u7684\u72b6\u6001\u4e0b\u5c1d\u8bd5\u4f7f\u7528\u5bf9\u8c61\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u53d1\u751f\uff0c\u800c\u5305\u542b\u8fd9\u4e9b\u9519\u8bef\u7684\u4ee3\u7801\u5f88\u96be\u8c03\u8bd5\u3002\u4e00\u4e2a\u76f8\u5173\u7684\u7f3a\u70b9\u662f\uff0cJavaBean \u6a21\u5f0f\u6392\u9664\u4e86\u4f7f\u7c7b\u4e0d\u53ef\u53d8\u7684\u53ef\u80fd\u6027\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-4-Item-17-Minimize-mutability"},"Item-17"),"\uff09\uff0c\u5e76\u4e14\u9700\u8981\u7a0b\u5e8f\u5458\u989d\u5916\u7684\u52aa\u529b\u6765\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u3002"),(0,r.kt)("p",null,"It is possible to reduce these disadvantages by manually \u201cfreezing\u201d the object when its construction is complete and not allowing it to be used until frozen, but this variant is unwieldy and rarely used in practice. Moreover, it can cause errors at runtime because the compiler cannot ensure that the programmer calls the freeze method on an object before using it."),(0,r.kt)("p",null,"\u901a\u8fc7\u5728\u5bf9\u8c61\u6784\u5efa\u5b8c\u6210\u65f6\u624b\u52a8\u300c\u51bb\u7ed3\u300d\u5bf9\u8c61\uff0c\u5e76\u5728\u51bb\u7ed3\u4e4b\u524d\u4e0d\u5141\u8bb8\u4f7f\u7528\u5bf9\u8c61\uff0c\u53ef\u4ee5\u51cf\u5c11\u8fd9\u4e9b\u7f3a\u9677\uff0c\u4f46\u662f\u8fd9\u79cd\u53d8\u901a\u65b9\u5f0f\u5f88\u7b28\u62d9\uff0c\u5728\u5b9e\u8df5\u4e2d\u5f88\u5c11\u4f7f\u7528\u3002\u6b64\u5916\uff0c\u5b83\u53ef\u80fd\u5728\u8fd0\u884c\u65f6\u5bfc\u81f4\u9519\u8bef\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4e0d\u80fd\u786e\u4fdd\u7a0b\u5e8f\u5458\u5728\u4f7f\u7528\u5bf9\u8c61\u4e4b\u524d\u8c03\u7528\u5b83\u7684 freeze \u65b9\u6cd5\u3002"),(0,r.kt)("p",null,"Luckily, there is a third alternative that combines the safety of the telescoping constructor pattern with the readability of the JavaBeans pattern. It is a form of the Builder pattern ","[Gamma95]",". Instead of making the desired object directly,the client calls a constructor (or static factory) with all of the required parameters and gets a builder object. Then the client calls setter-like methods on the builder object to set each optional parameter of interest. Finally, the client calls a parameterless build method to generate the object, which is typically immutable. The builder is typically a static member class (Item 24) of the class itbuilds. Here\u2019s how it looks in practice:"),(0,r.kt)("p",null,"\u5e78\u8fd0\u7684\u662f\uff0c\u8fd8\u6709\u7b2c\u4e09\u79cd\u9009\u62e9\uff0c\u5b83\u7ed3\u5408\u4e86\u53ef\u4f38\u7f29\u6784\u9020\u51fd\u6570\u6a21\u5f0f\u7684\u5b89\u5168\u6027\u548c JavaBean \u6a21\u5f0f\u7684\u53ef\u8bfb\u6027\u3002\u5b83\u662f\u5efa\u9020\u8005\u6a21\u5f0f\u7684\u4e00\u79cd\u5f62\u5f0f ","[Gamma95]","\u3002\u5ba2\u6237\u7aef\u4e0d\u76f4\u63a5\u751f\u6210\u6240\u9700\u7684\u5bf9\u8c61\uff0c\u800c\u662f\u4f7f\u7528\u6240\u6709\u5fc5\u9700\u7684\u53c2\u6570\u8c03\u7528\u6784\u9020\u51fd\u6570\uff08\u6216\u9759\u6001\u5de5\u5382\uff09\uff0c\u5e76\u83b7\u5f97\u4e00\u4e2a builder \u5bf9\u8c61\u3002\u7136\u540e\uff0c\u5ba2\u6237\u7aef\u5728\u6784\u5efa\u5668\u5bf9\u8c61\u4e0a\u8c03\u7528\u50cf setter \u8fd9\u6837\u7684\u65b9\u6cd5\u6765\u8bbe\u7f6e\u6bcf\u4e2a\u611f\u5174\u8da3\u7684\u53ef\u9009\u53c2\u6570\u3002\u6700\u540e\uff0c\u5ba2\u6237\u7aef\u8c03\u7528\u4e00\u4e2a\u65e0\u53c2\u6570\u7684\u6784\u5efa\u65b9\u6cd5\u6765\u751f\u6210\u5bf9\u8c61\uff0c\u8fd9\u901a\u5e38\u662f\u4e0d\u53ef\u53d8\u7684\u3002\u6784\u5efa\u5668\u901a\u5e38\u662f\u5b83\u6784\u5efa\u7684\u7c7b\u7684\u9759\u6001\u6210\u5458\u7c7b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic"},"Item-24"),"\uff09\u3002\u4e0b\u9762\u662f\u5b83\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u7684\u6837\u5b50\uff1a"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u82e5\u5c06\u8be5\u6848\u4f8b\u300c\u6784\u5efa\u673a\u5236\u300d\u72ec\u7acb\u51fa\u6765\uff0c\u6216\u80fd\u5e7f\u6cdb\u9002\u5e94\u76f8\u4f3c\u7ed3\u6784\u7684\u6784\u5efa\u9700\u6c42\uff0c\u8be6\u89c1\u6587\u672b\u968f\u7b14")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Builder Pattern\npublic class NutritionFacts {\n    private final int servingSize;\n    private final int servings;\n    private final int calories;\n    private final int fat;\n    private final int sodium;\n    private final int carbohydrate;\n\n    public static class Builder {\n        // Required parameters\n        private final int servingSize;\n        private final int servings;\n        // Optional parameters - initialized to default values\n        private int calories = 0;\n        private int fat = 0;\n        private int sodium = 0;\n        private int carbohydrate = 0;\n\n        public Builder(int servingSize, int servings) {\n            this.servingSize = servingSize;\n            this.servings = servings;\n        }\n\n        public Builder calories(int val) {\n            calories = val;\n            return this;\n        }\n\n        public Builder fat(int val) {\n            fat = val;\n            return this;\n        }\n\n        public Builder sodium(int val) {\n            sodium = val;\n            return this;\n        }\n\n        public Builder carbohydrate(int val) {\n            carbohydrate = val;\n            return this;\n        }\n\n        public NutritionFacts build() {\n            return new NutritionFacts(this);\n        }\n    }\n\n    private NutritionFacts(Builder builder) {\n        servingSize = builder.servingSize;\n        servings = builder.servings;\n        calories = builder.calories;\n        fat = builder.fat;\n        sodium = builder.sodium;\n        carbohydrate = builder.carbohydrate;\n    }\n}\n")),(0,r.kt)("p",null,"The NutritionFacts class is immutable, and all parameter default values are in one place. The builder\u2019s setter methods return the builder itself so that invocations can be chained, resulting in a fluent API. Here\u2019s how the client code looks:"),(0,r.kt)("p",null,"NutritionFacts \u7c7b\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u6240\u6709\u53c2\u6570\u9ed8\u8ba4\u503c\u90fd\u5728\u4e00\u4e2a\u4f4d\u7f6e\u3002\u6784\u5efa\u5668\u7684 setter \u65b9\u6cd5\u8fd4\u56de\u6784\u5efa\u5668\u672c\u8eab\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u6d41\u7545\u7684 API\u3002\u4e0b\u9762\u662f\u5ba2\u6237\u7aef\u4ee3\u7801\u7684\u6837\u5b50\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8)\n.calories(100).sodium(35).carbohydrate(27).build();\n")),(0,r.kt)("p",null,"This client code is easy to write and, more importantly, easy to read. The Builder pattern simulates named optional parameters as found in Python and Scala."),(0,r.kt)("p",null,"\u8be5\u5ba2\u6237\u7aef\u4ee3\u7801\u6613\u4e8e\u7f16\u5199\uff0c\u66f4\u91cd\u8981\u7684\u662f\u6613\u4e8e\u9605\u8bfb\u3002\u5efa\u9020\u8005\u6a21\u5f0f\u6a21\u62df Python \u548c Scala \u4e2d\u7684\u53ef\u9009\u53c2\u6570\u3002"),(0,r.kt)("p",null,"Validity checks were omitted for brevity. To detect invalid parameters as soon as possible, check parameter validity in the builder\u2019s constructor and methods.Check invariants involving multiple parameters in the constructor invoked by the build method. To ensure these invariants against attack, do the checks on object fields after copying parameters from the builder (Item 50). If a check fails, throw an IllegalArgumentException (Item 72) whose detail message indicates which parameters are invalid (Item 75)."),(0,r.kt)("p",null,"\u4e3a\u4e86\u7b80\u6d01\uff0c\u7701\u7565\u4e86\u6709\u6548\u6027\u68c0\u67e5\u3002\u4e3a\u4e86\u5c3d\u5feb\u68c0\u6d4b\u65e0\u6548\u7684\u53c2\u6570\uff0c\u8bf7\u68c0\u67e5\u6784\u5efa\u5668\u7684\u6784\u9020\u51fd\u6570\u548c\u65b9\u6cd5\u4e2d\u7684\u53c2\u6570\u6709\u6548\u6027\u3002\u68c0\u67e5\u6784\u5efa\u65b9\u6cd5\u8c03\u7528\u7684\u6784\u9020\u51fd\u6570\u4e2d\u6d89\u53ca\u591a\u4e2a\u53c2\u6570\u7684\u4e0d\u53d8\u91cf\u3002\u4e3a\u4e86\u786e\u4fdd\u8fd9\u4e9b\u4e0d\u53d8\u91cf\u4e0d\u53d7\u653b\u51fb\uff0c\u5728\u4ece\u6784\u5efa\u5668\u590d\u5236\u53c2\u6570\u4e4b\u540e\u68c0\u67e5\u5bf9\u8c61\u5b57\u6bb5\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-8-Item-50-Make-defensive-copies-when-needed"},"Item-50"),"\uff09\u3002\u5982\u679c\u68c0\u67e5\u5931\u8d25\uff0c\u629b\u51fa\u4e00\u4e2a IllegalArgumentException\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-72-Favor-the-use-of-standard-exceptions"},"Item-72"),"\uff09\uff0c\u5b83\u7684\u8be6\u7ec6\u6d88\u606f\u6307\u793a\u54ea\u4e9b\u53c2\u6570\u65e0\u6548\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-10/Chapter-10-Item-75-Include-failure-capture-information-in-detail-messages"},"Item-75"),"\uff09\u3002"),(0,r.kt)("p",null,"The Builder pattern is well suited to class hierarchies. Use a parallel hierarchy of builders, each nested in the corresponding class. Abstract classes have abstract builders; concrete classes have concrete builders. For example,consider an abstract class at the root of a hierarchy representing various kinds of pizza:"),(0,r.kt)("p",null,"\u5efa\u9020\u8005\u6a21\u5f0f\u975e\u5e38\u9002\u5408\u4e8e\u7c7b\u5c42\u6b21\u7ed3\u6784\u3002\u4f7f\u7528\u6784\u5efa\u5668\u7684\u5e76\u884c\u5c42\u6b21\u7ed3\u6784\uff0c\u6bcf\u4e2a\u6784\u5efa\u5668\u90fd\u5d4c\u5957\u5728\u76f8\u5e94\u7684\u7c7b\u4e2d\u3002\u62bd\u8c61\u7c7b\u6709\u62bd\u8c61\u7c7b\u6784\u5efa\u5668\uff1b\u5177\u4f53\u7c7b\u6709\u5177\u4f53\u7c7b\u6784\u5efa\u5668\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u5728\u5c42\u6b21\u7ed3\u6784\u5904\u4e8e\u6700\u4f4e\u7aef\u7684\u62bd\u8c61\u7c7b\uff0c\u5b83\u4ee3\u8868\u5404\u79cd\u6bd4\u8428\u997c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import java.util.EnumSet;\nimport java.util.Objects;\nimport java.util.Set;\n\n// Builder pattern for class hierarchies\npublic abstract class Pizza {\n    public enum Topping {HAM, MUSHROOM, ONION, PEPPER, SAUSAGE}\n\n    final Set<Topping> toppings;\n\n    abstract static class Builder<T extends Builder<T>> {\n        EnumSet<Topping> toppings = EnumSet.noneOf(Topping.class);\n\n        public T addTopping(Topping topping) {\n            toppings.add(Objects.requireNonNull(topping));\n            return self();\n        }\n\n        abstract Pizza build();\n\n        // Subclasses must override this method to return "this"\n        protected abstract T self();\n    }\n\n    Pizza(Builder<?> builder) {\n        toppings = builder.toppings.clone(); // See Item 50\n    }\n}\n')),(0,r.kt)("p",null,"Note that Pizza.Builder is a generic type with a recursive type parameter (Item 30). This, along with the abstract self method, allows method chaining to work properly in subclasses, without the need for casts. This workaround for the fact that Java lacks a self type is known as the simulated self-type idiom. Here are two concrete subclasses of Pizza, one of which represents a standard New-York-style pizza, the other a calzone. The former has a required size parameter, while the latter lets you specify whether sauce should be inside or out:"),(0,r.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"Pizza.Builder")," \u662f\u5177\u6709\u9012\u5f52\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u7c7b\u578b\uff08",(0,r.kt)("a",{parentName:"p",href:"./Chapter-5-Item-31-Use-bounded-wildcards-to-increase-API-flexibility"},"Item-31"),"\uff09\u3002\u8fd9\u4e0e\u62bd\u8c61 self \u65b9\u6cd5\u4e00\u8d77\uff0c\u5141\u8bb8\u65b9\u6cd5\u94fe\u63a5\u5728\u5b50\u7c7b\u4e2d\u6b63\u5e38\u5de5\u4f5c\uff0c\u800c\u4e0d\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u3002\u5bf9\u4e8e Java \u7f3a\u5c11\u81ea\u7c7b\u578b\u8fd9\u4e00\u4e8b\u5b9e\uff0c\u8fd9\u79cd\u53d8\u901a\u65b9\u6cd5\u79f0\u4e3a\u6a21\u62df\u81ea\u7c7b\u578b\u4e60\u60ef\u7528\u6cd5\u3002\u8fd9\u91cc\u6709\u4e24\u4e2a\u5177\u4f53\u7684\u6bd4\u8428\u5b50\u7c7b\uff0c\u4e00\u4e2a\u662f\u6807\u51c6\u7684\u7ebd\u7ea6\u98ce\u683c\u7684\u6bd4\u8428\uff0c\u53e6\u4e00\u4e2a\u662f calzone\u3002\u524d\u8005\u6709\u4e00\u4e2a\u5fc5\u9700\u7684\u5c3a\u5bf8\u5927\u5c0f\u53c2\u6570\uff0c\u800c\u540e\u8005\u8ba9\u4f60\u6307\u5b9a\u9171\u6599\u5e94\u8be5\u653e\u5728\u91cc\u9762\u8fd8\u662f\u5916\u9762\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import java.util.Objects;\n\npublic class NyPizza extends Pizza {\n    public enum Size {SMALL, MEDIUM, LARGE}\n\n    private final Size size;\n\n    public static class Builder extends Pizza.Builder<Builder> {\n        private final Size size;\n\n        public Builder(Size size) {\n            this.size = Objects.requireNonNull(size);\n        }\n\n        @Override\n        public NyPizza build() {\n            return new NyPizza(this);\n        }\n\n        @Override\n        protected Builder self() {\n            return this;\n        }\n    }\n\n    private NyPizza(Builder builder) {\n        super(builder);\n        size = builder.size;\n    }\n}\n\npublic class Calzone extends Pizza {\n    private final boolean sauceInside;\n\n    public static class Builder extends Pizza.Builder<Builder> {\n        private boolean sauceInside = false; // Default\n\n        public Builder sauceInside() {\n            sauceInside = true;\n            return this;\n        }\n\n        @Override\n        public Calzone build() {\n            return new Calzone(this);\n        }\n\n        @Override\n        protected Builder self() {\n            return this;\n        }\n    }\n\n    private Calzone(Builder builder) {\n        super(builder);\n        sauceInside = builder.sauceInside;\n    }\n}\n")),(0,r.kt)("p",null,"Note that the build method in each subclass\u2019s builder is declared to return the correct subclass: the build method of NyPizza.Builder returns NyPizza, while the one in Calzone.Builder returns Calzone. This technique, wherein a subclass method is declared to return a subtype of the return type declared in the super-class, is known as covariant return typing. It allows clients to use these builders without the need for casting.The client code for these \u201chierarchical builders\u201d is essentially identical to the code for the simple NutritionFacts builder. The example client code shown next assumes static imports on enum constants for brevity:"),(0,r.kt)("p",null,"\u6ce8\u610f\uff0c\u6bcf\u4e2a\u5b50\u7c7b\u7684\u6784\u5efa\u5668\u4e2d\u7684\u6784\u5efa\u65b9\u6cd5\u58f0\u660e\u4e3a\u8fd4\u56de\u6b63\u786e\u7684\u5b50\u7c7b\uff1a\u6784\u5efa\u7684\u65b9\u6cd5 ",(0,r.kt)("inlineCode",{parentName:"p"},"NyPizza.Builder")," \u8fd4\u56de NyPizza\uff0c\u800c\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"Calzone.Builder")," \u5219\u8fd4\u56de Calzone\u3002\u8fd9\u79cd\u6280\u672f\u79f0\u4e3a\u534f\u53d8\u8fd4\u56de\u7c7b\u578b\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b50\u7c7b\u65b9\u6cd5\u58f0\u660e\u4e3a\u8fd4\u56de\u8d85\u7c7b\u4e2d\u58f0\u660e\u7684\u8fd4\u56de\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\u3002\u5b83\u5141\u8bb8\u5ba2\u6237\u4f7f\u7528\u8fd9\u4e9b\u6784\u5efa\u5668\uff0c\u800c\u4e0d\u9700\u8981\u5f3a\u5236\u8f6c\u6362\u3002\u8fd9\u4e9b\u300c\u5c42\u6b21\u6784\u5efa\u5668\u300d\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u4e0e\u7b80\u5355\u7684 NutritionFacts \u6784\u5efa\u5668\u7684\u4ee3\u7801\u57fa\u672c\u76f8\u540c\u3002\u4e3a\u7b80\u6d01\u8d77\u89c1\uff0c\u4e0b\u9762\u663e\u793a\u7684\u793a\u4f8b\u5ba2\u6237\u7aef\u4ee3\u7801\u5047\u5b9a\u679a\u4e3e\u5e38\u91cf\u4e0a\u7684\u9759\u6001\u5bfc\u5165\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NyPizza pizza = new NyPizza.Builder(SMALL)\n.addTopping(SAUSAGE).addTopping(ONION).build();\nCalzone calzone = new Calzone.Builder()\n.addTopping(HAM).sauceInside().build();\n")),(0,r.kt)("p",null,"A minor advantage of builders over constructors is that builders can have multiple varargs parameters because each parameter is specified in its own method. Alternatively, builders can aggregate the parameters passed into multiple calls to a method into a single field, as demonstrated in the addTopping method earlier."),(0,r.kt)("p",null,"\u4e0e\u6784\u9020\u51fd\u6570\u76f8\u6bd4\uff0c\u6784\u5efa\u5668\u7684\u4e00\u4e2a\u5c0f\u4f18\u70b9\u662f\u6784\u5efa\u5668\u53ef\u4ee5\u6709\u591a\u4e2a\u53d8\u91cf\u53c2\u6570\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u53c2\u6570\u90fd\u662f\u5728\u81ea\u5df1\u7684\u65b9\u6cd5\u4e2d\u6307\u5b9a\u7684\u3002\u6216\u8005\uff0c\u6784\u5efa\u5668\u53ef\u4ee5\u5c06\u4f20\u9012\u7ed9\u4e00\u4e2a\u65b9\u6cd5\u7684\u591a\u4e2a\u8c03\u7528\u7684\u53c2\u6570\u805a\u5408\u5230\u5355\u4e2a\u5b57\u6bb5\u4e2d\uff0c\u5982\u524d\u9762\u7684 addTopping \u65b9\u6cd5\u4e2d\u6240\u793a\u3002"),(0,r.kt)("p",null,"The Builder pattern is quite flexible. A single builder can be used repeatedly to build multiple objects. The parameters of the builder can be tweaked between invocations of the build method to vary the objects that are created. A builder can fill in some fields automatically upon object creation, such as a serial number that increases each time an object is created."),(0,r.kt)("p",null,"\u5efa\u9020\u8005\u6a21\u5f0f\u975e\u5e38\u7075\u6d3b\u3002\u4e00\u4e2a\u6784\u5efa\u5668\u53ef\u4ee5\u53cd\u590d\u6784\u5efa\u591a\u4e2a\u5bf9\u8c61\u3002\u6784\u5efa\u5668\u7684\u53c2\u6570\u53ef\u4ee5\u5728\u6784\u5efa\u65b9\u6cd5\u7684\u8c03\u7528\u4e4b\u95f4\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u6539\u53d8\u521b\u5efa\u7684\u5bf9\u8c61\u3002\u6784\u5efa\u5668\u53ef\u4ee5\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u81ea\u52a8\u586b\u5145\u67d0\u4e9b\u5b57\u6bb5\uff0c\u4f8b\u5982\u5728\u6bcf\u6b21\u521b\u5efa\u5bf9\u8c61\u65f6\u589e\u52a0\u7684\u5e8f\u5217\u53f7\u3002"),(0,r.kt)("p",null,"The Builder pattern has disadvantages as well. In order to create an object,you must first create its builder. While the cost of creating this builder is unlikely to be noticeable in practice, it could be a problem in performance-critical situations. Also, the Builder pattern is more verbose than the telescoping constructor pattern, so it should be used only if there are enough parameters to make it worthwhile, say four or more. But keep in mind that you may want to add more parameters in the future. But if you start out with constructors or static factories and switch to a builder when the class evolves to the point where the number of parameters gets out of hand, the obsolete constructors or static factories will stick out like a sore thumb. Therefore, it\u2019s often better to start with a builder in the first place."),(0,r.kt)("p",null,"\u5efa\u9020\u8005\u6a21\u5f0f\u4e5f\u6709\u7f3a\u70b9\u3002\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f60\u5fc5\u987b\u9996\u5148\u521b\u5efa\u5b83\u7684\u6784\u5efa\u5668\u3002\u867d\u7136\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u521b\u5efa\u8fd9\u4e2a\u6784\u5efa\u5668\u7684\u6210\u672c\u53ef\u80fd\u5e76\u4e0d\u663e\u8457\uff0c\u4f46\u5728\u4ee5\u6027\u80fd\u4e3a\u5173\u952e\u7684\u573a\u666f\u4e0b\uff0c\u8fd9\u53ef\u80fd\u4f1a\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u800c\u4e14\uff0c\u5efa\u9020\u8005\u6a21\u5f0f\u6bd4\u53ef\u4f38\u7f29\u6784\u9020\u51fd\u6570\u6a21\u5f0f\u66f4\u5197\u957f\uff0c\u56e0\u6b64\u53ea\u6709\u5728\u6709\u8db3\u591f\u591a\u7684\u53c2\u6570\u65f6\u624d\u503c\u5f97\u4f7f\u7528\uff0c\u6bd4\u5982\u6709 4 \u4e2a\u6216\u66f4\u591a\u53c2\u6570\u65f6\uff0c\u624d\u5e94\u8be5\u4f7f\u7528\u5b83\u3002\u4f46\u662f\u8bf7\u8bb0\u4f4f\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u5c06\u6765\u6dfb\u52a0\u66f4\u591a\u7684\u53c2\u6570\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u4ee5\u6784\u9020\u51fd\u6570\u6216\u9759\u6001\u5de5\u5382\u5f00\u59cb\uff0c\u76f4\u81f3\u7c7b\u6269\u5c55\u5230\u53c2\u6570\u6570\u91cf\u65e0\u6cd5\u63a7\u5236\u7684\u7a0b\u5ea6\u65f6\uff0c\u4e5f\u4f1a\u5207\u6362\u5230\u6784\u5efa\u5668\uff0c\u4f46\u662f\u8fc7\u65f6\u7684\u6784\u9020\u51fd\u6570\u6216\u9759\u6001\u5de5\u5382\u5c06\u5f88\u96be\u5904\u7406\u3002\u56e0\u6b64\uff0c\u6700\u597d\u4e00\u5f00\u59cb\u5c31\u4ece\u6784\u5efa\u5668\u5f00\u59cb\u3002"),(0,r.kt)("p",null,"In summary, the Builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters, especially if many of the parameters are optional or of identical type. Client code is much easier to read and write with builders than with telescoping constructors, and builders are much safer than JavaBeans."),(0,r.kt)("p",null,"\u603b\u4e4b\uff0c\u5728\u8bbe\u8ba1\u6784\u9020\u51fd\u6570\u6216\u9759\u6001\u5de5\u5382\u7684\u7c7b\u65f6\uff0c\u5efa\u9020\u8005\u6a21\u5f0f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\uff0c\u7279\u522b\u662f\u5f53\u8bb8\u591a\u53c2\u6570\u662f\u53ef\u9009\u7684\u6216\u5177\u6709\u76f8\u540c\u7c7b\u578b\u65f6\u3002\u4e0e\u53ef\u4f38\u7f29\u6784\u9020\u51fd\u6570\u76f8\u6bd4\uff0c\u4f7f\u7528\u6784\u5efa\u5668\u5ba2\u6237\u7aef\u4ee3\u7801\u66f4\u5bb9\u6613\u8bfb\u5199\uff0c\u800c\u4e14\u6784\u5efa\u5668\u6bd4 JavaBean \u66f4\u5b89\u5168\u3002"),(0,r.kt)("h3",{id:"\u968f\u7b14"},(0,r.kt)("strong",{parentName:"h3"},"\u968f\u7b14")),(0,r.kt)("p",null,"\u6bcf\u4e2a\u5185\u90e8 Builder \u7c7b\u8981\u5bf9\u6bcf\u4e2a\u5b57\u6bb5\u5efa\u7acb\u76f8\u5e94\u65b9\u6cd5\uff0c\u4ee3\u7801\u6bd4\u8f83\u5197\u957f\u3002\u82e5\u5c06\u300c\u6784\u5efa\u673a\u5236\u300d\u72ec\u7acb\u51fa\u6765\uff0c\u6216\u80fd\u5e7f\u6cdb\u9002\u5e94\u76f8\u4f3c\u7ed3\u6784\u7684\u6784\u5efa\u9700\u6c42\u3002\u4ee5\u4e0b\u662f\u9488\u5bf9\u539f\u6587\u6848\u4f8b\u7684\u7b80\u8981\u4fee\u6539\uff0c\u4ec5\u4f9b\u53c2\u8003\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'class EntityCreator<T> {\n\n    private Class<T> classInstance;\n    private T entityObj;\n\n    public EntityCreator(Class<T> classInstance, Object... initParams) throws Exception {\n        this.classInstance = classInstance;\n        Class<?>[] paramTypes = new Class<?>[initParams.length];\n        for (int index = 0, length = initParams.length; index < length; index++) {\n            String checkStr = initParams[index].getClass().getSimpleName();\n            if (checkStr.contains("Integer")) {\n                paramTypes[index] = int.class;\n            }\n            if (checkStr.contains("Double")) {\n                paramTypes[index] = double.class;\n            }\n            if (checkStr.contains("Boolean")) {\n                paramTypes[index] = boolean.class;\n            }\n            if (checkStr.contains("String")) {\n                paramTypes[index] = initParams[index].getClass();\n            }\n        }\n        Constructor<T> constructor = classInstance.getDeclaredConstructor(paramTypes);\n        constructor.setAccessible(true);\n        this.entityObj = constructor.newInstance(initParams);\n    }\n\n    public EntityCreator<T> setValue(String paramName, Object paramValue) throws Exception {\n        Field field = classInstance.getDeclaredField(paramName);\n        field.setAccessible(true);\n        field.set(entityObj, paramValue);\n        return this;\n    }\n\n    public T build() {\n        return entityObj;\n    }\n}\n')),(0,r.kt)("p",null,"\u5982\u6b64\uff0c\u53ef\u79fb\u9664\u6574\u4e2a\u5185\u90e8 Builder \u7c7b\uff0cNutritionFacts \u7c7b\u79c1\u6709\u6784\u9020\u7684\u53c2\u6570\u4ec5\u5305\u62ec\u4e24\u4e2a\u5fc5\u586b\u7684 servingSize\u3001servings \u5b57\u6bb5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"public class NutritionFacts {\n    // Required parameters\n    private final int servingSize;\n    private final int servings;\n    // Optional parameters - initialized to default values\n    private int calories = 0;\n    private int fat = 0;\n    private int sodium = 0;\n    private int carbohydrate = 0;\n\n    private NutritionFacts(int servingSize, int servings) {\n        this.servingSize = servingSize;\n        this.servings = servings;\n    }\n}\n")),(0,r.kt)("p",null,"\u8be5\u6848\u4f8b\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u6539\u4e3a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'NutritionFacts cocaCola = new EntityCreator<>(NutritionFacts.class, 240, 8)\n        .setValue("calories", 100)\n        .setValue("sodium", 35)\n        .setValue("carbohydrate", 27).build();\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"./Chapter-2-Introduction"},"Back to contents of the chapter\uff08\u8fd4\u56de\u7ae0\u8282\u76ee\u5f55\uff09"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Previous Item\uff08\u4e0a\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors"},"Item 1: Consider static factory methods instead of constructors\uff08\u8003\u8651\u4ee5\u9759\u6001\u5de5\u5382\u65b9\u6cd5\u4ee3\u66ff\u6784\u9020\u51fd\u6570\uff09"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Next Item\uff08\u4e0b\u4e00\u6761\u76ee\uff09\uff1a",(0,r.kt)("a",{parentName:"strong",href:"./Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type"},"Item 3: Enforce the singleton property with a private constructor or an enum type\uff08\u4f7f\u7528\u79c1\u6709\u6784\u9020\u51fd\u6570\u6216\u679a\u4e3e\u7c7b\u578b\u5b9e\u65bd\u5355\u4f8b\u5c5e\u6027\uff09")))))}p.isMDXComponent=!0}}]);